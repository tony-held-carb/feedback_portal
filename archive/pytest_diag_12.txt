============================= test session starts =============================
platform win32 -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\tonyh\miniconda3\envs\mini_conda_01\python.exe
cachedir: .pytest_cache
rootdir: D:\local\cursor\feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, asyncio-1.1.0, base-url-2.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 3 items / 2 deselected / 1 selected

tests/e2e/test_diagnostics.py::test_diagnostics_overlay_on_diagnostic_test_page[chromium] FAILED [100%]

================================== FAILURES ===================================
_________ test_diagnostics_overlay_on_diagnostic_test_page[chromium] __________

page = <Page url='http://127.0.0.1:5000/java_script_diagnostic_test'>

    def test_diagnostics_overlay_on_diagnostic_test_page(page: Page):
        """
        E2E: Load /java_script_diagnostic_test, check overlay for page load diagnostic,
        click diagnostics button, and check overlay updates.
    
        This test verifies that:
        1. The diagnostics test page loads successfully
        2. Page load events are logged to the overlay
        3. The send diagnostic button works correctly
        4. Button clicks are logged to the overlay
        """
        # Navigate to the dedicated diagnostics test page
        page.goto(f"{BASE_URL}/java_script_diagnostic_test")
        page.wait_for_load_state("networkidle")
    
        # Scrape overlay after page load
        overlay = get_js_diagnostics_overlay(page)
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
    
        # Verify page load diagnostic is present
        assert 'Page loaded' in overlay or overlay != '[Overlay not found]', "Overlay did not show page load diagnostic."
    
        # Click the diagnostics button (use new class and data attribute selector)
        page.locator('.js-log-btn[data-js-logging-context="send-diagnostic"]').click()
        page.wait_for_timeout(500)
    
        # Scrape overlay after button click
        overlay2 = get_js_diagnostics_overlay(page)
        print(f"[DIAGNOSTICS OVERLAY after click] {overlay2}")
    
        # Verify send diagnostic action was logged
>       assert 'Send Diagnostic' in overlay2, "Overlay did not update after clicking diagnostics button."
E       AssertionError: Overlay did not update after clicking diagnostics button.
E       assert 'Send Diagnostic' in '[JS_DIAG] Page loaded (java_script_diagnostic_test)\n[JS_DIAG] Button clicked: send-diagnostic: Example diagnostic message from JS test page (java_script_diagnostic_test)\n'

tests\e2e\test_diagnostics.py:68: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded (java_script_diagnostic_test)

[DIAGNOSTICS OVERLAY after click] [JS_DIAG] Page loaded (java_script_diagnostic_test)
[JS_DIAG] Button clicked: send-diagnostic: Example diagnostic message from JS test page (java_script_diagnostic_test)

=========================== short test summary info ===========================
FAILED tests/e2e/test_diagnostics.py::test_diagnostics_overlay_on_diagnostic_test_page[chromium]
======================= 1 failed, 2 deselected in 1.68s =======================
