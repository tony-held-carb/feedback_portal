============================= test session starts =============================
platform win32 -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\tonyh\miniconda3\envs\mini_conda_01\python.exe
cachedir: .pytest_cache
rootdir: D:\local\cursor\feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, asyncio-1.1.0, base-url-2.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 4 items

tests/e2e/test_list_staged_diagnostics.py::test_list_staged_page_load_diagnostics[chromium] PASSED [ 25%]
tests/e2e/test_list_staged_diagnostics.py::test_list_staged_diagnostics_block_functionality[chromium] FAILED [ 50%]
tests/e2e/test_list_staged_diagnostics.py::test_list_staged_diagnostics_text_input[chromium] FAILED [ 75%]
tests/e2e/test_list_staged_diagnostics.py::test_list_staged_diagnostics_structure[chromium] FAILED [100%]

================================== FAILURES ===================================
_________ test_list_staged_diagnostics_block_functionality[chromium] __________

page = <Page url='http://127.0.0.1:5000/list_staged'>

    def test_list_staged_diagnostics_block_functionality(page: Page):
        """
        E2E: Test that the diagnostics block on /list_staged works correctly.
    
        This test verifies that:
        1. The diagnostics block is present on the page
        2. The send diagnostic button works
        3. The return home button works with confirmation modal
        4. All actions are logged to the overlay
        """
        # Navigate to /list_staged
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
    
        # Verify the diagnostics block is present
        diagnostics_block = page.locator('.js-diagnostics-block')
        assert diagnostics_block.is_visible(), "Diagnostics block should be visible"
    
        # Check that the block has the correct data-page attribute
        data_page = diagnostics_block.get_attribute('data-page')
        assert data_page == "list_staged", f"Expected data-page='list_staged', got '{data_page}'"
    
        # Get initial overlay content
        initial_overlay = get_js_diagnostics_overlay(page)
        print(f"[INITIAL OVERLAY] {initial_overlay}")
    
        # Test the send diagnostic button
        send_btn = page.locator(".js-log-btn[data-js-logging-context='send-diagnostic']")
>       assert send_btn.is_visible(), "Send diagnostic button should be visible"
E       AssertionError: Send diagnostic button should be visible
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector=".js-log-btn[data-js-logging-context='send-diagnostic']">.is_visible

tests\e2e\test_list_staged_diagnostics.py:98: AssertionError
---------------------------- Captured stdout call -----------------------------
[INITIAL OVERLAY] [JS_DIAG] Page loaded (list_staged)

______________ test_list_staged_diagnostics_text_input[chromium] ______________

page = <Page url='http://127.0.0.1:5000/list_staged'>

    def test_list_staged_diagnostics_text_input(page: Page):
        """
        E2E: Test that the diagnostics text input works correctly.
    
        This test verifies that:
        1. The text input is present and editable
        2. Custom messages can be entered and sent
        3. The custom message appears in the overlay
        """
        # Navigate to /list_staged
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
    
        # Find the diagnostic text input
        text_input = page.locator('.js-diagnostic-text')
        assert text_input.is_visible(), "Diagnostic text input should be visible"
    
        # Check initial value
        initial_value = text_input.input_value()
        assert "Diagnostic from /list_staged page" in initial_value, "Should have default diagnostic message"
    
        # Enter a custom message
        custom_message = "Custom test message from E2E test"
        text_input.fill(custom_message)
    
        # Verify the input was updated
        updated_value = text_input.input_value()
        assert updated_value == custom_message, f"Input should contain custom message, got '{updated_value}'"
    
        # Send the custom message
        send_btn = page.locator(".js-log-btn[data-js-logging-context='send-diagnostic']")
>       send_btn.click()

tests\e2e\test_list_staged_diagnostics.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\sync_api\_generated.py:15505: in click
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_locator.py:160: in click
    return await self._frame.click(self._selector, strict=True, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_frame.py:521: in click
    await self._channel.send("click", self._timeout, locals_to_params(locals()))
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x0000026182F18390>
cb = <function Channel.send.<locals>.<lambda> at 0x00000261833EFBA0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.
E           Call log:
E             - waiting for locator(".js-log-btn[data-js-logging-context='send-diagnostic']")

C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_connection.py:558: TimeoutError
______________ test_list_staged_diagnostics_structure[chromium] _______________

page = <Page url='http://127.0.0.1:5000/list_staged'>

    def test_list_staged_diagnostics_structure(page: Page):
        """
        E2E: Test that the diagnostics block has the correct structure and elements.
    
        This test verifies that all required elements are present and properly configured.
        """
        # Navigate to /list_staged
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
    
        # Check that all required elements are present
        required_elements = [
            '.js-diagnostics-block',
            '.js-diagnostic-text',
            '.js-log-btn[data-js-logging-context="send-diagnostic"]',
            '.js-return-home-btn',
            '.js-confirm-return-modal',
            '.js-confirm-return-btn',
            '.js-cancel-return-btn'
        ]
    
        for selector in required_elements:
            element = page.locator(selector)
>           assert element.count() > 0, f"Required element '{selector}' should be present"
E           AssertionError: Required element '.js-log-btn[data-js-logging-context="send-diagnostic"]' should be present
E           assert 0 > 0
E            +  where 0 = count()
E            +    where count = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='.js-log-btn[data-js-logging-context="send-diagnostic"]'>.count

tests\e2e\test_list_staged_diagnostics.py:196: AssertionError
=========================== short test summary info ===========================
FAILED tests/e2e/test_list_staged_diagnostics.py::test_list_staged_diagnostics_block_functionality[chromium]
FAILED tests/e2e/test_list_staged_diagnostics.py::test_list_staged_diagnostics_text_input[chromium]
FAILED tests/e2e/test_list_staged_diagnostics.py::test_list_staged_diagnostics_structure[chromium]
======================== 3 failed, 1 passed in 34.21s =========================
