============================= test session starts =============================
platform win32 -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\tonyh\miniconda3\envs\mini_conda_01\python.exe
cachedir: .pytest_cache
rootdir: D:\local\cursor\feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, asyncio-1.1.0, base-url-2.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 3 items / 2 deselected / 1 selected

tests/e2e/test_diagnostics.py::test_diagnostics_overlay_on_diagnostic_test_page[chromium] FAILED [100%]

================================== FAILURES ===================================
_________ test_diagnostics_overlay_on_diagnostic_test_page[chromium] __________

page = <Page url='http://127.0.0.1:5000/java_script_diagnostic_test'>

    def test_diagnostics_overlay_on_diagnostic_test_page(page: Page):
        """
        E2E: Load /java_script_diagnostic_test, check overlay for page load diagnostic,
        click diagnostics button, and check overlay updates.
    
        This test verifies that:
        1. The diagnostics test page loads successfully
        2. Page load events are logged to the overlay
        3. The send diagnostic button works correctly
        4. Button clicks are logged to the overlay
        """
        # Navigate to the dedicated diagnostics test page
        page.goto(f"{BASE_URL}/java_script_diagnostic_test")
        page.wait_for_load_state("networkidle")
    
        # Scrape overlay after page load
        overlay = get_js_diagnostics_overlay(page)
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
    
        # Verify page load diagnostic is present
        assert 'Page loaded' in overlay or overlay != '[Overlay not found]', "Overlay did not show page load diagnostic."
    
        # Click the diagnostics button (use class-based selector)
>       page.locator('.js-send-diagnostic-btn').click()

tests\e2e\test_diagnostics.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\sync_api\_generated.py:15505: in click
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_locator.py:160: in click
    return await self._frame.click(self._selector, strict=True, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_frame.py:521: in click
    await self._channel.send("click", self._timeout, locals_to_params(locals()))
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x0000018F1F4E6A50>
cb = <function Channel.send.<locals>.<lambda> at 0x0000018F1F5304A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.
E           Call log:
E             - waiting for locator(".js-send-diagnostic-btn")

C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_connection.py:558: TimeoutError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded (java_script_diagnostic_test)

=========================== short test summary info ===========================
FAILED tests/e2e/test_diagnostics.py::test_diagnostics_overlay_on_diagnostic_test_page[chromium]
====================== 1 failed, 2 deselected in 31.24s =======================
