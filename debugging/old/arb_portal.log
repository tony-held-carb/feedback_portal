+2025-07-04 12:07:51.236 | DEBUG    | arb_portal       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'arb_portal', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:51.236 | DEBUG    | root             | user:anonymous | 130   | __get_logger.py      | Logging was initialized on first usage. Outputting logs to C:\tony_local\pycharm\feedback_portal\logs\arb_portal.log
+2025-07-04 12:07:51.240 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:51.241 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:51.241 | DEBUG    | app_logger       | user:anonymous | 27    | __init__.py          | Loading File: "__init__.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\__init__.py"
+2025-07-04 12:07:51.750 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:51.750 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:51.750 | DEBUG    | app_logger       | user:anonymous | 21    | settings.py          | Loading File: "settings.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\config\settings.py"
+2025-07-04 12:07:51.750 | INFO     | app_logger       | user:anonymous | 75    | settings.py          | FAST_LOAD = False
+2025-07-04 12:07:51.750 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:51.750 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:51.750 | DEBUG    | app_logger       | user:anonymous | 31    | __init__.py          | Loading File: "__init__.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\config\__init__.py"
+2025-07-04 12:07:58.959 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:58.959 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:58.959 | DEBUG    | app_logger       | user:anonymous | 28    | extensions.py        | Loading File: "extensions.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\extensions.py"
+2025-07-04 12:07:58.974 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:58.974 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:58.974 | DEBUG    | app_logger       | user:anonymous | 26    | globals.py           | Loading File: "globals.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\globals.py"
+2025-07-04 12:07:58.974 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:58.974 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:58.997 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:58.997 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:58.997 | DEBUG    | app_logger       | user:anonymous | 32    | constants.py         | Loading File: "constants.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\constants.py"
+2025-07-04 12:07:59.037 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.037 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.037 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.037 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.037 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.037 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.037 | DEBUG    | app_logger       | user:anonymous | 22    | db_hardcoded.py      | Loading File: "db_hardcoded.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\db_hardcoded.py"
+2025-07-04 12:07:59.084 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.084 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.163 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.163 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.163 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.163 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.178 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.178 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.178 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 21    | accessors.py         | Loading File: "accessors.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\config\accessors.py"
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.178 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 30    | sqla_models.py       | Loading File: "sqla_models.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\sqla_models.py"
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.178 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.178 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 31    | runtime_info.py      | Loading File: "runtime_info.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\startup\runtime_info.py"
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 74    | runtime_info.py      | PROJECT_ROOT=C:\tony_local\pycharm\feedback_portal
+2025-07-04 12:07:59.178 | INFO     | app_logger       | user:anonymous | 49    | runtime_info.py      | PLATFORM             = windows
+2025-07-04 12:07:59.178 | INFO     | app_logger       | user:anonymous | 50    | runtime_info.py      | IS_WINDOWS           = True
+2025-07-04 12:07:59.178 | INFO     | app_logger       | user:anonymous | 51    | runtime_info.py      | IS_LINUX             = False
+2025-07-04 12:07:59.178 | INFO     | app_logger       | user:anonymous | 52    | runtime_info.py      | IS_MAC               = False
+2025-07-04 12:07:59.178 | INFO     | app_logger       | user:anonymous | 53    | runtime_info.py      | PROJECT_ROOT         = C:\tony_local\pycharm\feedback_portal
+2025-07-04 12:07:59.178 | INFO     | app_logger       | user:anonymous | 54    | runtime_info.py      | UPLOAD_PATH          = C:\tony_local\pycharm\feedback_portal\portal_uploads
+2025-07-04 12:07:59.178 | INFO     | app_logger       | user:anonymous | 55    | runtime_info.py      | LOG_DIR              = C:\tony_local\pycharm\feedback_portal\logs
+2025-07-04 12:07:59.178 | INFO     | app_logger       | user:anonymous | 56    | runtime_info.py      | STATIC_DIR           = C:\tony_local\pycharm\feedback_portal\arb\portal\static
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.178 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 18    | db_introspection_util.py | Loading File: "db_introspection_util.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\utils\db_introspection_util.py"
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.178 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:07:59.178 | DEBUG    | app_logger       | user:anonymous | 16    | file_upload_util.py  | Loading File: "file_upload_util.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\utils\file_upload_util.py"
+2025-07-04 12:07:59.194 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:07:59.194 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.085 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.085 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.085 | DEBUG    | app_logger       | user:anonymous | 144   | file_io.py           | root =WindowsPath('C:/tony_local/pycharm/feedback_portal'), based on structure structure =['feedback_portal', 'source', 'production', 'arb', 'utils', 'excel']
+2025-07-04 12:08:00.085 | DEBUG    | app_logger       | user:anonymous | 49    | xl_file_structure.py | PROJECT_ROOT =WindowsPath('C:/tony_local/pycharm/feedback_portal'), FEEDBACK_FORMS =WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms'), CURRENT_VERSIONS =WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/current_versions'), PROCESSED_VERSIONS =WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions')
+2025-07-04 12:08:00.085 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.085 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.085 | DEBUG    | app_logger       | user:anonymous | 58    | xl_parse.py          | initialize_module() called
+2025-07-04 12:08:00.085 | DEBUG    | app_logger       | user:anonymous | 76    | xl_parse.py          | set_globals() called with xl_schema_file_map_=None
+2025-07-04 12:08:00.098 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.098 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.098 | DEBUG    | app_logger       | user:anonymous | 109   | xl_parse.py          | load_schema_file_map() called with schema_file_map={'landfill_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/landfill_v01_00.json'), 'landfill_v01_01': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/landfill_v01_01.json'), 'oil_and_gas_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/oil_and_gas_v01_00.json'), 'energy_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/energy_v01_00.json'), 'dairy_digester_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/dairy_digester_v01_00.json'), 'generic_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/generic_v01_00.json')}
+2025-07-04 12:08:00.098 | DEBUG    | app_logger       | user:anonymous | 242   | json.py              | json_load_with_meta() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/landfill_v01_00.json'), json_options=None
+2025-07-04 12:08:00.098 | DEBUG    | app_logger       | user:anonymous | 211   | json.py              | json_load() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/landfill_v01_00.json'), json_options=None
+2025-07-04 12:08:00.101 | DEBUG    | app_logger       | user:anonymous | 242   | json.py              | json_load_with_meta() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/landfill_v01_01.json'), json_options=None
+2025-07-04 12:08:00.101 | DEBUG    | app_logger       | user:anonymous | 211   | json.py              | json_load() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/landfill_v01_01.json'), json_options=None
+2025-07-04 12:08:00.117 | DEBUG    | app_logger       | user:anonymous | 242   | json.py              | json_load_with_meta() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/oil_and_gas_v01_00.json'), json_options=None
+2025-07-04 12:08:00.117 | DEBUG    | app_logger       | user:anonymous | 211   | json.py              | json_load() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/oil_and_gas_v01_00.json'), json_options=None
+2025-07-04 12:08:00.148 | DEBUG    | app_logger       | user:anonymous | 242   | json.py              | json_load_with_meta() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/energy_v01_00.json'), json_options=None
+2025-07-04 12:08:00.148 | DEBUG    | app_logger       | user:anonymous | 211   | json.py              | json_load() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/energy_v01_00.json'), json_options=None
+2025-07-04 12:08:00.164 | DEBUG    | app_logger       | user:anonymous | 242   | json.py              | json_load_with_meta() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/dairy_digester_v01_00.json'), json_options=None
+2025-07-04 12:08:00.164 | DEBUG    | app_logger       | user:anonymous | 211   | json.py              | json_load() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/dairy_digester_v01_00.json'), json_options=None
+2025-07-04 12:08:00.179 | DEBUG    | app_logger       | user:anonymous | 242   | json.py              | json_load_with_meta() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/generic_v01_00.json'), json_options=None
+2025-07-04 12:08:00.179 | DEBUG    | app_logger       | user:anonymous | 211   | json.py              | json_load() called with file_path=WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/generic_v01_00.json'), json_options=None
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 94    | xl_parse.py          | globals are now: xl_schema_file_map={'landfill_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/landfill_v01_00.json'), 'landfill_v01_01': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/landfill_v01_01.json'), 'oil_and_gas_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/oil_and_gas_v01_00.json'), 'energy_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/energy_v01_00.json'), 'dairy_digester_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/dairy_digester_v01_00.json'), 'generic_v01_00': WindowsPath('C:/tony_local/pycharm/feedback_portal/feedback_forms/processed_versions/xl_schemas/generic_v01_00.json')}, xl_schema_map={'landfill_v01_00': {'schema': {'id_incidence': {'label': '1.  Incidence/Emission ID', 'label_address': '$B$23', 'value_address': '$D$23', 'value_type': <class 'int'>, 'is_drop_down': False}, 'id_plume': {'label': '2.  Plume ID(s)', 'label_address': '$B$24', 'value_address': '$D$24', 'value_type': <class 'int'>, 'is_drop_down': False}, 'observation_timestamp': {'label': '3.  Plume Observation Date', 'label_address': '$B$25', 'value_address': '$D$25', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'lat_carb': {'label': '4.  Plume Origin CARB Estimated Latitude', 'label_address': '$B$26', 'value_address': '$D$26', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_carb': {'label': '5.  Plume Origin CARB Estimated Longitude', 'label_address': '$B$27', 'value_address': '$D$27', 'value_type': <class 'float'>, 'is_drop_down': False}, 'id_message': {'label': '6.  CARB Message ID', 'label_address': '$B$28', 'value_address': '$D$28', 'value_type': <class 'str'>, 'is_drop_down': False}, 'facility_name': {'label': 'Q1.  Facility Name', 'label_address': '$B$32', 'value_address': '$D$32', 'value_type': <class 'str'>, 'is_drop_down': False}, 'id_arb_swis': {'label': 'Q2.  Facility SWIS ID', 'label_address': '$B$33', 'value_address': '$D$33', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_name': {'label': 'Q3.  Contact Name', 'label_address': '$B$34', 'value_address': '$D$34', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_phone': {'label': 'Q4.  Contact Phone', 'label_address': '$B$35', 'value_address': '$D$35', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_email': {'label': 'Q5.  Contact Email', 'label_address': '$B$36', 'value_address': '$D$36', 'value_type': <class 'str'>, 'is_drop_down': False}, 'inspection_timestamp': {'label': "Q6.  Date of owner/operator's follow-up ground monitoring.", 'label_address': '$B$40', 'value_address': '$D$40', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'instrument': {'label': 'Q7.  Instrument used to locate the leak (e.g., Fisher Scientific TVA2020; RKI Multigas Analyzer Eagle 2; TDL).', 'label_address': '$B$41', 'value_address': '$D$41', 'value_type': <class 'str'>, 'is_drop_down': False}, 'emission_identified_flag_fk': {'label': 'Q8.  Was a leak identified through prior knowledge or by follow-up monitoring after receipt of a CARB plume notice?', 'label_address': '$B$42', 'value_address': '$D$42', 'value_type': <class 'str'>, 'is_drop_down': True}, 'additional_activities': {'label': 'Q9.  If no leaks were found, please describe any events or activities that may have contributed to the plume observed on the date provided in Section 2.', 'label_address': '$B$43', 'value_address': '$D$43', 'value_type': <class 'str'>, 'is_drop_down': False}, 'initial_leak_concentration': {'label': 'Q10:  Maximum concentration of methane leak (in ppmv).', 'label_address': '$B$47', 'value_address': '$D$47', 'value_type': <class 'float'>, 'is_drop_down': False}, 'lat_revised': {'label': "Q11.  Please provide a revised latitude if the leak location differs from CARB's estimate in Section 2.", 'label_address': '$B$48', 'value_address': '$D$48', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_revised': {'label': "Q12.  Please provide a revised longitude if the leak location differs from CARB's estimate in Section 2.", 'label_address': '$B$49', 'value_address': '$D$49', 'value_type': <class 'float'>, 'is_drop_down': False}, 'emission_type_fk': {'label': 'Q13:  Please select from the drop-down menu which option best matches the description of the leak.', 'label_address': '$B$50', 'value_address': '$D$50', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_location': {'label': 'Q14.  Please select from the drop-down menu which option best describes the location of the leak.', 'label_address': '$B$51', 'value_address': '$D$51', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_location_notes': {'label': 'Q15.  Please provide a more detailed description of the leak location, including grid ID number or component name, if applicable.', 'label_address': '$B$52', 'value_address': '$D$52', 'value_type': <class 'str'>, 'is_drop_down': False}, 'emission_cause': {'label': 'Q16.  Please select the most likely cause of the leak.', 'label_address': '$B$53', 'value_address': '$D$53', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_cause_secondary': {'label': 'Q17 (Optional).  Please select an alternative cause (only if suspected).  This should not be the same as your Q16 response.', 'label_address': '$B$54', 'value_address': '$D$54', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_cause_tertiary': {'label': 'Q18 (Optional).  Please select an alternative cause (only if suspected).  This should not be the same as your Q16 or Q17 responses.', 'label_address': '$B$55', 'value_address': '$D$55', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_cause_notes': {'label': 'Q19.  Please provide a more detailed description of the cause(s), including the reason for and duration of any construction activity or downtime.', 'label_address': '$B$56', 'value_address': '$D$56', 'value_type': <class 'str'>, 'is_drop_down': False}, 'mitigation_actions': {'label': 'Q20.  Describe any corrective actions taken.', 'label_address': '$B$60', 'value_address': '$D$60', 'value_type': <class 'str'>, 'is_drop_down': False}, 'mitigation_timestamp': {'label': 'Q21.  Repair date.', 'label_address': '$B$61', 'value_address': '$D$61', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 're_monitored_timestamp': {'label': 'Q22.  Re-monitored date.', 'label_address': '$B$62', 'value_address': '$D$62', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 're_monitored_concentration': {'label': 'Q23.  Re-monitored methane concentration after repair (ppmv).', 'label_address': '$B$63', 'value_address': '$D$63', 'value_type': <class 'float'>, 'is_drop_down': False}, 'included_in_last_lmr': {'label': 'Q24.  Was the leak location monitored in the most recent prior quarterly/annual surface emissions or quarterly component leak monitoring event?', 'label_address': '$B$64', 'value_address': '$D$64', 'value_type': <class 'str'>, 'is_drop_down': True}, 'included_in_last_lmr_description': {'label': "Q25.  If 'No' to Q24, please explain why the area was excluded from monitoring.", 'label_address': '$B$65', 'value_address': '$D$65', 'value_type': <class 'str'>, 'is_drop_down': False}, 'planned_for_next_lmr': {'label': 'Q26.  Is this grid/component planned for inclusion in the next quarterly/annual leak monitoring?', 'label_address': '$B$66', 'value_address': '$D$66', 'value_type': <class 'str'>, 'is_drop_down': True}, 'planned_for_next_lmr_description': {'label': "Q27.  If 'No' to Q26, please state why the area will not be monitored.", 'label_address': '$B$67', 'value_address': '$D$67', 'value_type': <class 'str'>, 'is_drop_down': False}, 'last_surface_monitoring_timestamp': {'label': 'Q28.  Date of most recent surface emissions monitoring event (prior to this notification).', 'label_address': '$B$71', 'value_address': '$D$71', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'last_component_leak_monitoring_timestamp': {'label': 'Q29.  Date of most recent component leak monitoring event (prior to this notification).', 'label_address': '$B$72', 'value_address': '$D$72', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'additional_notes': {'label': 'Q30.  Additional notes or comments.', 'label_address': '$B$73', 'value_address': '$D$73', 'value_type': <class 'str'>, 'is_drop_down': False}}, 'metadata': {'schema_version': 'landfill_v01_00', 'File created at': '2025-07-04T15:55:23.615295+00:00', 'Serialized with': 'utils.json.json_save_with_meta', 'Deserialize with': 'utils.json.json_load_with_meta'}}, 'landfill_v01_01': {'schema': {'id_incidence': {'label': '1.  Incidence/Emission ID', 'label_address': '$B$23', 'value_address': '$D$23', 'value_type': <class 'int'>, 'is_drop_down': False}, 'id_plume': {'label': '2.  Plume ID(s)', 'label_address': '$B$24', 'value_address': '$D$24', 'value_type': <class 'int'>, 'is_drop_down': False}, 'observation_timestamp': {'label': '3.  Plume Observation Date', 'label_address': '$B$25', 'value_address': '$D$25', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'lat_carb': {'label': '4.  Plume Origin CARB Estimated Latitude', 'label_address': '$B$26', 'value_address': '$D$26', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_carb': {'label': '5.  Plume Origin CARB Estimated Longitude', 'label_address': '$B$27', 'value_address': '$D$27', 'value_type': <class 'float'>, 'is_drop_down': False}, 'id_message': {'label': '6.  CARB Message ID', 'label_address': '$B$28', 'value_address': '$D$28', 'value_type': <class 'str'>, 'is_drop_down': False}, 'facility_name': {'label': 'Q1.  Facility Name', 'label_address': '$B$32', 'value_address': '$D$32', 'value_type': <class 'str'>, 'is_drop_down': False}, 'id_arb_swis': {'label': 'Q2.  Facility SWIS ID', 'label_address': '$B$33', 'value_address': '$D$33', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_name': {'label': 'Q3.  Contact Name', 'label_address': '$B$34', 'value_address': '$D$34', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_phone': {'label': 'Q4.  Contact Phone', 'label_address': '$B$35', 'value_address': '$D$35', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_email': {'label': 'Q5.  Contact Email', 'label_address': '$B$36', 'value_address': '$D$36', 'value_type': <class 'str'>, 'is_drop_down': False}, 'inspection_timestamp': {'label': "Q6.  Date of owner/operator's follow-up ground monitoring.", 'label_address': '$B$40', 'value_address': '$D$40', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'instrument': {'label': 'Q7.  Instrument used to locate the leak (e.g., Fisher Scientific TVA2020; RKI Multigas Analyzer Eagle 2; TDL).', 'label_address': '$B$41', 'value_address': '$D$41', 'value_type': <class 'str'>, 'is_drop_down': False}, 'emission_identified_flag_fk': {'label': 'Q8.  Was a leak identified through prior knowledge or by follow-up monitoring after receipt of a CARB plume notice?', 'label_address': '$B$42', 'value_address': '$D$42', 'value_type': <class 'str'>, 'is_drop_down': True}, 'additional_activities': {'label': 'Q9.  If no leaks were found, please describe any events or activities that may have contributed to the plume observed on the date provided in Section 2.', 'label_address': '$B$43', 'value_address': '$D$43', 'value_type': <class 'str'>, 'is_drop_down': False}, 'initial_leak_concentration': {'label': 'Q10:  Maximum concentration of methane leak (in ppmv).', 'label_address': '$B$47', 'value_address': '$D$47', 'value_type': <class 'float'>, 'is_drop_down': False}, 'lat_revised': {'label': "Q11.  Please provide a revised latitude if the leak location differs from CARB's estimate in Section 2.", 'label_address': '$B$48', 'value_address': '$D$48', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_revised': {'label': "Q12.  Please provide a revised longitude if the leak location differs from CARB's estimate in Section 2.", 'label_address': '$B$49', 'value_address': '$D$49', 'value_type': <class 'float'>, 'is_drop_down': False}, 'emission_type_fk': {'label': 'Q13:  Please select from the drop-down menu which option best matches the description of the leak.', 'label_address': '$B$50', 'value_address': '$D$50', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_location': {'label': 'Q14.  Please select from the drop-down menu which option best describes the location of the leak.', 'label_address': '$B$51', 'value_address': '$D$51', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_location_notes': {'label': 'Q15.  Please provide a more detailed description of the leak location, including grid ID number or component name, if applicable.', 'label_address': '$B$52', 'value_address': '$D$52', 'value_type': <class 'str'>, 'is_drop_down': False}, 'emission_cause': {'label': 'Q16.  Please select the most likely cause of the leak.', 'label_address': '$B$53', 'value_address': '$D$53', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_cause_secondary': {'label': 'Q17 (Optional).  Please select an alternative cause (only if suspected).  This should not be the same as your Q16 response.', 'label_address': '$B$54', 'value_address': '$D$54', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_cause_tertiary': {'label': 'Q18 (Optional).  Please select an alternative cause (only if suspected).  This should not be the same as your Q16 or Q17 responses.', 'label_address': '$B$55', 'value_address': '$D$55', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_cause_notes': {'label': 'Q19.  Please provide a more detailed description of the cause(s), including the reason for and duration of any construction activity or downtime.', 'label_address': '$B$56', 'value_address': '$D$56', 'value_type': <class 'str'>, 'is_drop_down': False}, 'mitigation_actions': {'label': 'Q20.  Describe any corrective actions taken.', 'label_address': '$B$60', 'value_address': '$D$60', 'value_type': <class 'str'>, 'is_drop_down': False}, 'mitigation_timestamp': {'label': 'Q21.  Repair date.', 'label_address': '$B$61', 'value_address': '$D$61', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 're_monitored_timestamp': {'label': 'Q22.  Re-monitored date.', 'label_address': '$B$62', 'value_address': '$D$62', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 're_monitored_concentration': {'label': 'Q23.  Re-monitored methane concentration after repair (ppmv).', 'label_address': '$B$63', 'value_address': '$D$63', 'value_type': <class 'float'>, 'is_drop_down': False}, 'included_in_last_lmr': {'label': 'Q24.  Was the leak location monitored in the most recent prior quarterly/annual surface emissions or quarterly component leak monitoring event?', 'label_address': '$B$64', 'value_address': '$D$64', 'value_type': <class 'str'>, 'is_drop_down': True}, 'included_in_last_lmr_description': {'label': "Q25.  If 'No' to Q24, please explain why the area was excluded from monitoring.", 'label_address': '$B$65', 'value_address': '$D$65', 'value_type': <class 'str'>, 'is_drop_down': False}, 'planned_for_next_lmr': {'label': 'Q26.  Is this grid/component planned for inclusion in the next quarterly/annual leak monitoring?', 'label_address': '$B$66', 'value_address': '$D$66', 'value_type': <class 'str'>, 'is_drop_down': True}, 'planned_for_next_lmr_description': {'label': "Q27.  If 'No' to Q26, please state why the area will not be monitored.", 'label_address': '$B$67', 'value_address': '$D$67', 'value_type': <class 'str'>, 'is_drop_down': False}, 'last_surface_monitoring_timestamp': {'label': 'Q28.  Date of most recent surface emissions monitoring event (prior to this notification).', 'label_address': '$B$71', 'value_address': '$D$71', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'last_component_leak_monitoring_timestamp': {'label': 'Q29.  Date of most recent component leak monitoring event (prior to this notification).', 'label_address': '$B$72', 'value_address': '$D$72', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'additional_notes': {'label': 'Q30.  Additional notes or comments.', 'label_address': '$B$73', 'value_address': '$D$73', 'value_type': <class 'str'>, 'is_drop_down': False}}, 'metadata': {'schema_version': 'landfill_v01_01', 'File created at': '2025-07-04T15:55:23.635484+00:00', 'Serialized with': 'utils.json.json_save_with_meta', 'Deserialize with': 'utils.json.json_load_with_meta'}}, 'oil_and_gas_v01_00': {'schema': {'id_incidence': {'label': '1.  Incidence/Emission ID', 'label_address': '$B$32', 'value_address': '$D$32', 'value_type': <class 'int'>, 'is_drop_down': False}, 'id_plume': {'label': '2.  Plume ID(s)', 'label_address': '$B$33', 'value_address': '$D$33', 'value_type': <class 'int'>, 'is_drop_down': False}, 'observation_timestamp': {'label': '3.  Plume Observation Timestamp(s)', 'label_address': '$B$34', 'value_address': '$D$34', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'lat_carb': {'label': '4.  Plume CARB Estimated Latitude', 'label_address': '$B$35', 'value_address': '$D$35', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_carb': {'label': '5.  Plume CARB Estimated Longitude', 'label_address': '$B$36', 'value_address': '$D$36', 'value_type': <class 'float'>, 'is_drop_down': False}, 'id_message': {'label': '6.  CARB message ID', 'label_address': '$B$37', 'value_address': '$D$37', 'value_type': <class 'str'>, 'is_drop_down': False}, 'facility_name': {'label': 'Q1.  Facility Name', 'label_address': '$B$41', 'value_address': '$D$41', 'value_type': <class 'str'>, 'is_drop_down': False}, 'id_arb_eggrt': {'label': "Q2.  Facility's Cal e-GGRT ARB ID (if known)", 'label_address': '$B$42', 'value_address': '$D$42', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_name': {'label': 'Q3.  Contact Name', 'label_address': '$B$43', 'value_address': '$D$43', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_phone': {'label': 'Q4.  Contact Phone Number', 'label_address': '$B$44', 'value_address': '$D$44', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_email': {'label': 'Q5.  Contact Email Address', 'label_address': '$B$45', 'value_address': '$D$45', 'value_type': <class 'str'>, 'is_drop_down': False}, 'venting_exclusion': {'label': 'Q6.  Was the plume a result of activity-based venting that is being reported per section 95669.1(b)(1) of the Oil and Gas Methane Regulation?', 'label_address': '$B$49', 'value_address': '$D$49', 'value_type': <class 'str'>, 'is_drop_down': True}, 'venting_description_1': {'label': "Q7.  If you answered 'Yes' to Q6, please provide a brief summary of the source of the venting defined by Regulation 95669.1(b)(1) and why the venting occurred.", 'label_address': '$B$50', 'value_address': '$D$50', 'value_type': <class 'str'>, 'is_drop_down': False}, 'ogi_performed': {'label': 'Q8. Was an OGI inspection performed?', 'label_address': '$B$54', 'value_address': '$D$54', 'value_type': <class 'str'>, 'is_drop_down': True}, 'ogi_date': {'label': "Q9.  If you answered 'Yes' to Q8, what date and time was the OGI inspection performed?", 'label_address': '$B$55', 'value_address': '$D$55', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'ogi_result': {'label': "Q10. If you answered 'Yes' to Q8, what type of source was found using OGI?", 'label_address': '$B$56', 'value_address': '$D$56', 'value_type': <class 'str'>, 'is_drop_down': True}, 'method21_performed': {'label': 'Q11.  Was a Method 21 inspection performed?', 'label_address': '$B$57', 'value_address': '$D$57', 'value_type': <class 'str'>, 'is_drop_down': True}, 'method21_date': {'label': "Q12.  If you answered 'Yes' to Q11, what date and time was the Method 21 inspection performed?", 'label_address': '$B$58', 'value_address': '$D$58', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'method21_result': {'label': "Q13. If you answered 'Yes' to Q11, what type of source was found using Method 21?", 'label_address': '$B$59', 'value_address': '$D$59', 'value_type': <class 'str'>, 'is_drop_down': True}, 'initial_leak_concentration': {'label': "Q14.  If you answered 'Yes' to Q11, what was the initial leak concentration in ppmv (if applicable)?", 'label_address': '$B$60', 'value_address': '$D$60', 'value_type': <class 'float'>, 'is_drop_down': False}, 'venting_description_2': {'label': "Q15.  If you answered 'Venting' to Q10 or Q13, please provide a brief summary of the source of the venting discovered during the ground inspection and why the venting occurred.", 'label_address': '$B$61', 'value_address': '$D$61', 'value_type': <class 'str'>, 'is_drop_down': False}, 'initial_mitigation_plan': {'label': "Q16.  If you answered a 'Unintentional-leak' or 'Unintentional-non-component' to Q10 or Q13, please provide a description of your initial mitigation plan.", 'label_address': '$B$62', 'value_address': '$D$62', 'value_type': <class 'str'>, 'is_drop_down': False}, 'equipment_at_source': {'label': 'Q17.  What type of equipment is at the source of the emissions?', 'label_address': '$B$66', 'value_address': '$D$66', 'value_type': <class 'str'>, 'is_drop_down': True}, 'equipment_other_description': {'label': "Q18.  If you answered 'Other' for Q17, please provide an additional description of the equipment.", 'label_address': '$B$67', 'value_address': '$D$67', 'value_type': <class 'str'>, 'is_drop_down': False}, 'component_at_source': {'label': 'Q19.  If your source is a component, what type of component is at the source of the emissions?', 'label_address': '$B$68', 'value_address': '$D$68', 'value_type': <class 'str'>, 'is_drop_down': True}, 'component_other_description': {'label': "Q20.  If you answered 'Other' for Q19, please provide an additional description of the component.", 'label_address': '$B$69', 'value_address': '$D$69', 'value_type': <class 'str'>, 'is_drop_down': False}, 'repair_timestamp': {'label': 'Q21.  Repair/mitigation completion date & time (if applicable).', 'label_address': '$B$70', 'value_address': '$D$70', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'final_repair_concentration': {'label': 'Q22.  Final repair concentration in ppmv (if applicable).', 'label_address': '$B$71', 'value_address': '$D$71', 'value_type': <class 'float'>, 'is_drop_down': False}, 'repair_description': {'label': 'Q23.  Repair/Mitigation actions taken (if applicable).', 'label_address': '$B$72', 'value_address': '$D$72', 'value_type': <class 'str'>, 'is_drop_down': False}, 'additional_notes': {'label': 'Q24.  Additional notes or comments.', 'label_address': '$B$76', 'value_address': '$D$76', 'value_type': <class 'str'>, 'is_drop_down': False}}, 'metadata': {'schema_version': 'oil_and_gas_v01_00', 'File created at': '2025-07-04T15:55:23.656441+00:00', 'Serialized with': 'utils.json.json_save_with_meta', 'Deserialize with': 'utils.json.json_load_with_meta'}}, 'energy_v01_00': {'schema': {'id_incidence': {'label': '1.  Incidence/Emission ID', 'label_address': '$B$20', 'value_address': '$D$20', 'value_type': <class 'int'>, 'is_drop_down': False}, 'id_plume': {'label': '2.  Plume ID(s)', 'label_address': '$B$21', 'value_address': '$D$21', 'value_type': <class 'int'>, 'is_drop_down': False}, 'observation_timestamp': {'label': '3.  Plume Observation Timestamp(s)', 'label_address': '$B$22', 'value_address': '$D$22', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'lat_carb': {'label': '4.  Plume CARB Estimated Latitude', 'label_address': '$B$23', 'value_address': '$D$23', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_carb': {'label': '5.  Plume CARB Estimated Longitude', 'label_address': '$B$24', 'value_address': '$D$24', 'value_type': <class 'float'>, 'is_drop_down': False}, 'id_message': {'label': '6.  CARB message ID', 'label_address': '$B$25', 'value_address': '$D$25', 'value_type': <class 'str'>, 'is_drop_down': False}, 'facility_name': {'label': 'Q1.  Facility Name', 'label_address': '$B$29', 'value_address': '$D$29', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_name': {'label': 'Q2.  Contact Name', 'label_address': '$B$30', 'value_address': '$D$30', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_phone': {'label': 'Q3.  Contact Phone Number', 'label_address': '$B$31', 'value_address': '$D$31', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_email': {'label': 'Q4.  Contact Email Address', 'label_address': '$B$32', 'value_address': '$D$32', 'value_type': <class 'str'>, 'is_drop_down': False}, 'ogi_performed': {'label': 'Q5.  Was an OGI inspection performed?', 'label_address': '$B$36', 'value_address': '$D$36', 'value_type': <class 'str'>, 'is_drop_down': True}, 'ogi_date': {'label': "Q6.  If you answered 'Yes' to Q5, what date and time was the OGI inspection performed?", 'label_address': '$B$37', 'value_address': '$D$37', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'ogi_result': {'label': "Q7.  If you answered 'Yes' to Q5, what type of source was found using OGI?", 'label_address': '$B$38', 'value_address': '$D$38', 'value_type': <class 'str'>, 'is_drop_down': True}, 'method21_performed': {'label': 'Q8.  Was a Method 21 inspection performed?', 'label_address': '$B$39', 'value_address': '$D$39', 'value_type': <class 'str'>, 'is_drop_down': True}, 'method21_date': {'label': "Q9.  If you answered 'Yes' to Q8, what date and time was the Method 21 inspection performed?", 'label_address': '$B$40', 'value_address': '$D$40', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'method21_result': {'label': "Q10.  If you answered 'Yes' to Q8, what type of source was found using Method 21?", 'label_address': '$B$41', 'value_address': '$D$41', 'value_type': <class 'str'>, 'is_drop_down': True}, 'initial_leak_concentration': {'label': "Q11. If you answered 'Yes' to Q8, what was the initial leak concentration in ppmv (if applicable)?", 'label_address': '$B$42', 'value_address': '$D$42', 'value_type': <class 'float'>, 'is_drop_down': False}, 'venting_description_2': {'label': "Q12.  If you answered 'Venting' to Q7 or Q10, please provide a brief summary of the source of the venting discovered during the ground inspection and why the venting occurred.", 'label_address': '$B$43', 'value_address': '$D$43', 'value_type': <class 'str'>, 'is_drop_down': False}, 'initial_mitigation_plan': {'label': "Q13.  If you answered a 'Unintentional-leak' or 'Unintentional-non-component' to Q7 or Q10, please provide a description of your initial mitigation plan.", 'label_address': '$B$44', 'value_address': '$D$44', 'value_type': <class 'str'>, 'is_drop_down': False}, 'equipment_at_source': {'label': 'Q14.  What type of equipment is at the source of the emissions?', 'label_address': '$B$48', 'value_address': '$D$48', 'value_type': <class 'str'>, 'is_drop_down': False}, 'component_at_source': {'label': 'Q15.  If your source is a component, what type of component is at the source of the emissions?', 'label_address': '$B$49', 'value_address': '$D$49', 'value_type': <class 'str'>, 'is_drop_down': False}, 'repair_timestamp': {'label': 'Q16.  Repair/mitigation completion date & time (if applicable).', 'label_address': '$B$50', 'value_address': '$D$50', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'final_repair_concentration': {'label': 'Q17.  Final repair concentration in ppmv (if applicable).', 'label_address': '$B$51', 'value_address': '$D$51', 'value_type': <class 'float'>, 'is_drop_down': False}, 'repair_description': {'label': 'Q18.  Repair/Mitigation actions taken (if applicable).', 'label_address': '$B$52', 'value_address': '$D$52', 'value_type': <class 'str'>, 'is_drop_down': False}, 'additional_notes': {'label': 'Q19.  Additional notes or comments.', 'label_address': '$B$56', 'value_address': '$D$56', 'value_type': <class 'str'>, 'is_drop_down': False}}, 'metadata': {'schema_version': 'energy_v01_00', 'File created at': '2025-07-04T15:55:23.688796+00:00', 'Serialized with': 'utils.json.json_save_with_meta', 'Deserialize with': 'utils.json.json_load_with_meta'}}, 'dairy_digester_v01_00': {'schema': {'id_incidence': {'label': '1.  Incidence/Emission ID', 'label_address': '$B$21', 'value_address': '$D$21', 'value_type': <class 'int'>, 'is_drop_down': False}, 'id_plume': {'label': '2.  Plume ID(s)', 'label_address': '$B$22', 'value_address': '$D$22', 'value_type': <class 'int'>, 'is_drop_down': False}, 'observation_timestamp': {'label': '3.  Plume Observation Timestamp(s)', 'label_address': '$B$23', 'value_address': '$D$23', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'lat_carb': {'label': '4.  Plume Origin CARB Estimated Latitude', 'label_address': '$B$24', 'value_address': '$D$24', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_carb': {'label': '5.  Plume Origin CARB Estimated Longitude', 'label_address': '$B$25', 'value_address': '$D$25', 'value_type': <class 'float'>, 'is_drop_down': False}, 'id_message': {'label': '6.  CARB Message ID', 'label_address': '$B$26', 'value_address': '$D$26', 'value_type': <class 'str'>, 'is_drop_down': False}, 'digester_facility_name': {'label': 'Q1.  Digester Facility Name', 'label_address': '$B$30', 'value_address': '$D$30', 'value_type': <class 'str'>, 'is_drop_down': False}, 'livestock_facility_name': {'label': 'Q2.  Livestock Facility Name', 'label_address': '$B$31', 'value_address': '$D$31', 'value_type': <class 'str'>, 'is_drop_down': False}, 'id_arb_ciwqs': {'label': 'Q3.  Facility CIWQS Place ID', 'label_address': '$B$32', 'value_address': '$D$32', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_name': {'label': 'Q4.  Contact Name', 'label_address': '$B$33', 'value_address': '$D$33', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_phone': {'label': 'Q5.  Contact Phone', 'label_address': '$B$34', 'value_address': '$D$34', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_email': {'label': 'Q6.  Contact Email', 'label_address': '$B$35', 'value_address': '$D$35', 'value_type': <class 'str'>, 'is_drop_down': False}, 'inspection_timestamp': {'label': 'Q7.  Please provide date and time of the ground survey or site inspection, if performed.', 'label_address': '$B$39', 'value_address': '$D$39', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'additional_activities': {'label': 'Q8.  If no emission source was identified, please describe any events or activities that may have contributed to the plume observed on the date provided in Section 2.', 'label_address': '$B$40', 'value_address': '$D$40', 'value_type': <class 'str'>, 'is_drop_down': False}, 'initial_leak_concentration': {'label': 'Q9:  Please provide the maximum concentration of methane leak (in ppmv if applicable/possible).', 'label_address': '$B$41', 'value_address': '$D$41', 'value_type': <class 'float'>, 'is_drop_down': False}, 'instrument': {'label': 'Q10.  Instrument used to perform monitoring (e.g., Fisher Scientific TVA2020; RKI Multigas Analyzer Eagle 2; TDL).', 'label_address': '$B$42', 'value_address': '$D$42', 'value_type': <class 'str'>, 'is_drop_down': False}, 'emission_type_fk': {'label': 'Q11.  Please select from the drop-down menu which option best matches the description of the methane emissions.', 'label_address': '$B$43', 'value_address': '$D$43', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_location': {'label': 'Q12.  Please select from the drop-down menu which option best describes the location of the methane emissions', 'label_address': '$B$44', 'value_address': '$D$44', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_location_notes': {'label': 'Q13.  Please provide a more detailed description of the location:', 'label_address': '$B$45', 'value_address': '$D$45', 'value_type': <class 'str'>, 'is_drop_down': False}, 'emission_cause': {'label': 'Q14.  Please select from the drop-down menu which option best describes the most likely cause of the methane emissions', 'label_address': '$B$46', 'value_address': '$D$46', 'value_type': <class 'str'>, 'is_drop_down': True}, 'emission_cause_notes': {'label': 'Q15.  Please provide a more detailed description of the cause, including the duration of any activity that may have contributed to the emission source', 'label_address': '$B$47', 'value_address': '$D$47', 'value_type': <class 'str'>, 'is_drop_down': False}, 'able_to_repair': {'label': 'Q16.  Was the emission source able to be repaired?', 'label_address': '$B$51', 'value_address': '$D$51', 'value_type': <class 'str'>, 'is_drop_down': True}, 'mitigation_timestamp': {'label': 'Q17.  Date and time of repair, if complete.', 'label_address': '$B$52', 'value_address': '$D$52', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'mitigation_actions': {'label': 'Q18.  Please describe what actions were taken to repair the emission source, or will be taken in the future, if applicable.', 'label_address': '$B$53', 'value_address': '$D$53', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_solid_dry_scrape': {'label': '  •  Solid/dry scrape manure collection', 'label_address': '$B$58', 'value_address': '$D$58', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_vacuum': {'label': '  •  Vacuum manure collection', 'label_address': '$B$59', 'value_address': '$D$59', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_liquid_flush': {'label': '  •  Liquid/flush manure collection', 'label_address': '$B$60', 'value_address': '$D$60', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_pasture': {'label': '  •  Pasture', 'label_address': '$B$61', 'value_address': '$D$61', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_dry_lot_corral': {'label': '  •  Dry lot/corral', 'label_address': '$B$62', 'value_address': '$D$62', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_solid_storage': {'label': '  •  Solid storage', 'label_address': '$B$63', 'value_address': '$D$63', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_solar_drying': {'label': '  •  Solar drying', 'label_address': '$B$64', 'value_address': '$D$64', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_composting': {'label': '  •  Composting (aerated, in vessel, windrows)', 'label_address': '$B$65', 'value_address': '$D$65', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_compost_bedded': {'label': '  •  Compost bedded pack barn', 'label_address': '$B$66', 'value_address': '$D$66', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_slatted_floor': {'label': '  •  Slatted floor pit storage', 'label_address': '$B$67', 'value_address': '$D$67', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_anaerobic_lagoon': {'label': '  •  Anaerobic Lagoon', 'label_address': '$B$68', 'value_address': '$D$68', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_anaerobic_digester': {'label': '  •  Anaerobic digester', 'label_address': '$B$69', 'value_address': '$D$69', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_vermifiltration': {'label': '  •  Vermifiltration', 'label_address': '$B$70', 'value_address': '$D$70', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_liquid_slurry': {'label': '  •  Liquid/slurry', 'label_address': '$B$71', 'value_address': '$D$71', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_mechanical_separator': {'label': '  •  Mechanical separator (screens, centrifuge, press)', 'label_address': '$B$72', 'value_address': '$D$72', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_gravity_separator': {'label': '  •  Gravity-based separator (settling basin, sand lane)', 'label_address': '$B$73', 'value_address': '$D$73', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_weeping_wall': {'label': '  •  Weeping wall', 'label_address': '$B$74', 'value_address': '$D$74', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_flocculation': {'label': '  •  Flocculation', 'label_address': '$B$75', 'value_address': '$D$75', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_daily_spread': {'label': '  •  Daily spread', 'label_address': '$B$76', 'value_address': '$D$76', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_land_application_flood': {'label': '  •  Land application (flood)', 'label_address': '$B$77', 'value_address': '$D$77', 'value_type': <class 'str'>, 'is_drop_down': False}, 'manure_land_application_drip': {'label': '  •  Land application (subsurface drip)', 'label_address': '$B$78', 'value_address': '$D$78', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_biogas_conditioning': {'label': '  •  Biogas conditioning (e.g., hydrogen sulfide, moisture,\n     particulate removal)', 'label_address': '$B$80', 'value_address': '$D$80', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_biogas_moving': {'label': '  •  Biogas moving and handling equipement (e.g., blower,\n     compressor, low pressure gas pipelines)', 'label_address': '$B$81', 'value_address': '$D$81', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_biomethane_upgrading': {'label': '  •  Biomethane upgrading (e.g., membrane or other form of CO2\n     removal)', 'label_address': '$B$82', 'value_address': '$D$82', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_covered_lagoon': {'label': '  •  Covered lagoon anaerobic digester', 'label_address': '$B$83', 'value_address': '$D$83', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_in_vessel': {'label': '  •  In-vessel anaerobic digester', 'label_address': '$B$84', 'value_address': '$D$84', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_electricity': {'label': '  •  Electricity generation or other combustion equipment', 'label_address': '$B$85', 'value_address': '$D$85', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_heating': {'label': '  •  Heating/process fuel equipment', 'label_address': '$B$86', 'value_address': '$D$86', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_fuel_cells': {'label': '  •  Fuel cells', 'label_address': '$B$87', 'value_address': '$D$87', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_common_carrier': {'label': '  •  Common carrier gas pipeline (Interconnection point of\n     receipt)', 'label_address': '$B$88', 'value_address': '$D$88', 'value_type': <class 'str'>, 'is_drop_down': False}, 'bio_onsite_fuel': {'label': '  •  Onsite fuel use or dispensing', 'label_address': '$B$89', 'value_address': '$D$89', 'value_type': <class 'str'>, 'is_drop_down': False}, 'anaerobic_digestion_portion': {'label': 'Q21.  What portion of manure is managed by anaerobic digestion?', 'label_address': '$B$90', 'value_address': '$D$90', 'value_type': <class 'str'>, 'is_drop_down': False}, 'transport_method': {'label': 'Q22. If manure or biogas from this facility is transported to an offsite digester, treatment, or upgrading facility, please describe the transport method (truck, pipeline, etc).', 'label_address': '$B$91', 'value_address': '$D$91', 'value_type': <class 'str'>, 'is_drop_down': False}, 'transport_recipient': {'label': 'Q23. If manure or biogas from this facility is transported to an offsite digester, treatment, or upgrading facility, please provide the name or location of the recipient facility.', 'label_address': '$B$92', 'value_address': '$D$92', 'value_type': <class 'str'>, 'is_drop_down': False}, 'additional_manure_management': {'label': 'Q24.  Please provide any additional information about manure and methane management at this facility, if applicable.', 'label_address': '$B$93', 'value_address': '$D$93', 'value_type': <class 'str'>, 'is_drop_down': False}, 'additional_notes': {'label': 'Q25.  Please provide any additional notes, comments, or feedback on this form or the plume notification process, if applicable.', 'label_address': '$B$97', 'value_address': '$D$97', 'value_type': <class 'str'>, 'is_drop_down': False}}, 'metadata': {'schema_version': 'dairy_digester_v01_00', 'File created at': '2025-07-04T15:55:23.808818+00:00', 'Serialized with': 'utils.json.json_save_with_meta', 'Deserialize with': 'utils.json.json_load_with_meta'}}, 'generic_v01_00': {'schema': {'id_incidence': {'label': '1.  Incidence/Emission ID', 'label_address': '$B$23', 'value_address': '$D$23', 'value_type': <class 'int'>, 'is_drop_down': False}, 'id_plume': {'label': '2.  Plume ID(s)', 'label_address': '$B$24', 'value_address': '$D$24', 'value_type': <class 'int'>, 'is_drop_down': False}, 'observation_timestamp': {'label': '3.  Plume Observation Date', 'label_address': '$B$25', 'value_address': '$D$25', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'lat_carb': {'label': '4.  Plume Origin CARB Estimated Latitude', 'label_address': '$B$26', 'value_address': '$D$26', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_carb': {'label': '5.  Plume Origin CARB Estimated Longitude', 'label_address': '$B$27', 'value_address': '$D$27', 'value_type': <class 'float'>, 'is_drop_down': False}, 'id_message': {'label': '6.  CARB Message ID', 'label_address': '$B$28', 'value_address': '$D$28', 'value_type': <class 'str'>, 'is_drop_down': False}, 'facility_name': {'label': 'Q1.  Facility Name', 'label_address': '$B$32', 'value_address': '$D$32', 'value_type': <class 'str'>, 'is_drop_down': False}, 'id_arb': {'label': 'Q2.  Facility ID (if applicable)', 'label_address': '$B$33', 'value_address': '$D$33', 'value_type': <class 'str'>, 'is_drop_down': False}, 'id_arb_swis': {'label': 'Q2.  Facility ID (if applicable)', 'label_address': '$B$33', 'value_address': '$D$33', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_name': {'label': 'Q3.  Contact Name', 'label_address': '$B$34', 'value_address': '$D$34', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_phone': {'label': 'Q4.  Contact Phone', 'label_address': '$B$35', 'value_address': '$D$35', 'value_type': <class 'str'>, 'is_drop_down': False}, 'contact_email': {'label': 'Q5.  Contact Email', 'label_address': '$B$36', 'value_address': '$D$36', 'value_type': <class 'str'>, 'is_drop_down': False}, 'emission_identified_flag_fk': {'label': 'Q6.  Was a leak identified through prior knowledge or by follow-up monitoring after receipt of a CARB plume notice?', 'label_address': '$B$40', 'value_address': '$D$40', 'value_type': <class 'str'>, 'is_drop_down': True}, 'inspection_timestamp': {'label': "Q7.  If applicable, what was the date of owner/operator's ground monitoring of the area in question.", 'label_address': '$B$41', 'value_address': '$D$41', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 'instrument': {'label': 'Q8.  If applicable, what was the instrument used to locate the leak (e.g., Fisher Scientific TVA2020; RKI Multigas Analyzer Eagle 2; TDL).', 'label_address': '$B$42', 'value_address': '$D$42', 'value_type': <class 'str'>, 'is_drop_down': False}, 'additional_inspection_notes': {'label': 'Q9.  If applicable, provide any additional notes on the inspection or analysis of the area in question.', 'label_address': '$B$43', 'value_address': '$D$43', 'value_type': <class 'str'>, 'is_drop_down': False}, 'additional_activities': {'label': 'Q10.  If applicable, please describe any events or activities that may have contributed to the plume observed on the date provided in Section 2.', 'label_address': '$B$44', 'value_address': '$D$44', 'value_type': <class 'str'>, 'is_drop_down': False}, 'initial_leak_concentration': {'label': 'Q11:  Maximum concentration of methane leak (in ppmv).', 'label_address': '$B$48', 'value_address': '$D$48', 'value_type': <class 'float'>, 'is_drop_down': False}, 'lat_revised': {'label': "Q12.  Please provide a revised latitude if the leak location differs from CARB's estimate in Section 2.", 'label_address': '$B$49', 'value_address': '$D$49', 'value_type': <class 'float'>, 'is_drop_down': False}, 'long_revised': {'label': "Q13.  Please provide a revised longitude if the leak location differs from CARB's estimate in Section 2.", 'label_address': '$B$50', 'value_address': '$D$50', 'value_type': <class 'float'>, 'is_drop_down': False}, 'leak_description': {'label': 'Q14:  Please select from the drop-down menu which option best matches the description of the leak.', 'label_address': '$B$51', 'value_address': '$D$51', 'value_type': <class 'str'>, 'is_drop_down': True}, 'leak_cause': {'label': 'Q15.  Please provide any additional information about the leak here or any events or activities that may have contributed observed plume.', 'label_address': '$B$52', 'value_address': '$D$52', 'value_type': <class 'str'>, 'is_drop_down': False}, 'mitigation_actions': {'label': 'Q16.  Describe any corrective actions taken.', 'label_address': '$B$56', 'value_address': '$D$56', 'value_type': <class 'str'>, 'is_drop_down': False}, 'mitigation_timestamp': {'label': 'Q17.  Repair date.', 'label_address': '$B$57', 'value_address': '$D$57', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 're_monitored_timestamp': {'label': 'Q18.  Re-monitored date.', 'label_address': '$B$58', 'value_address': '$D$58', 'value_type': <class 'datetime.datetime'>, 'is_drop_down': False}, 're_monitored_concentration': {'label': 'Q19.  Re-monitored methane concentration after repair (ppmv).', 'label_address': '$B$59', 'value_address': '$D$59', 'value_type': <class 'float'>, 'is_drop_down': False}, 'additional_notes': {'label': 'Q20.  Additional notes or comments.', 'label_address': '$B$63', 'value_address': '$D$63', 'value_type': <class 'str'>, 'is_drop_down': False}}, 'metadata': {'schema_version': 'generic_v01_00', 'File created at': '2025-07-04T15:55:23.873162+00:00', 'Serialized with': 'utils.json.json_save_with_meta', 'Deserialize with': 'utils.json.json_load_with_meta'}}}
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.198 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 29    | db_ingest_util.py    | Loading File: "db_ingest_util.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\utils\db_ingest_util.py"
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.198 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.198 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 24    | route_util.py        | Loading File: "route_util.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\utils\route_util.py"
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.198 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 24    | sector_util.py       | Loading File: "sector_util.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\utils\sector_util.py"
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.198 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 49    | wtf_landfill.py      | Loading File: "wtf_landfill.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\wtf_landfill.py"
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.198 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.198 | DEBUG    | app_logger       | user:anonymous | 44    | wtf_oil_and_gas.py   | Loading File: "wtf_oil_and_gas.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\wtf_oil_and_gas.py"
+2025-07-04 12:08:00.211 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.211 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.211 | DEBUG    | app_logger       | user:anonymous | 59    | routes.py            | Loading File: "routes.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\routes.py"
+2025-07-04 12:08:00.211 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.211 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.211 | DEBUG    | app_logger       | user:anonymous | 24    | db.py                | Loading File: "db.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\startup\db.py"
+2025-07-04 12:08:00.211 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.211 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.211 | DEBUG    | app_logger       | user:anonymous | 31    | flask.py             | Loading File: "flask.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\startup\flask.py"
+2025-07-04 12:08:00.274 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.274 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.274 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.274 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.274 | DEBUG    | app_logger       | user:anonymous | 40    | app.py               | Loading File: "app.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\portal\app.py"
+2025-07-04 12:08:00.274 | DEBUG    | app_logger       | user:anonymous | 126   | __get_logger.py      | get_logger() called with file_stem = 'app_logger', file_path =WindowsPath('C:/tony_local/pycharm/feedback_portal/source/production/arb/logs'), log_to_console =False, force_command_line =False, sys.argv = ['C:\\Users\\theld\\AppData\\Local\\miniconda3\\envs\\mini_conda_01\\Scripts\\flask', '--app', 'wsgi', 'run', '--debug', '--no-reload']
+2025-07-04 12:08:00.274 | DEBUG    | root             | user:anonymous | 128   | __get_logger.py      | Logging has already been initialized; configuration will not be changed.
+2025-07-04 12:08:00.274 | DEBUG    | app_logger       | user:anonymous | 114   | wsgi.py              | Loading File: "wsgi.py". Full Path: "C:\tony_local\pycharm\feedback_portal\source\production\arb\wsgi.py"
+2025-07-04 12:08:00.274 | DEBUG    | app_logger       | user:anonymous | 53    | flask.py             | configure_flask_app() called
+2025-07-04 12:08:00.274 | DEBUG    | app_logger       | user:anonymous | 92    | flask.py             | Flask Jinja2 globals and logging initialized.
+2025-07-04 12:08:00.449 | INFO     | app_logger       | user:anonymous | 57    | db.py                | Initializing database models.
+2025-07-04 12:08:00.449 | INFO     | app_logger       | user:anonymous | 82    | db.py                | Creating all missing tables.
+2025-07-04 12:08:06.373 | DEBUG    | app_logger       | user:anonymous | 84    | db.py                | Database schema created.
+2025-07-04 12:08:06.374 | INFO     | app_logger       | user:anonymous | 101   | db.py                | Database initialized and tables ensured.
+2025-07-04 12:08:06.374 | INFO     | app_logger       | user:anonymous | 40    | db.py                | Reflecting database metadata.
+2025-07-04 12:08:07.388 | DEBUG    | app_logger       | user:anonymous | 42    | db.py                | Reflection complete.
+2025-07-04 12:08:08.352 | DEBUG    | app_logger       | user:anonymous | 159   | sql_alchemy.py       | calling get_sa_automap_types()
+2025-07-04 12:08:08.691 | WARNING  | app_logger       | user:anonymous | 198   | sql_alchemy.py       | geometry is of type: Geometry that is not implemented in python.  Setting python type to None.
+2025-07-04 12:08:08.691 | WARNING  | app_logger       | user:anonymous | 199   | sql_alchemy.py       | 
+2025-07-04 12:08:09.336 | WARNING  | app_logger       | user:anonymous | 198   | sql_alchemy.py       | geom is of type: Geometry that is not implemented in python.  Setting python type to None.
+2025-07-04 12:08:09.336 | WARNING  | app_logger       | user:anonymous | 199   | sql_alchemy.py       | 
+2025-07-04 12:08:09.949 | WARNING  | app_logger       | user:anonymous | 198   | sql_alchemy.py       | coordinates is of type: Geometry that is not implemented in python.  Setting python type to None.
+2025-07-04 12:08:09.949 | WARNING  | app_logger       | user:anonymous | 199   | sql_alchemy.py       | 
+2025-07-04 12:08:10.075 | WARNING  | app_logger       | user:anonymous | 198   | sql_alchemy.py       | origin is of type: Geometry that is not implemented in python.  Setting python type to None.
+2025-07-04 12:08:10.075 | WARNING  | app_logger       | user:anonymous | 199   | sql_alchemy.py       | 
+2025-07-04 12:08:10.075 | WARNING  | app_logger       | user:anonymous | 198   | sql_alchemy.py       | extent is of type: Geometry that is not implemented in python.  Setting python type to None.
+2025-07-04 12:08:10.075 | WARNING  | app_logger       | user:anonymous | 199   | sql_alchemy.py       | 
+2025-07-04 12:08:10.075 | WARNING  | app_logger       | user:anonymous | 198   | sql_alchemy.py       | footprint is of type: Geometry that is not implemented in python.  Setting python type to None.
+2025-07-04 12:08:10.075 | WARNING  | app_logger       | user:anonymous | 199   | sql_alchemy.py       | 
+2025-07-04 12:08:11.552 | DEBUG    | app_logger       | user:anonymous | 206   | sql_alchemy.py       | returning from get_sa_automap_types()
+2025-07-04 12:08:11.552 | DEBUG    | app_logger       | user:anonymous | 96    | globals.py           | Database type mapping: Globals.db_column_types={'plume_qa_flag': {'id_flag': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'scenes': {'id': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'scene_id': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'public': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'published_plume_count': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(timezone=True), 'sqlalchemy_type': 'TIMESTAMP'}, 'created_scene': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(timezone=True), 'sqlalchemy_type': 'TIMESTAMP'}, 'instrument': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'mission_phase': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'not_cloudy': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'cloud_cover_pct': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'azimuth': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'gsd_scene': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'light_haze_pct': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'off_nadir': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'pixel_resolution': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'sensitivity_mode': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'solar_zenith_angle': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'sun_azimuth': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'sun_elevation': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'plume_count': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'valid_plume_count': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'assessment_status': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'note': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'atmospheric_artifacts': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'geolocation_error': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'image_artifacts': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'low_snr': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'gsd': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'cm:gas': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'created_l2b': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'proj:epsg': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'cm:cmf_type': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'processing:level': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'processing:lineage': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'view:sun_elevation': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'processing:software': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'version': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'cm:elevation': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'cm:elevation_source': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'cm:water_vapor': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'cm:water_vapor_source': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'gsd_l2b': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'view:zenith': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'eo:cloud_cover': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'geometry': {'python_type': None, 'database_type': Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), 'sqlalchemy_type': 'Geometry'}, 'proj:shape': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'cm:active_wavelengths': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'cm:elevation_units': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'cm:elevation_method': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'area_sqkm': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}}, 'inspection_flag': {'id_flag': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'operator_contacts': {'id_contact': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'name': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'email': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'phone': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'contact_notes': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'active': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}}, 'air_districts': {'dis': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=5), 'sqlalchemy_type': 'VARCHAR'}, 'disn': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=100), 'sqlalchemy_type': 'VARCHAR'}}, 'uploaded_files': {'id_': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'path': {'python_type': <class 'str'>, 'database_type': TEXT(), 'sqlalchemy_type': 'TEXT'}, 'description': {'python_type': <class 'str'>, 'database_type': TEXT(), 'sqlalchemy_type': 'TEXT'}, 'status': {'python_type': <class 'str'>, 'database_type': TEXT(), 'sqlalchemy_type': 'TEXT'}, 'created_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(timezone=True), 'sqlalchemy_type': 'TIMESTAMP'}, 'modified_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(timezone=True), 'sqlalchemy_type': 'TIMESTAMP'}}, 'coabdis_geo83': {'gid': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'objectid': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'co_name': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=20), 'sqlalchemy_type': 'VARCHAR'}, 'co_num': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'basin_name': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=40), 'sqlalchemy_type': 'VARCHAR'}, 'basa_id': {'python_type': <class 'decimal.Decimal'>, 'database_type': NUMERIC(), 'sqlalchemy_type': 'NUMERIC'}, 'dis_name': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=30), 'sqlalchemy_type': 'VARCHAR'}, 'dist_type': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=11), 'sqlalchemy_type': 'VARCHAR'}, 'disa_id': {'python_type': <class 'decimal.Decimal'>, 'database_type': NUMERIC(), 'sqlalchemy_type': 'NUMERIC'}, 'island_nam': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=35), 'sqlalchemy_type': 'VARCHAR'}, 'island_id': {'python_type': <class 'decimal.Decimal'>, 'database_type': NUMERIC(), 'sqlalchemy_type': 'NUMERIC'}, 'bay_splint': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=35), 'sqlalchemy_type': 'VARCHAR'}, 'bay_id': {'python_type': <class 'decimal.Decimal'>, 'database_type': NUMERIC(), 'sqlalchemy_type': 'NUMERIC'}, 'coabdis_id': {'python_type': <class 'decimal.Decimal'>, 'database_type': NUMERIC(), 'sqlalchemy_type': 'NUMERIC'}, 'coabdis_ar': {'python_type': <class 'decimal.Decimal'>, 'database_type': NUMERIC(), 'sqlalchemy_type': 'NUMERIC'}, 'shape_leng': {'python_type': <class 'decimal.Decimal'>, 'database_type': NUMERIC(), 'sqlalchemy_type': 'NUMERIC'}, 'shape_area': {'python_type': <class 'decimal.Decimal'>, 'database_type': NUMERIC(), 'sqlalchemy_type': 'NUMERIC'}, 'ab': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=3), 'sqlalchemy_type': 'VARCHAR'}, 'dis': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=3), 'sqlalchemy_type': 'VARCHAR'}, 'coabdis': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=10), 'sqlalchemy_type': 'VARCHAR'}, 'geom': {'python_type': None, 'database_type': Geometry(geometry_type='MULTIPOLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), 'sqlalchemy_type': 'Geometry'}}, 'air_district_contacts': {'id': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'dis': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=5), 'sqlalchemy_type': 'VARCHAR'}, 'name': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=100), 'sqlalchemy_type': 'VARCHAR'}, 'email': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=255), 'sqlalchemy_type': 'VARCHAR'}, 'created_at': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'updated_at': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}}, 'mitigation_type': {'id_type': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'spatial_ref_sys': {'srid': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'auth_name': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=256), 'sqlalchemy_type': 'VARCHAR'}, 'auth_srid': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'srtext': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=2048), 'sqlalchemy_type': 'VARCHAR'}, 'proj4text': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=2048), 'sqlalchemy_type': 'VARCHAR'}}, 'portal_updates': {'id': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(timezone=True), 'sqlalchemy_type': 'TIMESTAMP'}, 'key': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=255), 'sqlalchemy_type': 'VARCHAR'}, 'old_value': {'python_type': <class 'str'>, 'database_type': TEXT(), 'sqlalchemy_type': 'TEXT'}, 'new_value': {'python_type': <class 'str'>, 'database_type': TEXT(), 'sqlalchemy_type': 'TEXT'}, 'user': {'python_type': <class 'str'>, 'database_type': VARCHAR(length=255), 'sqlalchemy_type': 'VARCHAR'}, 'comments': {'python_type': <class 'str'>, 'database_type': TEXT(), 'sqlalchemy_type': 'TEXT'}, 'id_incidence': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}}, 'sources': {'id_source': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'location': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'facility_id_type': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'facility_id': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'infrastructure_links': {'python_type': <class 'dict'>, 'database_type': JSONB(astext_type=Text()), 'sqlalchemy_type': 'JSONB'}, 'coordinates': {'python_type': None, 'database_type': Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), 'sqlalchemy_type': 'Geometry'}, 'created_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'created_by': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'sector': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'sector_ipcc': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'notes': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'id_contact_group': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'facility_name': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'plumes': {'id_plume': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'plume_name': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'plume_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'scene_id': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'id_source': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'id_incidence': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'instrument': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'origin': {'python_type': None, 'database_type': Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), 'sqlalchemy_type': 'Geometry'}, 'extent': {'python_type': None, 'database_type': Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), 'sqlalchemy_type': 'Geometry'}, 'footprint': {'python_type': None, 'database_type': Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), 'sqlalchemy_type': 'Geometry'}, 'emission_rate': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'emission_rate_uncertainty': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'provider_sector': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'provider_status': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'provider_qa': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'provider_qa_comment': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'wind_speed': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'wind_direction': {'python_type': <class 'float'>, 'database_type': DOUBLE_PRECISION(precision=53), 'sqlalchemy_type': 'DOUBLE_PRECISION'}, 'info_json': {'python_type': <class 'dict'>, 'database_type': JSONB(astext_type=Text()), 'sqlalchemy_type': 'JSONB'}, 'qa_comment': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'filepath': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'import_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'plume_qa_flag_fk': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'display': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'auto_facility': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'auto_facility_type': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'hide_emission': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'hpep_flag': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'ok_to_send': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}}, 'contact_groups': {'id_contact_group': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'contact_group_name': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'id_operator': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'notes': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'incidence_qa_flag': {'id_flag': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'emission_type': {'id_type': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'messages': {'id_message': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'content': {'python_type': <class 'dict'>, 'database_type': JSON(astext_type=Text()), 'sqlalchemy_type': 'JSON'}}, 'emission_identified_flags': {'id_flag': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'incidences': {'id_incidence': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'incidence_status': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'incidence_status_explanation': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'notification_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'reply_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'inspection_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'identified_component': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'identified_component_notes': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'emission_type_notes': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'emission_location': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'emission_location_notes': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'emission_cause': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'emission_cause_notes': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'mitigated_flag': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'mitigation_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'operator_comment': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'internal_comment': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'end_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'created_timestamp': {'python_type': <class 'datetime.datetime'>, 'database_type': TIMESTAMP(), 'sqlalchemy_type': 'TIMESTAMP'}, 'created_by': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'misc_json': {'python_type': <class 'dict'>, 'database_type': JSON(astext_type=Text()), 'sqlalchemy_type': 'JSON'}, 'source_id': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'incidence_qa_flag_fk': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'inspection_flag_fk': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'emission_identified_flag_fk': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'emission_type_fk': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'mitigation_type_fk': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'is_open': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}}, 'operators': {'id_operator': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'operator_name': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'sector': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}, 'operator_notes': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'mitigation_types': {'id_type': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'contact_group_mapping': {'id_contact_group': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'id_contact': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'comment': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'emission_identified_flag': {'id_flag': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'emission_types': {'id_type': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'description': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}, 'email_types': {'id_type': {'python_type': <class 'int'>, 'database_type': INTEGER(), 'sqlalchemy_type': 'INTEGER'}, 'email_type': {'python_type': <class 'str'>, 'database_type': VARCHAR(), 'sqlalchemy_type': 'VARCHAR'}}}
+2025-07-04 12:08:11.552 | DEBUG    | app_logger       | user:anonymous | 65    | globals.py           | In load_drop_downs()
+2025-07-04 12:08:11.552 | DEBUG    | app_logger       | user:anonymous | 69    | globals.py           | Globals.drop_downs={'venting_exclusion': [('Please Select', 'Please Select', {'disabled': True}), ('Yes', 'Yes'), ('No', 'No')], 'ogi_performed': [('Please Select', 'Please Select', {'disabled': True}), ('Yes', 'Yes'), ('No', 'No')], 'ogi_result': [('Please Select', 'Please Select', {'disabled': True}), ('Not applicable as OGI was not performed', 'Not applicable as OGI was not performed'), ('No source found', 'No source found'), ('Unintentional-leak', 'Unintentional-leak'), ('Unintentional-non-component', 'Unintentional-non-component'), ('Venting-construction/maintenance', 'Venting-construction/maintenance'), ('Venting-routine', 'Venting-routine')], 'method21_performed': [('Please Select', 'Please Select', {'disabled': True}), ('Yes', 'Yes'), ('No', 'No')], 'method21_result': [('Please Select', 'Please Select', {'disabled': True}), ('Not applicable as Method 21 was not performed', 'Not applicable as Method 21 was not performed'), ('No source found', 'No source found'), ('Unintentional-below leak threshold', 'Unintentional-below leak threshold'), ('Unintentional-leak', 'Unintentional-leak'), ('Unintentional-non-component', 'Unintentional-non-component'), ('Venting-construction/maintenance', 'Venting-construction/maintenance'), ('Venting-routine', 'Venting-routine')], 'equipment_at_source': [('Please Select', 'Please Select', {'disabled': True}), ('Centrifugal Natural Gas Compressor', 'Centrifugal Natural Gas Compressor'), ('Continuous High Bleed Natural Gas-actuated Pneumatic Device', 'Continuous High Bleed Natural Gas-actuated Pneumatic Device'), ('Continuous Low Bleed Natural Gas-actuated Pneumatic Device', 'Continuous Low Bleed Natural Gas-actuated Pneumatic Device'), ('Intermittent Bleed Natural Gas-actuated Pneumatic Device', 'Intermittent Bleed Natural Gas-actuated Pneumatic Device'), ('Natural Gas-actuated Pneumatic Pump', 'Natural Gas-actuated Pneumatic Pump'), ('Pressure Separator', 'Pressure Separator'), ('Reciprocating Natural Gas Compressor', 'Reciprocating Natural Gas Compressor'), ('Separator', 'Separator'), ('Tank', 'Tank'), ('Open Well Casing Vent', 'Open Well Casing Vent'), ('Piping', 'Piping'), ('Well', 'Well'), ('Other', 'Other')], 'component_at_source': [('Please Select', 'Please Select', {'disabled': True}), ('Valve', 'Valve'), ('Connector', 'Connector'), ('Flange', 'Flange'), ('Fitting - pressure meter/gauge', 'Fitting - pressure meter/gauge'), ('Fitting - not pressure meter/gauge', 'Fitting - not pressure meter/gauge'), ('Open-ended line', 'Open-ended line'), ('Plug', 'Plug'), ('Pressure relief device', 'Pressure relief device'), ('Stuffing box', 'Stuffing box'), ('Other', 'Other')], 'emission_identified_flag_fk': [('Please Select', 'Please Select', {'disabled': True}), ('Operator was aware of the leak prior to receiving the CARB plume notification', 'Operator was aware of the leak prior to receiving the CARB plume notification'), ('Operator detected a leak during follow-up monitoring after receipt of the CARB plume notification', 'Operator detected a leak during follow-up monitoring after receipt of the CARB plume notification'), ('No leak was detected', 'No leak was detected')], 'emission_type_fk': [('Please Select', 'Please Select', {'disabled': True}), ('Not applicable as no leak was detected', 'Not applicable as no leak was detected'), ('Operator was aware of the leak prior to receiving the notification, and/or repairs were in progress on the date of the plume observation', 'Operator was aware of the leak prior to receiving the notification, and/or repairs were in progress on the date of the plume observation'), ('An unintentional leak  (i.e., the operator was not aware of, and could be repaired if discovered)', 'An unintentional leak  (i.e., the operator was not aware of, and could be repaired if discovered)'), ('An intentional or allowable vent (i.e., the operator was aware of, and/or would not repair)', 'An intentional or allowable vent (i.e., the operator was aware of, and/or would not repair)'), ('Due to a temporary activity (i.e., would be resolved without corrective action when the activity is complete)', 'Due to a temporary activity (i.e., would be resolved without corrective action when the activity is complete)')], 'emission_location': [('Please Select', 'Please Select', {'disabled': True}), ('Not applicable as no leak was detected', 'Not applicable as no leak was detected'), ('Gas Collection System Component (e.g., blower, well, valve, port)', 'Gas Collection System Component (e.g., blower, well, valve, port)'), ('Gas Control Device/Control System Component', 'Gas Control Device/Control System Component'), ('Landfill Surface: Daily Cover', 'Landfill Surface: Daily Cover'), ('Landfill Surface: Final Cover', 'Landfill Surface: Final Cover'), ('Landfill Surface: Intermediate Cover', 'Landfill Surface: Intermediate Cover'), ('Leachate Management System', 'Leachate Management System'), ('Working Face (area where active filling was being conducted at the time of detection)', 'Working Face (area where active filling was being conducted at the time of detection)')], 'emission_cause': [('Please Select', 'Please Select', {'disabled': True}), ('Not applicable as no leak was detected', 'Not applicable as no leak was detected'), ('Collection system downtime', 'Collection system downtime'), ('Construction - New Well Installation', 'Construction - New Well Installation'), ('Construction - Well Raising or Horizontal Extension', 'Construction - Well Raising or Horizontal Extension'), ('Cover integrity', 'Cover integrity'), ('Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)'), ('Cracked/Broken Seal', 'Cracked/Broken Seal'), ('Damaged component', 'Damaged component'), ('Insufficient vacuum', 'Insufficient vacuum'), ('Offline Gas Collection Well(s)', 'Offline Gas Collection Well(s)'), ('Other', 'Other'), ('Uncontrolled Area (no gas collection infrastructure)', 'Uncontrolled Area (no gas collection infrastructure)')], 'emission_cause_secondary': [('Please Select', 'Please Select', {'disabled': True}), ('Not applicable as no leak was detected', 'Not applicable as no leak was detected'), ('Not applicable as no additional leak cause suspected', 'Not applicable as no additional leak cause suspected'), ('Collection system downtime', 'Collection system downtime'), ('Construction - New Well Installation', 'Construction - New Well Installation'), ('Construction - Well Raising or Horizontal Extension', 'Construction - Well Raising or Horizontal Extension'), ('Cover integrity', 'Cover integrity'), ('Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)'), ('Cracked/Broken Seal', 'Cracked/Broken Seal'), ('Damaged component', 'Damaged component'), ('Insufficient vacuum', 'Insufficient vacuum'), ('Offline Gas Collection Well(s)', 'Offline Gas Collection Well(s)'), ('Other', 'Other'), ('Uncontrolled Area (no gas collection infrastructure)', 'Uncontrolled Area (no gas collection infrastructure)')], 'emission_cause_tertiary': [('Please Select', 'Please Select', {'disabled': True}), ('Not applicable as no leak was detected', 'Not applicable as no leak was detected'), ('Not applicable as no additional leak cause suspected', 'Not applicable as no additional leak cause suspected'), ('Collection system downtime', 'Collection system downtime'), ('Construction - New Well Installation', 'Construction - New Well Installation'), ('Construction - Well Raising or Horizontal Extension', 'Construction - Well Raising or Horizontal Extension'), ('Cover integrity', 'Cover integrity'), ('Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)'), ('Cracked/Broken Seal', 'Cracked/Broken Seal'), ('Damaged component', 'Damaged component'), ('Insufficient vacuum', 'Insufficient vacuum'), ('Offline Gas Collection Well(s)', 'Offline Gas Collection Well(s)'), ('Other', 'Other'), ('Uncontrolled Area (no gas collection infrastructure)', 'Uncontrolled Area (no gas collection infrastructure)')], 'included_in_last_lmr': [('Please Select', 'Please Select', {'disabled': True}), ('Yes', 'Yes'), ('No', 'No')], 'planned_for_next_lmr': [('Please Select', 'Please Select', {'disabled': True}), ('Yes', 'Yes'), ('No', 'No')]}
+2025-07-04 12:08:11.552 | DEBUG    | app_logger       | user:anonymous | 70    | globals.py           | Globals.drop_downs_contingent={'emission_cause_contingent_on_emission_location': {'Gas Collection System Component (e.g., blower, well, valve, port)': ['Construction - New Well Installation', 'Construction - Well Raising or Horizontal Extension', 'Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Damaged component', 'Insufficient vacuum', 'Offline Gas Collection Well(s)', 'Other'], 'Gas Control Device/Control System Component': ['Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Damaged component', 'Other'], 'Landfill Surface: Daily Cover': ['Collection system downtime', 'Construction - New Well Installation', 'Construction - Well Raising or Horizontal Extension', 'Cover integrity', 'Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Cracked/Broken Seal', 'Damaged component', 'Insufficient vacuum', 'Offline Gas Collection Well(s)', 'Other', 'Uncontrolled Area (no gas collection infrastructure)'], 'Landfill Surface: Intermediate Cover': ['Collection system downtime', 'Construction - New Well Installation', 'Cover integrity', 'Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Cracked/Broken Seal', 'Damaged component', 'Insufficient vacuum', 'Offline Gas Collection Well(s)', 'Other', 'Uncontrolled Area (no gas collection infrastructure)'], 'Landfill Surface: Final Cover': ['Collection system downtime', 'Construction - New Well Installation', 'Construction - Well Raising or Horizontal Extension', 'Cover integrity', 'Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Cracked/Broken Seal', 'Damaged component', 'Insufficient vacuum', 'Offline Gas Collection Well(s)', 'Other', 'Uncontrolled Area (no gas collection infrastructure)'], 'Leachate Management System': ['Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Damaged component', 'Offline Gas Collection Well(s)', 'Other'], 'Working Face (area where active filling was being conducted at the time of detection)': ['Construction - New Well Installation', 'Construction - Well Raising or Horizontal Extension', 'Cover-related Construction (Excavation/ Exposed Operations/ Re-grading)', 'Offline Gas Collection Well(s)', 'Other', 'Uncontrolled Area (no gas collection infrastructure)']}}
+2025-07-04 12:08:11.835 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:5000
+2025-07-04 12:08:11.835 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | Press CTRL+C to quit
+2025-07-04 12:08:16.176 | INFO     | app_logger       | user:anonymous | 978   | routes.py            | Displaying the last 1000 lines of the log file as a diagnostic
+2025-07-04 12:08:16.398 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:16] "GET /show_log_file?lines=1000 HTTP/1.1" 200 -
+2025-07-04 12:08:16.438 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:16] "GET /static/images/carb_logo_01.jpg HTTP/1.1" 304 -
+2025-07-04 12:08:16.438 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:16] "GET /static/css/portal_styles_01.css HTTP/1.1" 304 -
+2025-07-04 12:08:16.446 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:16] "GET /static/js/delete_confirmation.js HTTP/1.1" 304 -
+2025-07-04 12:08:22.755 | INFO     | app_logger       | user:anonymous | 332   | sql_alchemy.py       | type(table)=<class 'sqlalchemy.orm.decl_api.DeclarativeMeta'>
+2025-07-04 12:08:22.969 | DEBUG    | app_logger       | user:anonymous | 340   | sql_alchemy.py       | Query result: type(rows)=<class 'list'>
+2025-07-04 12:08:23.043 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:23] "GET / HTTP/1.1" 200 -
+2025-07-04 12:08:23.086 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:23] "GET /static/js/delete_confirmation.js HTTP/1.1" 304 -
+2025-07-04 12:08:23.088 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:23] "GET /static/css/portal_styles_01.css HTTP/1.1" 304 -
+2025-07-04 12:08:23.094 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:23] "GET /static/images/carb_logo_01.jpg HTTP/1.1" 304 -
+2025-07-04 12:08:23.106 | INFO     | werkzeug         | user:anonymous | 97    | _internal.py         | 127.0.0.1 - - [04/Jul/2025 12:08:23] "GET /static/images/clipboard_01.jpeg HTTP/1.1" 304 -
