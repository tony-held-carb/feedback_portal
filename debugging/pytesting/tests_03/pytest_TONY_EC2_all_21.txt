============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- /home/theld/miniconda3/envs/mini_conda_02/bin/python
cachedir: .pytest_cache
rootdir: /home/theld/code/git_repos/feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, base-url-2.1.0, asyncio-1.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 596 items

tests/arb/auth/test_email_util.py::test_send_welcome_email_function_signature PASSED
tests/arb/auth/test_email_util.py::test_send_password_reset_email_function_signature PASSED
tests/arb/auth/test_email_util.py::test_send_email_confirmation_function_signature PASSED
tests/arb/auth/test_email_util.py::test_send_welcome_email_with_valid_user SKIPPED
tests/arb/auth/test_email_util.py::test_send_password_reset_email_with_valid_user SKIPPED
tests/arb/auth/test_email_util.py::test_send_email_confirmation_with_valid_user SKIPPED
tests/arb/auth/test_forms.py::test_registration_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_login_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_password_reset_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_forgot_username_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_change_password_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_registration_form_validation SKIPPED
tests/arb/auth/test_forms.py::test_login_form_validation SKIPPED (Re...)
tests/arb/auth/test_forms.py::test_password_reset_form_validation SKIPPED
tests/arb/auth/test_forms.py::test_change_password_form_validation SKIPPED
tests/arb/auth/test_models.py::test_get_user_model_function_signature PASSED
tests/arb/auth/test_models.py::test_get_user_model_returns_model SKIPPED
tests/arb/auth/test_models.py::test_user_model_creation SKIPPED (Req...)
tests/arb/auth/test_models.py::test_user_model_validation SKIPPED (R...)
tests/arb/auth/test_routes.py::test_auth_bp_exists PASSED
tests/arb/auth/test_routes.py::test_login_route SKIPPED (Requires co...)
tests/arb/auth/test_routes.py::test_register_route SKIPPED (Requires...)
tests/arb/auth/test_routes.py::test_logout_route SKIPPED (Requires c...)
tests/arb/auth/test_routes.py::test_password_reset_route SKIPPED (Re...)
tests/arb/portal/config/test_accessors.py::test_get_processed_versions_dir PASSED
tests/arb/portal/config/test_accessors.py::test_get_upload_folder PASSED
tests/arb/portal/config/test_accessors.py::test_get_payload_save_dir PASSED
tests/arb/portal/config/test_accessors.py::test_get_app_mode_default PASSED
tests/arb/portal/config/test_accessors.py::test_get_app_mode_custom PASSED
tests/arb/portal/config/test_accessors.py::test_get_database_uri PASSED
tests/arb/portal/config/test_accessors.py::test_missing_config_keys PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_production_via_config_type PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_production_via_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_testing_via_config_type PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_testing_via_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_default PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_empty_strings PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_invalid_values PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_case_insensitive PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_priority_config_type_over_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_mixed_case_environment PASSED
tests/arb/portal/config/test_settings.py::test_base_config_defaults PASSED
tests/arb/portal/config/test_settings.py::test_development_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_production_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_testing_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_env_override_sqlalchemy_database_uri PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_true PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_false PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_not_set PASSED
tests/arb/portal/config/test_settings.py::test_secret_key_from_environment PASSED
tests/arb/portal/config/test_settings.py::test_secret_key_default_when_not_set PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_venting_exclusion_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_ogi_performed_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_method21_performed_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_equipment_other_description_conditional PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_component_other_description_conditional PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_ogi_result_requires_method21 PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_timestamp_validation_logic PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_emission_identified_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_lmr_included_conditional_description PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_lmr_planned_conditional_description PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_contingent_dropdown_population PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_cross_field_validation_no_leak_detected PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_cross_field_validation_operator_aware PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_timestamp_validation_logic PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_emission_cause_repeat_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestUploadFormCrossFieldLogic::test_file_type_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestUploadFormCrossFieldLogic::test_file_required_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_regulatory_compliance_across_sectors PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_conditional_field_consistency PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_timestamp_validation_consistency PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_empty_string_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_none_value_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_invalid_choice_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_multiple_conditional_changes PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_conditional_logic_performance PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::test_all_cross_field_logic_scenarios PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_og_dummy_form_data_keys PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_landfill_dummy_form_data_keys PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_og_dummy_form_data_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_landfill_dummy_form_data_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_dummy_data_datetime_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_dummy_data_sector_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_module_level_dropdowns_are_dicts PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_returns_tuple_and_dicts PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_please_select_present PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_tuple_structure PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_deepcopy_immutability PASSED
tests/arb/portal/test_db_hardcoded.py::test_empty_dropdown_edge_case PASSED
tests/arb/portal/test_db_hardcoded.py::test_contingent_dropdown_structure PASSED
tests/arb/portal/test_db_hardcoded.py::test_all_expected_dropdown_keys_present PASSED
tests/arb/portal/test_db_hardcoded.py::test_dropdown_values_not_empty PASSED
tests/arb/portal/test_db_hardcoded.py::test_contingent_dropdown_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_dropdown_data_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_sector_constants_are_lists PASSED
tests/arb/portal/test_db_hardcoded.py::test_logger_is_configured PASSED
tests/arb/portal/test_db_hardcoded.py::test_sector_constants_content PASSED
tests/arb/portal/test_db_hardcoded.py::test_selector_list_to_tuples_matches_canonical SKIPPED
tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload [DIAG] test_files_path=feedback_forms/testing_versions/standard
[DIAG] os.getcwd()=/home/theld/code/git_repos/feedback_portal
[DIAG] test_files_path absolute=/home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard
[DIAG] test_files_path exists=True
[DIAG] Files in feedback_forms/testing_versions/standard:
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_03_blank.xlsx
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data_update.xlsx
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_landfill_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_energy_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_generic_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_landfill_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_energy_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_generic_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_field_level_value_assertions [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_database_state_verification [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_invalid_excel_file PASSED
tests/arb/portal/test_file_upload_suite.py::test_corrupted_excel_file PASSED
tests/arb/portal/test_file_upload_suite.py::test_missing_required_fields PASSED
tests/arb/portal/test_file_upload_suite.py::test_negative_validation_errors PASSED
tests/arb/portal/test_file_upload_suite.py::test_file_size_limits PASSED
tests/arb/portal/test_file_upload_suite.py::test_concurrent_upload_handling [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_malicious_file_handling PASSED
tests/arb/portal/test_file_upload_suite.py::test_data_integrity_through_processing_pipeline [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/theld/code/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_globals.py::test_globals_initial_state PASSED
tests/arb/portal/test_globals.py::test_load_drop_downs_sets_globals SKIPPED
tests/arb/portal/test_globals.py::test_load_type_mapping_sets_db_column_types SKIPPED
tests/arb/portal/test_globals.py::test_load_drop_downs_integration PASSED
tests/arb/portal/test_globals.py::test_load_type_mapping_integration PASSED
tests/arb/portal/test_globals.py::test_globals_integration_with_real_data PASSED
tests/arb/portal/test_globals.py::test_globals_persistence_across_calls PASSED
tests/arb/portal/test_integration_app.py::test_app_starts PASSED
tests/arb/portal/test_integration_app.py::test_homepage_route PASSED
tests/arb/portal/test_integration_app.py::test_404_route PASSED
tests/arb/portal/test_integration_app.py::test_db_session_creation PASSED
tests/arb/portal/test_integration_app.py::test_error_handling PASSED
tests/arb/portal/test_integration_app.py::test_list_uploads_route PASSED
tests/arb/portal/test_integration_app.py::test_diagnostics_route PASSED
tests/arb/portal/test_integration_app.py::test_portal_updates_route PASSED
tests/arb/portal/test_integration_app.py::test_search_route PASSED
tests/arb/portal/test_integration_app.py::test_show_log_file_route PASSED
tests/arb/portal/test_integration_app.py::test_og_incidence_create_route PASSED
tests/arb/portal/test_integration_app.py::test_landfill_incidence_create_route PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_basic PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_no_changes PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_filter_paths PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route PASSED
tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_landfill_incidence_create_route PASSED
tests/arb/portal/test_routes_integration.py::test_landfill_incidence_create_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_delete_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_delete_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_list_uploads_route PASSED
tests/arb/portal/test_routes_integration.py::test_list_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_get_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_no_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_empty_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_invalid_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_get_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_no_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_empty_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_invalid_file PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post_empty_search PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post_no_search_param PASSED
tests/arb/portal/test_routes_integration.py::test_diagnostics_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_dropdown_dict_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_database_structure_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_feedback_form_structure_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_log_file_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_filters PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_sorting PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route_with_filters PASSED
tests/arb/portal/test_routes_integration.py::test_review_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_review_staged_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_confirm_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_confirm_staged_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_apply_staged_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_apply_staged_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_serve_file_route PASSED
tests/arb/portal/test_routes_integration.py::test_serve_file_route_invalid_filename PASSED
tests/arb/portal/test_routes_integration.py::test_index_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_multiple_rows_error PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_exception_handling PASSED
tests/arb/portal/test_routes_integration.py::test_upload_staged_route_exception_handling PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_with_special_characters_in_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_staged_route_with_special_characters_in_message PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_pagination PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_sorting PASSED
tests/arb/portal/test_sqla_models.py::test_uploaded_file_repr PASSED
tests/arb/portal/test_sqla_models.py::test_portal_update_repr PASSED
tests/arb/portal/test_sqla_models.py::test_run_diagnostics_success PASSED
tests/arb/portal/test_sqla_models.py::test_run_diagnostics_db_error PASSED
tests/arb/portal/test_sqla_models.py::test_uploaded_file_integration PASSED
tests/arb/portal/test_sqla_models.py::test_portal_update_integration PASSED
tests/arb/portal/test_startup_db_integration.py::test_db_create_creates_tables PASSED
tests/arb/portal/test_startup_db_integration.py::test_db_initialize_and_create_runs PASSED
tests/arb/portal/test_startup_flask.py::test_configure_flask_app_can_be_called PASSED
tests/arb/portal/test_startup_flask.py::test_configure_flask_app_returns_none PASSED
tests/arb/portal/test_startup_flask.py::test_upload_configuration_applied PASSED
tests/arb/portal/test_startup_flask.py::test_upload_configuration_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_configuration_applied PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_undefined_behavior_set PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_globals_applied PASSED
tests/arb/portal/test_startup_flask.py::test_california_timezone_is_zoneinfo PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_applied PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_are_correct_functions PASSED
tests/arb/portal/test_startup_flask.py::test_logging_level_set_from_config PASSED
tests/arb/portal/test_startup_flask.py::test_logging_level_defaults_to_info PASSED
tests/arb/portal/test_startup_flask.py::test_werkzeug_logging_disabled PASSED
tests/arb/portal/test_startup_flask.py::test_werkzeug_logging_disabled_affects_global PASSED
tests/arb/portal/test_startup_flask.py::test_app_name_global_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_california_tz_global_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_overwrite_existing PASSED
tests/arb/portal/test_startup_flask.py::test_configuration_is_idempotent PASSED
tests/arb/portal/test_startup_flask.py::test_all_jinja_settings_configured PASSED
tests/arb/portal/test_startup_flask.py::test_all_app_config_settings_configured PASSED
tests/arb/portal/test_startup_flask.py::test_logging_debug_messages_emitted PASSED
tests/arb/portal/test_startup_flask.py::test_upload_path_is_valid_directory PASSED
tests/arb/portal/test_startup_flask.py::test_max_content_length_is_reasonable PASSED
tests/arb/portal/test_startup_flask.py::test_function_accepts_flask_app_instance PASSED
tests/arb/portal/test_startup_flask.py::test_function_modifies_app_in_place PASSED
tests/arb/portal/test_startup_runtime_info.py::test_platform_constants_defined PASSED
tests/arb/portal/test_startup_runtime_info.py::test_platform_detection_logic PASSED
tests/arb/portal/test_startup_runtime_info.py::test_path_constants_defined_and_types PASSED
tests/arb/portal/test_startup_runtime_info.py::test_path_structure PASSED
tests/arb/portal/test_startup_runtime_info.py::test_required_directories_exist PASSED
tests/arb/portal/test_startup_runtime_info.py::test_directory_creation_idempotent PASSED
tests/arb/portal/test_startup_runtime_info.py::test_print_runtime_diagnostics_logs_all PASSED
tests/arb/portal/test_startup_runtime_info.py::test_print_runtime_diagnostics_multiple_calls PASSED
tests/arb/portal/test_startup_runtime_info.py::test_log_file_path_is_file PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_with_valid_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_with_custom_tab_name PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_tab PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_tab_contents PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_sector PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_xl_dict_to_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_xl_dict_to_database_with_mock_db PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_empty_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_with_mock_components PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_new_row_backfill PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_json_file_to_db_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_json_file_to_db_with_mock_components PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_update_db_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_stage_only_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_excel_to_json_if_valid_with_excel_file PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_excel_to_json_if_valid_with_non_excel_file PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_sector_from_json PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_sector_from_json_missing_sector PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_store_staged_payload PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_all_functions_exist PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_function_signature PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_retrieves_existing_row PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_when_id_provided_but_not_found PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_with_auto_generated_id PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_adds_to_session_when_requested PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_does_not_add_to_session_by_default PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_handles_commit_failure PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_raises_error_for_invalid_table PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_uses_custom_primary_key PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_with_custom_primary_key PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_logs_detailed_diagnostics PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_handles_attribute_error_gracefully PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_session_state_tracking PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_default_parameters PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_returns_correct_tuple_structure PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_function_signature PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_valid_data PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_path_object PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_none_status_and_description PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_default_parameters PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_raises_error_for_none_filename PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_handles_commit_failure PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_logs_debug_messages PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_empty_strings PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_unicode_filename PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_long_description PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_returns_none PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_creates_audit_record PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_special_characters PASSED
tests/arb/portal/test_utils_form_mapper.py::test_apply_portal_update_filters_function_signature PASSED
tests/arb/portal/test_utils_form_mapper.py::test_no_filters_returns_original_query PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_key_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_user_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_comments_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_exact_and_range PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_empty_and_invalid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_open_ended PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_spaces_and_commas PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_valid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_invalid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_missing PASSED
tests/arb/portal/test_utils_form_mapper.py::test_combined_filters_all_types PASSED
tests/arb/portal/test_utils_form_mapper.py::test_apply_portal_update_filters_handles_missing_args PASSED
tests/arb/portal/test_utils_route_util.py::test_incidence_prep_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_with_data PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_empty_data PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_success PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_no_file PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_file_not_saved PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_success PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_upload_failure PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_default PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_custom PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_with_id_extraction PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_with_all_parameters PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_empty_details PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_none_misc_json PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_success PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_metadata PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_sector PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_tab PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_json_priority PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_foreign_key_fallback PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_both_none_raises PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_mismatch_logs_error PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_oil_and_gas PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_landfill PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_unsupported PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_success PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_missing_misc_json PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_conflicting_sectors PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_landfill.py::test_required_fields_present PASSED
tests/arb/portal/test_wtf_landfill.py::test_optional_fields_present PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_email_format PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_phone_regex PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_number_ranges PASSED
tests/arb/portal/test_wtf_landfill.py::test_update_contingent_selectors PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_emission_identified PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_no_emission_identified PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_lmr_included PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_lmr_planned PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_validation_with_valid_data PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_validation_with_invalid_data PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_choices_initialization PASSED
tests/arb/portal/test_wtf_landfill.py::test_cross_field_validation_emission_identified_flow PASSED
tests/arb/portal/test_wtf_landfill.py::test_cross_field_validation_no_emission_identified_flow PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_required_fields_present PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_optional_fields_present PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_venting_responses_constant PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_unintentional_leak_constant PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_email_format PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_phone_regex PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_number_ranges PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_dropdown_choices_populated PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_venting_exclusion PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_ogi_performed PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_method21_performed PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_equipment_other PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_component_other PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_update_contingent_selectors_noop PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_validation_with_valid_data PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_validation_with_invalid_data PASSED
tests/arb/portal/test_wtf_upload.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_upload.py::test_file_field_present PASSED
tests/arb/portal/test_wtf_upload.py::test_submit_field_present PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_valid_excel_file PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_invalid_file_type PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_without_file PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_empty_filename PASSED
tests/arb/utils/test_arb_logging.py::test_get_pretty_printer_basic PASSED
tests/arb/utils/test_arb_logging.py::test_get_pretty_printer_kwargs PASSED
tests/arb/utils/test_arb_logging.py::test_resolve_log_dir_creates_dir PASSED
tests/arb/utils/test_arb_logging.py::test_setup_standalone_logging_prints PASSED
tests/arb/utils/test_arb_logging.py::test_setup_app_logging_prints PASSED
tests/arb/utils/test_database.py::test_execute_sql_script_with_defaults SKIPPED
tests/arb/utils/test_database.py::test_execute_sql_script_with_custom_path_and_connection PASSED
tests/arb/utils/test_database.py::test_execute_sql_script_file_not_found PASSED
tests/arb/utils/test_database.py::test_execute_sql_script_empty_path PASSED
tests/arb/utils/test_database.py::test_execute_sql_script_invalid_sql PASSED
tests/arb/utils/test_database.py::test_get_reflected_base_valid PASSED
tests/arb/utils/test_database.py::test_get_reflected_base_none_db PASSED
tests/arb/utils/test_database.py::test_get_reflected_base_invalid_db PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_normal_operation PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_dry_run PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_remove_none_values PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_non_dict_json PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_json PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_json PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_table_not_found PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_column_not_found PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_table_name PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_table_name PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_column_name PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_column_name PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_custom_remove_value PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_no_matches PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_database_error_handling PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_missing_tz_error PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_missing_tz_assume_utc PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_empty PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_invalid PASSED
tests/arb/utils/test_date_and_time.py::test_excel_str_to_naive_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_excel_str_to_naive_datetime_empty_invalid PASSED
tests/arb/utils/test_date_and_time.py::test_html_naive_str_to_utc_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_html_naive_str_to_utc_datetime_empty PASSED
tests/arb/utils/test_date_and_time.py::test_ca_naive_datetime_to_utc_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_ca_naive_datetime_to_utc_datetime_aware PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_utc PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_naive_flag PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_naive_error PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_non_utc_error PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_iso_str_valid PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_iso_str_naive PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_valid PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_naive PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_non_utc PASSED
tests/arb/utils/test_date_and_time.py::test_is_datetime_naive_cases PASSED
tests/arb/utils/test_date_and_time.py::test_is_datetime_utc_cases PASSED
tests/arb/utils/test_date_and_time.py::test_excel_naive_datetime_to_utc_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_excel_naive_datetime_to_utc_datetime_aware PASSED
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_valid PASSED
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_empty PASSED
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_invalid PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_dict PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_list PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_non_datetime PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_dict PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_list PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_non_datetime PASSED
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_basic PASSED
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_include_hidden_and_functions PASSED
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_none PASSED
tests/arb/utils/test_diagnostics.py::test_list_differences_lists PASSED
tests/arb/utils/test_diagnostics.py::test_list_differences_dicts PASSED
tests/arb/utils/test_diagnostics.py::test_list_differences_none PASSED
tests/arb/utils/test_diagnostics.py::test_list_differences_print_warning PASSED
tests/arb/utils/test_diagnostics.py::test_diag_recursive_simple PASSED
tests/arb/utils/test_diagnostics.py::test_diag_recursive_none PASSED
tests/arb/utils/test_diagnostics.py::test_dict_to_str_flat PASSED
tests/arb/utils/test_diagnostics.py::test_dict_to_str_nested PASSED
tests/arb/utils/test_diagnostics.py::test_dict_to_str_none PASSED
tests/arb/utils/test_diagnostics.py::test_obj_to_html_dict PASSED
tests/arb/utils/test_diagnostics.py::test_obj_to_html_none PASSED
tests/arb/utils/test_diagnostics.py::test_compare_dicts_equal PASSED
tests/arb/utils/test_diagnostics.py::test_compare_dicts_diff_keys PASSED
tests/arb/utils/test_diagnostics.py::test_compare_dicts_diff_values PASSED
tests/arb/utils/test_diagnostics.py::test_compare_dicts_none PASSED
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_basic PASSED
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_none PASSED
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_partial PASSED
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_creates_parents PASSED
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_noop_for_empty PASSED
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_existing_dir PASSED
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_creates PASSED
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_existing PASSED
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_file_raises PASSED
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_noop_for_empty PASSED
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_basic PASSED
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_empty_dir PASSED
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_empty_file PASSED
tests/arb/utils/test_file_io.py::test_get_project_root_dir_success PASSED
tests/arb/utils/test_file_io.py::test_get_project_root_dir_no_match PASSED
tests/arb/utils/test_file_io.py::test_get_project_root_dir_empty_args PASSED
tests/arb/utils/test_file_io.py::test_resolve_project_root_success PASSED
tests/arb/utils/test_file_io.py::test_resolve_project_root_not_found PASSED
tests/arb/utils/test_file_io.py::test_resolve_project_root_empty_args PASSED
tests/arb/utils/test_file_io.py::test_read_file_reverse_basic PASSED
tests/arb/utils/test_file_io.py::test_read_file_reverse_empty_file PASSED
tests/arb/utils/test_file_io.py::test_read_file_reverse_file_not_found PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_basic PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_none_data PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_with_options PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_creates_parents PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_none_path PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_basic PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_with_options PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_file_not_found PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_invalid_json PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_none_path PASSED
tests/arb/utils/test_io_wrappers.py::test_write_text_file_basic PASSED
tests/arb/utils/test_io_wrappers.py::test_write_text_file_none_text PASSED
tests/arb/utils/test_io_wrappers.py::test_write_text_file_creates_parents PASSED
tests/arb/utils/test_io_wrappers.py::test_write_text_file_none_path PASSED
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_basic PASSED
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_missing_src PASSED
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_none_args PASSED
tests/arb/utils/test_json.py::test_json_serializer_datetime PASSED
tests/arb/utils/test_json.py::test_json_serializer_decimal PASSED
tests/arb/utils/test_json.py::test_json_serializer_class PASSED
tests/arb/utils/test_json.py::test_json_serializer_unsupported PASSED
tests/arb/utils/test_json.py::test_json_deserializer_datetime PASSED
tests/arb/utils/test_json.py::test_json_deserializer_decimal PASSED
tests/arb/utils/test_json.py::test_json_deserializer_class PASSED
tests/arb/utils/test_json.py::test_json_deserializer_unknown_type PASSED
tests/arb/utils/test_json.py::test_json_deserializer_unknown_class PASSED
tests/arb/utils/test_json.py::test_json_save_and_load_roundtrip PASSED
tests/arb/utils/test_json.py::test_json_save_none_path PASSED
tests/arb/utils/test_json.py::test_json_save_none_data PASSED
tests/arb/utils/test_json.py::test_json_load_file_not_found PASSED
tests/arb/utils/test_json.py::test_json_load_invalid_json PASSED
tests/arb/utils/test_json.py::test_json_save_with_meta_and_load PASSED
tests/arb/utils/test_json.py::test_json_save_with_meta_none_metadata PASSED
tests/arb/utils/test_json.py::test_add_metadata_to_json PASSED
tests/arb/utils/test_json.py::test_compare_json_files_identical PASSED
tests/arb/utils/test_json.py::test_compare_json_files_different PASSED
tests/arb/utils/test_json.py::test_cast_model_value_int PASSED
tests/arb/utils/test_json.py::test_cast_model_value_float PASSED
tests/arb/utils/test_json.py::test_cast_model_value_bool PASSED
tests/arb/utils/test_json.py::test_cast_model_value_invalid PASSED
tests/arb/utils/test_json.py::test_wtform_types_and_values PASSED
tests/arb/utils/test_json.py::test_make_dict_serializeable_and_deserialize_dict PASSED
tests/arb/utils/test_json.py::test_safe_json_loads_valid PASSED
tests/arb/utils/test_json.py::test_safe_json_loads_none PASSED
tests/arb/utils/test_json.py::test_safe_json_loads_invalid PASSED
tests/arb/utils/test_json.py::test_extract_id_from_json PASSED
tests/arb/utils/test_json.py::test_extract_id_from_json_missing PASSED
tests/arb/utils/test_json.py::test_extract_tab_payload PASSED
tests/arb/utils/test_json.py::test_normalize_value PASSED
tests/arb/utils/test_json.py::test_compute_field_differences PASSED
tests/arb/utils/test_log_util.py::test_log_function_parameters_basic PASSED
tests/arb/utils/test_log_util.py::test_log_function_parameters_custom_logger PASSED
tests/arb/utils/test_log_util.py::test_log_function_parameters_type_error PASSED
tests/arb/utils/test_log_util.py::test_log_parameters_decorator_logs PASSED
tests/arb/utils/test_log_util.py::test_log_parameters_decorator_custom_logger PASSED
tests/arb/utils/test_log_util.py::test_log_parameters_type_error PASSED
tests/arb/utils/test_log_util.py::test_flask_user_context_filter_sets_user PASSED
tests/arb/utils/test_log_util.py::test_flask_user_context_filter_no_user PASSED
tests/arb/utils/test_misc.py::test_get_nested_value_basic PASSED
tests/arb/utils/test_misc.py::test_get_nested_value_missing_key PASSED
tests/arb/utils/test_misc.py::test_get_nested_value_type_error PASSED
tests/arb/utils/test_misc.py::test_get_nested_value_value_error PASSED
tests/arb/utils/test_misc.py::test_ensure_key_value_pair_injects PASSED
tests/arb/utils/test_misc.py::test_ensure_key_value_pair_type_error PASSED
tests/arb/utils/test_misc.py::test_replace_list_occurrences PASSED
tests/arb/utils/test_misc.py::test_replace_list_occurrences_none PASSED
tests/arb/utils/test_misc.py::test_args_to_string PASSED
tests/arb/utils/test_misc.py::test_log_error_logs_and_raises PASSED
tests/arb/utils/test_misc.py::test_safe_cast_basic PASSED
tests/arb/utils/test_misc.py::test_safe_cast_value_error PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_valid PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_non_string PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_windows_1252_smart_quote PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_none PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_empty_string PASSED
tests/arb/utils/test_sql_alchemy.py::test_sa_model_diagnostics_logs PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_sa_fields_returns_sorted PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_sa_column_types_handles_types PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_sa_automap_types PASSED
tests/arb/utils/test_sql_alchemy.py::test_sa_model_to_dict PASSED
tests/arb/utils/test_sql_alchemy.py::test_table_to_list PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_class_from_table_name PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_rows_by_table_name PASSED
tests/arb/utils/test_sql_alchemy.py::test_delete_commit_and_log_model PASSED
tests/arb/utils/test_sql_alchemy.py::test_add_commit_and_log_model PASSED
tests/arb/utils/test_web_html.py::test_upload_single_file PASSED
tests/arb/utils/test_web_html.py::test_upload_single_file_no_filename PASSED
tests/arb/utils/test_web_html.py::test_upload_single_file_none_filename PASSED
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples PASSED
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples_empty_list PASSED
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples_single_item PASSED
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple PASSED
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple_empty_list PASSED
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple_single_item PASSED
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict PASSED
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_empty_list PASSED
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_empty_match_list PASSED
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_none_unmatch_update PASSED
tests/arb/utils/test_web_html.py::test_update_selector_dict PASSED
tests/arb/utils/test_web_html.py::test_update_selector_dict_empty_dict PASSED
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option PASSED
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_custom_item PASSED
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_ensure_first_false PASSED
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_empty_list PASSED
tests/arb/utils/test_web_html.py::test_remove_items_single_string PASSED
tests/arb/utils/test_web_html.py::test_remove_items_list PASSED
tests/arb/utils/test_web_html.py::test_remove_items_empty_list PASSED
tests/arb/utils/test_web_html.py::test_remove_items_empty_tuples PASSED
tests/arb/utils/test_web_html.py::test_remove_items_item_not_found PASSED
tests/arb/utils/test_web_html.py::test_run_diagnostics Running diagnostics for web_html.py...
All selector diagnostics passed.
PASSED
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid PASSED
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_invalid PASSED
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_none PASSED
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_value_error PASSED
tests/arb/utils/test_wtf_forms_util.py::test_remove_validators_removes_inputrequired PASSED
tests/arb/utils/test_wtf_forms_util.py::test_change_validators_on_test_switches PASSED
tests/arb/utils/test_wtf_forms_util.py::test_change_validators_replaces PASSED
tests/arb/utils/test_wtf_forms_util.py::test_get_wtforms_fields_lists_fields PASSED
tests/arb/utils/test_wtf_forms_util.py::test_model_to_wtform_and_wtform_to_model PASSED
tests/arb/utils/test_wtf_forms_util.py::test_update_model_with_payload_and_get_payloads PASSED

=============================== warnings summary ===============================
tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:584: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    primary_row = db.session.query(primary_table).get(primary_table_pk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:592: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    foreign_row = db.session.query(foreign_table).get(fk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload
tests/arb/portal/test_file_upload_suite.py::test_landfill_upload
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload
tests/arb/portal/test_file_upload_suite.py::test_energy_upload
tests/arb/portal/test_file_upload_suite.py::test_generic_upload
tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads
tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:592: SAWarning: fully NULL primary key identity cannot load any object.  This condition may raise an error in a future release.
    foreign_row = db.session.query(foreign_table).get(fk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:525: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    row = db.session.query(table).get(id_)  # type: ignore

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plumes_collection,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plumes_collection,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,sources,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,sources,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,scenes,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,scenes,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_district_contacts_collection,air_districts,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_district_contacts_collection,air_districts,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_delete_route
  /home/theld/miniconda3/envs/mini_conda_02/lib/python3.11/site-packages/flask_sqlalchemy/query.py:30: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    rv = self.get(ident)

tests/arb/utils/test_database.py: 16 warnings
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_database.py:52: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================ 578 passed, 18 skipped, 165 warnings in 19.59s ================
