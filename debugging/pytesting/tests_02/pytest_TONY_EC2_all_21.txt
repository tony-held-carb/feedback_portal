============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- /home/theld/miniconda3/envs/mini_conda_02/bin/python
cachedir: .pytest_cache
rootdir: /home/theld/code/git_repos/feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, base-url-2.1.0, asyncio-1.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 596 items

tests/arb/auth/test_email_util.py::test_send_welcome_email_function_signature PASSED [  0%]
tests/arb/auth/test_email_util.py::test_send_password_reset_email_function_signature PASSED [  0%]
tests/arb/auth/test_email_util.py::test_send_email_confirmation_function_signature PASSED [  0%]
tests/arb/auth/test_email_util.py::test_send_welcome_email_with_valid_user SKIPPED [  0%]
tests/arb/auth/test_email_util.py::test_send_password_reset_email_with_valid_user SKIPPED [  0%]
tests/arb/auth/test_email_util.py::test_send_email_confirmation_with_valid_user SKIPPED [  1%]
tests/arb/auth/test_forms.py::test_registration_form_instantiation PASSED [  1%]
tests/arb/auth/test_forms.py::test_login_form_instantiation PASSED       [  1%]
tests/arb/auth/test_forms.py::test_password_reset_form_instantiation PASSED [  1%]
tests/arb/auth/test_forms.py::test_forgot_username_form_instantiation PASSED [  1%]
tests/arb/auth/test_forms.py::test_change_password_form_instantiation PASSED [  1%]
tests/arb/auth/test_forms.py::test_registration_form_validation SKIPPED  [  2%]
tests/arb/auth/test_forms.py::test_login_form_validation SKIPPED (Re...) [  2%]
tests/arb/auth/test_forms.py::test_password_reset_form_validation SKIPPED [  2%]
tests/arb/auth/test_forms.py::test_change_password_form_validation SKIPPED [  2%]
tests/arb/auth/test_models.py::test_get_user_model_function_signature PASSED [  2%]
tests/arb/auth/test_models.py::test_get_user_model_returns_model SKIPPED [  2%]
tests/arb/auth/test_models.py::test_user_model_creation SKIPPED (Req...) [  3%]
tests/arb/auth/test_models.py::test_user_model_validation SKIPPED (R...) [  3%]
tests/arb/auth/test_routes.py::test_auth_bp_exists PASSED                [  3%]
tests/arb/auth/test_routes.py::test_login_route SKIPPED (Requires co...) [  3%]
tests/arb/auth/test_routes.py::test_register_route SKIPPED (Requires...) [  3%]
tests/arb/auth/test_routes.py::test_logout_route SKIPPED (Requires c...) [  3%]
tests/arb/auth/test_routes.py::test_password_reset_route SKIPPED (Re...) [  4%]
tests/arb/portal/config/test_accessors.py::test_get_processed_versions_dir PASSED [  4%]
tests/arb/portal/config/test_accessors.py::test_get_upload_folder PASSED [  4%]
tests/arb/portal/config/test_accessors.py::test_get_payload_save_dir PASSED [  4%]
tests/arb/portal/config/test_accessors.py::test_get_app_mode_default PASSED [  4%]
tests/arb/portal/config/test_accessors.py::test_get_app_mode_custom PASSED [  4%]
tests/arb/portal/config/test_accessors.py::test_get_database_uri PASSED  [  5%]
tests/arb/portal/config/test_accessors.py::test_missing_config_keys PASSED [  5%]
tests/arb/portal/config/test_config_init.py::test_get_config_production_via_config_type PASSED [  5%]
tests/arb/portal/config/test_config_init.py::test_get_config_production_via_flask_env PASSED [  5%]
tests/arb/portal/config/test_config_init.py::test_get_config_testing_via_config_type PASSED [  5%]
tests/arb/portal/config/test_config_init.py::test_get_config_testing_via_flask_env PASSED [  5%]
tests/arb/portal/config/test_config_init.py::test_get_config_development_default PASSED [  6%]
tests/arb/portal/config/test_config_init.py::test_get_config_development_empty_strings PASSED [  6%]
tests/arb/portal/config/test_config_init.py::test_get_config_development_invalid_values PASSED [  6%]
tests/arb/portal/config/test_config_init.py::test_get_config_case_insensitive PASSED [  6%]
tests/arb/portal/config/test_config_init.py::test_get_config_priority_config_type_over_flask_env PASSED [  6%]
tests/arb/portal/config/test_config_init.py::test_get_config_mixed_case_environment PASSED [  6%]
tests/arb/portal/config/test_settings.py::test_base_config_defaults PASSED [  7%]
tests/arb/portal/config/test_settings.py::test_development_config_inherits PASSED [  7%]
tests/arb/portal/config/test_settings.py::test_production_config_inherits PASSED [  7%]
tests/arb/portal/config/test_settings.py::test_testing_config_inherits PASSED [  7%]
tests/arb/portal/config/test_settings.py::test_env_override_sqlalchemy_database_uri PASSED [  7%]
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_true PASSED [  7%]
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_false PASSED [  8%]
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_not_set PASSED [  8%]
tests/arb/portal/config/test_settings.py::test_secret_key_from_environment PASSED [  8%]
tests/arb/portal/config/test_settings.py::test_secret_key_default_when_not_set PASSED [  8%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_venting_exclusion_conditional_fields PASSED [  8%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_ogi_performed_conditional_fields PASSED [  8%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_method21_performed_conditional_fields PASSED [  9%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_equipment_other_description_conditional PASSED [  9%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_component_other_description_conditional PASSED [  9%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_ogi_result_requires_method21 PASSED [  9%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_timestamp_validation_logic PASSED [  9%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_emission_identified_conditional_fields PASSED [  9%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_lmr_included_conditional_description PASSED [ 10%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_lmr_planned_conditional_description PASSED [ 10%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_contingent_dropdown_population PASSED [ 10%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_cross_field_validation_no_leak_detected PASSED [ 10%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_cross_field_validation_operator_aware PASSED [ 10%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_timestamp_validation_logic PASSED [ 10%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_emission_cause_repeat_validation PASSED [ 11%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestUploadFormCrossFieldLogic::test_file_type_validation PASSED [ 11%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestUploadFormCrossFieldLogic::test_file_required_validation PASSED [ 11%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_regulatory_compliance_across_sectors PASSED [ 11%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_conditional_field_consistency PASSED [ 11%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_timestamp_validation_consistency PASSED [ 11%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_empty_string_handling PASSED [ 12%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_none_value_handling PASSED [ 12%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_invalid_choice_handling PASSED [ 12%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_multiple_conditional_changes PASSED [ 12%]
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_conditional_logic_performance PASSED [ 12%]
tests/arb/portal/test_cross_field_conditional_logic.py::test_all_cross_field_logic_scenarios PASSED [ 12%]
tests/arb/portal/test_db_hardcoded.py::test_get_og_dummy_form_data_keys PASSED [ 13%]
tests/arb/portal/test_db_hardcoded.py::test_get_landfill_dummy_form_data_keys PASSED [ 13%]
tests/arb/portal/test_db_hardcoded.py::test_get_og_dummy_form_data_completeness PASSED [ 13%]
tests/arb/portal/test_db_hardcoded.py::test_get_landfill_dummy_form_data_completeness PASSED [ 13%]
tests/arb/portal/test_db_hardcoded.py::test_dummy_data_datetime_consistency PASSED [ 13%]
tests/arb/portal/test_db_hardcoded.py::test_dummy_data_sector_consistency PASSED [ 13%]
tests/arb/portal/test_db_hardcoded.py::test_module_level_dropdowns_are_dicts PASSED [ 14%]
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_returns_tuple_and_dicts PASSED [ 14%]
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_please_select_present PASSED [ 14%]
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_tuple_structure PASSED [ 14%]
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_deepcopy_immutability PASSED [ 14%]
tests/arb/portal/test_db_hardcoded.py::test_empty_dropdown_edge_case PASSED [ 14%]
tests/arb/portal/test_db_hardcoded.py::test_contingent_dropdown_structure PASSED [ 15%]
tests/arb/portal/test_db_hardcoded.py::test_all_expected_dropdown_keys_present PASSED [ 15%]
tests/arb/portal/test_db_hardcoded.py::test_dropdown_values_not_empty PASSED [ 15%]
tests/arb/portal/test_db_hardcoded.py::test_contingent_dropdown_completeness PASSED [ 15%]
tests/arb/portal/test_db_hardcoded.py::test_dropdown_data_consistency PASSED [ 15%]
tests/arb/portal/test_db_hardcoded.py::test_sector_constants_are_lists PASSED [ 15%]
tests/arb/portal/test_db_hardcoded.py::test_logger_is_configured PASSED  [ 16%]
tests/arb/portal/test_db_hardcoded.py::test_sector_constants_content PASSED [ 16%]
tests/arb/portal/test_db_hardcoded.py::test_selector_list_to_tuples_matches_canonical SKIPPED [ 16%]
tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload PASSED [ 16%]
tests/arb/portal/test_file_upload_suite.py::test_landfill_upload PASSED  [ 16%]
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload PASSED [ 16%]
tests/arb/portal/test_file_upload_suite.py::test_energy_upload PASSED    [ 17%]
tests/arb/portal/test_file_upload_suite.py::test_generic_upload PASSED   [ 17%]
tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_staged_upload PASSED [ 17%]
tests/arb/portal/test_file_upload_suite.py::test_landfill_staged_upload PASSED [ 17%]
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_staged_upload PASSED [ 17%]
tests/arb/portal/test_file_upload_suite.py::test_energy_staged_upload PASSED [ 17%]
tests/arb/portal/test_file_upload_suite.py::test_generic_staged_upload PASSED [ 18%]
tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads PASSED [ 18%]
tests/arb/portal/test_file_upload_suite.py::test_field_level_value_assertions PASSED [ 18%]
tests/arb/portal/test_file_upload_suite.py::test_database_state_verification PASSED [ 18%]
tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation PASSED [ 18%]
tests/arb/portal/test_file_upload_suite.py::test_invalid_excel_file PASSED [ 18%]
tests/arb/portal/test_file_upload_suite.py::test_corrupted_excel_file PASSED [ 19%]
tests/arb/portal/test_file_upload_suite.py::test_missing_required_fields PASSED [ 19%]
tests/arb/portal/test_file_upload_suite.py::test_negative_validation_errors PASSED [ 19%]
tests/arb/portal/test_file_upload_suite.py::test_file_size_limits PASSED [ 19%]
tests/arb/portal/test_file_upload_suite.py::test_concurrent_upload_handling PASSED [ 19%]
tests/arb/portal/test_file_upload_suite.py::test_malicious_file_handling PASSED [ 19%]
tests/arb/portal/test_file_upload_suite.py::test_data_integrity_through_processing_pipeline PASSED [ 20%]
tests/arb/portal/test_globals.py::test_globals_initial_state PASSED      [ 20%]
tests/arb/portal/test_globals.py::test_load_drop_downs_sets_globals SKIPPED [ 20%]
tests/arb/portal/test_globals.py::test_load_type_mapping_sets_db_column_types SKIPPED [ 20%]
tests/arb/portal/test_globals.py::test_load_drop_downs_integration PASSED [ 20%]
tests/arb/portal/test_globals.py::test_load_type_mapping_integration PASSED [ 20%]
tests/arb/portal/test_globals.py::test_globals_integration_with_real_data PASSED [ 21%]
tests/arb/portal/test_globals.py::test_globals_persistence_across_calls PASSED [ 21%]
tests/arb/portal/test_integration_app.py::test_app_starts PASSED         [ 21%]
tests/arb/portal/test_integration_app.py::test_homepage_route PASSED     [ 21%]
tests/arb/portal/test_integration_app.py::test_404_route PASSED          [ 21%]
tests/arb/portal/test_integration_app.py::test_db_session_creation PASSED [ 21%]
tests/arb/portal/test_integration_app.py::test_error_handling PASSED     [ 22%]
tests/arb/portal/test_integration_app.py::test_list_uploads_route PASSED [ 22%]
tests/arb/portal/test_integration_app.py::test_diagnostics_route PASSED  [ 22%]
tests/arb/portal/test_integration_app.py::test_portal_updates_route PASSED [ 22%]
tests/arb/portal/test_integration_app.py::test_search_route PASSED       [ 22%]
tests/arb/portal/test_integration_app.py::test_show_log_file_route PASSED [ 22%]
tests/arb/portal/test_integration_app.py::test_og_incidence_create_route PASSED [ 23%]
tests/arb/portal/test_integration_app.py::test_landfill_incidence_create_route PASSED [ 23%]
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_basic PASSED [ 23%]
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_no_changes PASSED [ 23%]
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_filter_paths PASSED [ 23%]
tests/arb/portal/test_routes_integration.py::test_incidence_update_route PASSED [ 23%]
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_with_message PASSED [ 24%]
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_invalid_id PASSED [ 24%]
tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route PASSED [ 24%]
tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route_get PASSED [ 24%]
tests/arb/portal/test_routes_integration.py::test_landfill_incidence_create_route PASSED [ 24%]
tests/arb/portal/test_routes_integration.py::test_landfill_incidence_create_route_get PASSED [ 25%]
tests/arb/portal/test_routes_integration.py::test_incidence_delete_route PASSED [ 25%]
tests/arb/portal/test_routes_integration.py::test_incidence_delete_route_invalid_id PASSED [ 25%]
tests/arb/portal/test_routes_integration.py::test_list_uploads_route PASSED [ 25%]
tests/arb/portal/test_routes_integration.py::test_list_staged_route PASSED [ 25%]
tests/arb/portal/test_routes_integration.py::test_upload_file_route_get PASSED [ 25%]
tests/arb/portal/test_routes_integration.py::test_upload_file_route_get_with_message PASSED [ 26%]
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_no_file PASSED [ 26%]
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_empty_file PASSED [ 26%]
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_invalid_file PASSED [ 26%]
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_get PASSED [ 26%]
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_get_with_message PASSED [ 26%]
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_no_file PASSED [ 27%]
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_empty_file PASSED [ 27%]
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_invalid_file PASSED [ 27%]
tests/arb/portal/test_routes_integration.py::test_search_route_get PASSED [ 27%]
tests/arb/portal/test_routes_integration.py::test_search_route_post PASSED [ 27%]
tests/arb/portal/test_routes_integration.py::test_search_route_post_empty_search PASSED [ 27%]
tests/arb/portal/test_routes_integration.py::test_search_route_post_no_search_param PASSED [ 28%]
tests/arb/portal/test_routes_integration.py::test_diagnostics_route PASSED [ 28%]
tests/arb/portal/test_routes_integration.py::test_show_dropdown_dict_route PASSED [ 28%]
tests/arb/portal/test_routes_integration.py::test_show_database_structure_route PASSED [ 28%]
tests/arb/portal/test_routes_integration.py::test_show_feedback_form_structure_route PASSED [ 28%]
tests/arb/portal/test_routes_integration.py::test_show_log_file_route PASSED [ 28%]
tests/arb/portal/test_routes_integration.py::test_portal_updates_route PASSED [ 29%]
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_filters PASSED [ 29%]
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_sorting PASSED [ 29%]
tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route PASSED [ 29%]
tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route_with_filters PASSED [ 29%]
tests/arb/portal/test_routes_integration.py::test_review_staged_route PASSED [ 29%]
tests/arb/portal/test_routes_integration.py::test_review_staged_route_invalid_id PASSED [ 30%]
tests/arb/portal/test_routes_integration.py::test_confirm_staged_route PASSED [ 30%]
tests/arb/portal/test_routes_integration.py::test_confirm_staged_route_invalid_id PASSED [ 30%]
tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route PASSED [ 30%]
tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route_invalid_id PASSED [ 30%]
tests/arb/portal/test_routes_integration.py::test_apply_staged_update_route PASSED [ 30%]
tests/arb/portal/test_routes_integration.py::test_apply_staged_update_route_invalid_id PASSED [ 31%]
tests/arb/portal/test_routes_integration.py::test_serve_file_route PASSED [ 31%]
tests/arb/portal/test_routes_integration.py::test_serve_file_route_invalid_filename PASSED [ 31%]
tests/arb/portal/test_routes_integration.py::test_index_route PASSED     [ 31%]
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_multiple_rows_error PASSED [ 31%]
tests/arb/portal/test_routes_integration.py::test_upload_file_route_exception_handling PASSED [ 31%]
tests/arb/portal/test_routes_integration.py::test_upload_staged_route_exception_handling PASSED [ 32%]
tests/arb/portal/test_routes_integration.py::test_upload_file_route_with_special_characters_in_message PASSED [ 32%]
tests/arb/portal/test_routes_integration.py::test_upload_staged_route_with_special_characters_in_message PASSED [ 32%]
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_pagination PASSED [ 32%]
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_sorting PASSED [ 32%]
tests/arb/portal/test_sqla_models.py::test_uploaded_file_repr PASSED     [ 32%]
tests/arb/portal/test_sqla_models.py::test_portal_update_repr PASSED     [ 33%]
tests/arb/portal/test_sqla_models.py::test_run_diagnostics_success PASSED [ 33%]
tests/arb/portal/test_sqla_models.py::test_run_diagnostics_db_error PASSED [ 33%]
tests/arb/portal/test_sqla_models.py::test_uploaded_file_integration PASSED [ 33%]
tests/arb/portal/test_sqla_models.py::test_portal_update_integration PASSED [ 33%]
tests/arb/portal/test_startup_db_integration.py::test_db_create_creates_tables PASSED [ 33%]
tests/arb/portal/test_startup_db_integration.py::test_db_initialize_and_create_runs PASSED [ 34%]
tests/arb/portal/test_startup_flask.py::test_configure_flask_app_can_be_called PASSED [ 34%]
tests/arb/portal/test_startup_flask.py::test_configure_flask_app_returns_none PASSED [ 34%]
tests/arb/portal/test_startup_flask.py::test_upload_configuration_applied PASSED [ 34%]
tests/arb/portal/test_startup_flask.py::test_upload_configuration_overwrites_existing PASSED [ 34%]
tests/arb/portal/test_startup_flask.py::test_jinja_configuration_applied PASSED [ 34%]
tests/arb/portal/test_startup_flask.py::test_jinja_undefined_behavior_set PASSED [ 35%]
tests/arb/portal/test_startup_flask.py::test_jinja_globals_applied PASSED [ 35%]
tests/arb/portal/test_startup_flask.py::test_california_timezone_is_zoneinfo PASSED [ 35%]
tests/arb/portal/test_startup_flask.py::test_jinja_filters_applied PASSED [ 35%]
tests/arb/portal/test_startup_flask.py::test_jinja_filters_are_correct_functions PASSED [ 35%]
tests/arb/portal/test_startup_flask.py::test_logging_level_set_from_config PASSED [ 35%]
tests/arb/portal/test_startup_flask.py::test_logging_level_defaults_to_info PASSED [ 36%]
tests/arb/portal/test_startup_flask.py::test_werkzeug_logging_disabled PASSED [ 36%]
tests/arb/portal/test_startup_flask.py::test_werkzeug_logging_disabled_affects_global PASSED [ 36%]
tests/arb/portal/test_startup_flask.py::test_app_name_global_overwrites_existing PASSED [ 36%]
tests/arb/portal/test_startup_flask.py::test_california_tz_global_overwrites_existing PASSED [ 36%]
tests/arb/portal/test_startup_flask.py::test_jinja_filters_overwrite_existing PASSED [ 36%]
tests/arb/portal/test_startup_flask.py::test_configuration_is_idempotent PASSED [ 37%]
tests/arb/portal/test_startup_flask.py::test_all_jinja_settings_configured PASSED [ 37%]
tests/arb/portal/test_startup_flask.py::test_all_app_config_settings_configured PASSED [ 37%]
tests/arb/portal/test_startup_flask.py::test_logging_debug_messages_emitted PASSED [ 37%]
tests/arb/portal/test_startup_flask.py::test_upload_path_is_valid_directory PASSED [ 37%]
tests/arb/portal/test_startup_flask.py::test_max_content_length_is_reasonable PASSED [ 37%]
tests/arb/portal/test_startup_flask.py::test_function_accepts_flask_app_instance PASSED [ 38%]
tests/arb/portal/test_startup_flask.py::test_function_modifies_app_in_place PASSED [ 38%]
tests/arb/portal/test_startup_runtime_info.py::test_platform_constants_defined PASSED [ 38%]
tests/arb/portal/test_startup_runtime_info.py::test_platform_detection_logic PASSED [ 38%]
tests/arb/portal/test_startup_runtime_info.py::test_path_constants_defined_and_types PASSED [ 38%]
tests/arb/portal/test_startup_runtime_info.py::test_path_structure PASSED [ 38%]
tests/arb/portal/test_startup_runtime_info.py::test_required_directories_exist PASSED [ 39%]
tests/arb/portal/test_startup_runtime_info.py::test_directory_creation_idempotent PASSED [ 39%]
tests/arb/portal/test_startup_runtime_info.py::test_print_runtime_diagnostics_logs_all PASSED [ 39%]
tests/arb/portal/test_startup_runtime_info.py::test_print_runtime_diagnostics_multiple_calls PASSED [ 39%]
tests/arb/portal/test_startup_runtime_info.py::test_log_file_path_is_file PASSED [ 39%]
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_function_signature PASSED [ 39%]
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_with_valid_data PASSED [ 40%]
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_with_custom_tab_name PASSED [ 40%]
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_tab PASSED [ 40%]
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_tab_contents PASSED [ 40%]
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_sector PASSED [ 40%]
tests/arb/portal/test_utils_db_ingest_util.py::test_xl_dict_to_database_function_signature PASSED [ 40%]
tests/arb/portal/test_utils_db_ingest_util.py::test_xl_dict_to_database_with_mock_db PASSED [ 41%]
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_function_signature PASSED [ 41%]
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_empty_data PASSED [ 41%]
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_with_mock_components PASSED [ 41%]
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_dry_run PASSED [ 41%]
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_new_row_backfill PASSED [ 41%]
tests/arb/portal/test_utils_db_ingest_util.py::test_json_file_to_db_function_signature PASSED [ 42%]
tests/arb/portal/test_utils_db_ingest_util.py::test_json_file_to_db_with_mock_components PASSED [ 42%]
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_update_db_function_signature PASSED [ 42%]
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_stage_only_function_signature PASSED [ 42%]
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_excel_to_json_if_valid_with_excel_file PASSED [ 42%]
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_excel_to_json_if_valid_with_non_excel_file PASSED [ 42%]
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_sector_from_json PASSED [ 43%]
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_sector_from_json_missing_sector PASSED [ 43%]
tests/arb/portal/test_utils_db_ingest_util.py::test_store_staged_payload PASSED [ 43%]
tests/arb/portal/test_utils_db_ingest_util.py::test_all_functions_exist PASSED [ 43%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_function_signature PASSED [ 43%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_retrieves_existing_row PASSED [ 43%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_when_id_provided_but_not_found PASSED [ 44%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_with_auto_generated_id PASSED [ 44%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_adds_to_session_when_requested PASSED [ 44%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_does_not_add_to_session_by_default PASSED [ 44%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_handles_commit_failure PASSED [ 44%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_raises_error_for_invalid_table PASSED [ 44%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_uses_custom_primary_key PASSED [ 45%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_with_custom_primary_key PASSED [ 45%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_logs_detailed_diagnostics PASSED [ 45%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_handles_attribute_error_gracefully PASSED [ 45%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_session_state_tracking PASSED [ 45%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_default_parameters PASSED [ 45%]
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_returns_correct_tuple_structure PASSED [ 46%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_function_signature PASSED [ 46%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_valid_data PASSED [ 46%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_path_object PASSED [ 46%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_none_status_and_description PASSED [ 46%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_default_parameters PASSED [ 46%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_raises_error_for_none_filename PASSED [ 47%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_handles_commit_failure PASSED [ 47%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_logs_debug_messages PASSED [ 47%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_empty_strings PASSED [ 47%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_unicode_filename PASSED [ 47%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_long_description PASSED [ 47%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_returns_none PASSED [ 48%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_creates_audit_record PASSED [ 48%]
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_special_characters PASSED [ 48%]
tests/arb/portal/test_utils_form_mapper.py::test_apply_portal_update_filters_function_signature PASSED [ 48%]
tests/arb/portal/test_utils_form_mapper.py::test_no_filters_returns_original_query PASSED [ 48%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_key_applies_ilike PASSED [ 48%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_user_applies_ilike PASSED [ 49%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_comments_applies_ilike PASSED [ 49%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_exact_and_range PASSED [ 49%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_empty_and_invalid PASSED [ 49%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_open_ended PASSED [ 49%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_spaces_and_commas PASSED [ 50%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_valid PASSED [ 50%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_invalid PASSED [ 50%]
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_missing PASSED [ 50%]
tests/arb/portal/test_utils_form_mapper.py::test_combined_filters_all_types PASSED [ 50%]
tests/arb/portal/test_utils_form_mapper.py::test_apply_portal_update_filters_handles_missing_args PASSED [ 50%]
tests/arb/portal/test_utils_route_util.py::test_incidence_prep_function_signature PASSED [ 51%]
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_function_signature PASSED [ 51%]
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_function_signature PASSED [ 51%]
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_function_signature PASSED [ 51%]
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_function_signature PASSED [ 51%]
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_with_data PASSED [ 51%]
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_empty_data PASSED [ 52%]
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_success PASSED [ 52%]
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_no_file PASSED [ 52%]
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_file_not_saved PASSED [ 52%]
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_success PASSED [ 52%]
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_upload_failure PASSED [ 52%]
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_default PASSED [ 53%]
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_custom PASSED [ 53%]
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_with_id_extraction PASSED [ 53%]
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_with_all_parameters PASSED [ 53%]
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_empty_details PASSED [ 53%]
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_none_misc_json PASSED [ 53%]
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_success PASSED [ 54%]
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_metadata PASSED [ 54%]
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_sector PASSED [ 54%]
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_tab PASSED [ 54%]
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_json_priority PASSED [ 54%]
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_foreign_key_fallback PASSED [ 54%]
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_both_none_raises PASSED [ 55%]
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_mismatch_logs_error PASSED [ 55%]
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_oil_and_gas PASSED [ 55%]
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_landfill PASSED [ 55%]
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_unsupported PASSED [ 55%]
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_success PASSED [ 55%]
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_missing_misc_json PASSED [ 56%]
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_conflicting_sectors PASSED [ 56%]
tests/arb/portal/test_wtf_landfill.py::test_form_instantiation PASSED    [ 56%]
tests/arb/portal/test_wtf_landfill.py::test_required_fields_present PASSED [ 56%]
tests/arb/portal/test_wtf_landfill.py::test_optional_fields_present PASSED [ 56%]
tests/arb/portal/test_wtf_landfill.py::test_field_validation_email_format PASSED [ 56%]
tests/arb/portal/test_wtf_landfill.py::test_field_validation_phone_regex PASSED [ 57%]
tests/arb/portal/test_wtf_landfill.py::test_field_validation_number_ranges PASSED [ 57%]
tests/arb/portal/test_wtf_landfill.py::test_update_contingent_selectors PASSED [ 57%]
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_emission_identified PASSED [ 57%]
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_no_emission_identified PASSED [ 57%]
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_lmr_included PASSED [ 57%]
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_lmr_planned PASSED [ 58%]
tests/arb/portal/test_wtf_landfill.py::test_form_validation_with_valid_data PASSED [ 58%]
tests/arb/portal/test_wtf_landfill.py::test_form_validation_with_invalid_data PASSED [ 58%]
tests/arb/portal/test_wtf_landfill.py::test_field_choices_initialization PASSED [ 58%]
tests/arb/portal/test_wtf_landfill.py::test_cross_field_validation_emission_identified_flow PASSED [ 58%]
tests/arb/portal/test_wtf_landfill.py::test_cross_field_validation_no_emission_identified_flow PASSED [ 58%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_instantiation PASSED [ 59%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_required_fields_present PASSED [ 59%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_optional_fields_present PASSED [ 59%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_venting_responses_constant PASSED [ 59%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_unintentional_leak_constant PASSED [ 59%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_email_format PASSED [ 59%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_phone_regex PASSED [ 60%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_number_ranges PASSED [ 60%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_dropdown_choices_populated PASSED [ 60%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_venting_exclusion PASSED [ 60%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_ogi_performed PASSED [ 60%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_method21_performed PASSED [ 60%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_equipment_other PASSED [ 61%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_component_other PASSED [ 61%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_update_contingent_selectors_noop PASSED [ 61%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_validation_with_valid_data PASSED [ 61%]
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_validation_with_invalid_data PASSED [ 61%]
tests/arb/portal/test_wtf_upload.py::test_form_instantiation PASSED      [ 61%]
tests/arb/portal/test_wtf_upload.py::test_file_field_present PASSED      [ 62%]
tests/arb/portal/test_wtf_upload.py::test_submit_field_present PASSED    [ 62%]
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_valid_excel_file PASSED [ 62%]
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_invalid_file_type PASSED [ 62%]
tests/arb/portal/test_wtf_upload.py::test_form_validation_without_file PASSED [ 62%]
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_empty_filename PASSED [ 62%]
tests/arb/utils/test_arb_logging.py::test_get_pretty_printer_basic PASSED [ 63%]
tests/arb/utils/test_arb_logging.py::test_get_pretty_printer_kwargs PASSED [ 63%]
tests/arb/utils/test_arb_logging.py::test_resolve_log_dir_creates_dir PASSED [ 63%]
tests/arb/utils/test_arb_logging.py::test_setup_standalone_logging_prints PASSED [ 63%]
tests/arb/utils/test_arb_logging.py::test_setup_app_logging_prints PASSED [ 63%]
tests/arb/utils/test_database.py::test_execute_sql_script_with_defaults SKIPPED [ 63%]
tests/arb/utils/test_database.py::test_execute_sql_script_with_custom_path_and_connection PASSED [ 64%]
tests/arb/utils/test_database.py::test_execute_sql_script_file_not_found PASSED [ 64%]
tests/arb/utils/test_database.py::test_execute_sql_script_empty_path PASSED [ 64%]
tests/arb/utils/test_database.py::test_execute_sql_script_invalid_sql PASSED [ 64%]
tests/arb/utils/test_database.py::test_get_reflected_base_valid PASSED   [ 64%]
tests/arb/utils/test_database.py::test_get_reflected_base_none_db PASSED [ 64%]
tests/arb/utils/test_database.py::test_get_reflected_base_invalid_db PASSED [ 65%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_normal_operation PASSED [ 65%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_dry_run PASSED  [ 65%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_remove_none_values PASSED [ 65%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_non_dict_json PASSED [ 65%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_json PASSED [ 65%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_json PASSED [ 66%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_table_not_found PASSED [ 66%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_column_not_found PASSED [ 66%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_table_name PASSED [ 66%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_table_name PASSED [ 66%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_column_name PASSED [ 66%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_column_name PASSED [ 67%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_custom_remove_value PASSED [ 67%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_no_matches PASSED [ 67%]
tests/arb/utils/test_database.py::test_cleanse_misc_json_database_error_handling PASSED [ 67%]
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_valid PASSED [ 67%]
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_missing_tz_error PASSED [ 67%]
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_missing_tz_assume_utc PASSED [ 68%]
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_empty PASSED [ 68%]
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_invalid PASSED [ 68%]
tests/arb/utils/test_date_and_time.py::test_excel_str_to_naive_datetime_valid PASSED [ 68%]
tests/arb/utils/test_date_and_time.py::test_excel_str_to_naive_datetime_empty_invalid PASSED [ 68%]
tests/arb/utils/test_date_and_time.py::test_html_naive_str_to_utc_datetime_valid PASSED [ 68%]
tests/arb/utils/test_date_and_time.py::test_html_naive_str_to_utc_datetime_empty PASSED [ 69%]
tests/arb/utils/test_date_and_time.py::test_ca_naive_datetime_to_utc_datetime_valid PASSED [ 69%]
tests/arb/utils/test_date_and_time.py::test_ca_naive_datetime_to_utc_datetime_aware PASSED [ 69%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_utc PASSED [ 69%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_naive_flag PASSED [ 69%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_naive_error PASSED [ 69%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_non_utc_error PASSED [ 70%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_iso_str_valid PASSED [ 70%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_iso_str_naive PASSED [ 70%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_valid PASSED [ 70%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_naive PASSED [ 70%]
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_non_utc PASSED [ 70%]
tests/arb/utils/test_date_and_time.py::test_is_datetime_naive_cases PASSED [ 71%]
tests/arb/utils/test_date_and_time.py::test_is_datetime_utc_cases PASSED [ 71%]
tests/arb/utils/test_date_and_time.py::test_excel_naive_datetime_to_utc_datetime_valid PASSED [ 71%]
tests/arb/utils/test_date_and_time.py::test_excel_naive_datetime_to_utc_datetime_aware PASSED [ 71%]
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_valid PASSED [ 71%]
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_empty PASSED [ 71%]
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_invalid PASSED [ 72%]
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_dict PASSED [ 72%]
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_list PASSED [ 72%]
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_non_datetime PASSED [ 72%]
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_dict PASSED [ 72%]
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_list PASSED [ 72%]
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_non_datetime PASSED [ 73%]
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_basic PASSED   [ 73%]
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_include_hidden_and_functions PASSED [ 73%]
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_none PASSED    [ 73%]
tests/arb/utils/test_diagnostics.py::test_list_differences_lists PASSED  [ 73%]
tests/arb/utils/test_diagnostics.py::test_list_differences_dicts PASSED  [ 73%]
tests/arb/utils/test_diagnostics.py::test_list_differences_none PASSED   [ 74%]
tests/arb/utils/test_diagnostics.py::test_list_differences_print_warning PASSED [ 74%]
tests/arb/utils/test_diagnostics.py::test_diag_recursive_simple PASSED   [ 74%]
tests/arb/utils/test_diagnostics.py::test_diag_recursive_none PASSED     [ 74%]
tests/arb/utils/test_diagnostics.py::test_dict_to_str_flat PASSED        [ 74%]
tests/arb/utils/test_diagnostics.py::test_dict_to_str_nested PASSED      [ 75%]
tests/arb/utils/test_diagnostics.py::test_dict_to_str_none PASSED        [ 75%]
tests/arb/utils/test_diagnostics.py::test_obj_to_html_dict PASSED        [ 75%]
tests/arb/utils/test_diagnostics.py::test_obj_to_html_none PASSED        [ 75%]
tests/arb/utils/test_diagnostics.py::test_compare_dicts_equal PASSED     [ 75%]
tests/arb/utils/test_diagnostics.py::test_compare_dicts_diff_keys PASSED [ 75%]
tests/arb/utils/test_diagnostics.py::test_compare_dicts_diff_values PASSED [ 76%]
tests/arb/utils/test_diagnostics.py::test_compare_dicts_none PASSED      [ 76%]
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_basic PASSED [ 76%]
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_none PASSED [ 76%]
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_partial PASSED [ 76%]
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_creates_parents PASSED [ 76%]
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_noop_for_empty PASSED [ 77%]
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_existing_dir PASSED [ 77%]
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_creates PASSED   [ 77%]
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_existing PASSED  [ 77%]
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_file_raises PASSED [ 77%]
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_noop_for_empty PASSED [ 77%]
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_basic PASSED [ 78%]
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_empty_dir PASSED [ 78%]
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_empty_file PASSED [ 78%]
tests/arb/utils/test_file_io.py::test_get_project_root_dir_success PASSED [ 78%]
tests/arb/utils/test_file_io.py::test_get_project_root_dir_no_match PASSED [ 78%]
tests/arb/utils/test_file_io.py::test_get_project_root_dir_empty_args PASSED [ 78%]
tests/arb/utils/test_file_io.py::test_resolve_project_root_success PASSED [ 79%]
tests/arb/utils/test_file_io.py::test_resolve_project_root_not_found PASSED [ 79%]
tests/arb/utils/test_file_io.py::test_resolve_project_root_empty_args PASSED [ 79%]
tests/arb/utils/test_file_io.py::test_read_file_reverse_basic PASSED     [ 79%]
tests/arb/utils/test_file_io.py::test_read_file_reverse_empty_file PASSED [ 79%]
tests/arb/utils/test_file_io.py::test_read_file_reverse_file_not_found PASSED [ 79%]
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_basic PASSED  [ 80%]
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_none_data PASSED [ 80%]
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_with_options PASSED [ 80%]
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_creates_parents PASSED [ 80%]
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_none_path PASSED [ 80%]
tests/arb/utils/test_io_wrappers.py::test_read_json_file_basic PASSED    [ 80%]
tests/arb/utils/test_io_wrappers.py::test_read_json_file_with_options PASSED [ 81%]
tests/arb/utils/test_io_wrappers.py::test_read_json_file_file_not_found PASSED [ 81%]
tests/arb/utils/test_io_wrappers.py::test_read_json_file_invalid_json PASSED [ 81%]
tests/arb/utils/test_io_wrappers.py::test_read_json_file_none_path PASSED [ 81%]
tests/arb/utils/test_io_wrappers.py::test_write_text_file_basic PASSED   [ 81%]
tests/arb/utils/test_io_wrappers.py::test_write_text_file_none_text PASSED [ 81%]
tests/arb/utils/test_io_wrappers.py::test_write_text_file_creates_parents PASSED [ 82%]
tests/arb/utils/test_io_wrappers.py::test_write_text_file_none_path PASSED [ 82%]
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_basic PASSED    [ 82%]
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_missing_src PASSED [ 82%]
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_none_args PASSED [ 82%]
tests/arb/utils/test_json.py::test_json_serializer_datetime PASSED       [ 82%]
tests/arb/utils/test_json.py::test_json_serializer_decimal PASSED        [ 83%]
tests/arb/utils/test_json.py::test_json_serializer_class PASSED          [ 83%]
tests/arb/utils/test_json.py::test_json_serializer_unsupported PASSED    [ 83%]
tests/arb/utils/test_json.py::test_json_deserializer_datetime PASSED     [ 83%]
tests/arb/utils/test_json.py::test_json_deserializer_decimal PASSED      [ 83%]
tests/arb/utils/test_json.py::test_json_deserializer_class PASSED        [ 83%]
tests/arb/utils/test_json.py::test_json_deserializer_unknown_type PASSED [ 84%]
tests/arb/utils/test_json.py::test_json_deserializer_unknown_class PASSED [ 84%]
tests/arb/utils/test_json.py::test_json_save_and_load_roundtrip PASSED   [ 84%]
tests/arb/utils/test_json.py::test_json_save_none_path PASSED            [ 84%]
tests/arb/utils/test_json.py::test_json_save_none_data PASSED            [ 84%]
tests/arb/utils/test_json.py::test_json_load_file_not_found PASSED       [ 84%]
tests/arb/utils/test_json.py::test_json_load_invalid_json PASSED         [ 85%]
tests/arb/utils/test_json.py::test_json_save_with_meta_and_load PASSED   [ 85%]
tests/arb/utils/test_json.py::test_json_save_with_meta_none_metadata PASSED [ 85%]
tests/arb/utils/test_json.py::test_add_metadata_to_json PASSED           [ 85%]
tests/arb/utils/test_json.py::test_compare_json_files_identical PASSED   [ 85%]
tests/arb/utils/test_json.py::test_compare_json_files_different PASSED   [ 85%]
tests/arb/utils/test_json.py::test_cast_model_value_int PASSED           [ 86%]
tests/arb/utils/test_json.py::test_cast_model_value_float PASSED         [ 86%]
tests/arb/utils/test_json.py::test_cast_model_value_bool PASSED          [ 86%]
tests/arb/utils/test_json.py::test_cast_model_value_invalid PASSED       [ 86%]
tests/arb/utils/test_json.py::test_wtform_types_and_values PASSED        [ 86%]
tests/arb/utils/test_json.py::test_make_dict_serializeable_and_deserialize_dict PASSED [ 86%]
tests/arb/utils/test_json.py::test_safe_json_loads_valid PASSED          [ 87%]
tests/arb/utils/test_json.py::test_safe_json_loads_none PASSED           [ 87%]
tests/arb/utils/test_json.py::test_safe_json_loads_invalid PASSED        [ 87%]
tests/arb/utils/test_json.py::test_extract_id_from_json PASSED           [ 87%]
tests/arb/utils/test_json.py::test_extract_id_from_json_missing PASSED   [ 87%]
tests/arb/utils/test_json.py::test_extract_tab_payload PASSED            [ 87%]
tests/arb/utils/test_json.py::test_normalize_value PASSED                [ 88%]
tests/arb/utils/test_json.py::test_compute_field_differences PASSED      [ 88%]
tests/arb/utils/test_log_util.py::test_log_function_parameters_basic PASSED [ 88%]
tests/arb/utils/test_log_util.py::test_log_function_parameters_custom_logger PASSED [ 88%]
tests/arb/utils/test_log_util.py::test_log_function_parameters_type_error PASSED [ 88%]
tests/arb/utils/test_log_util.py::test_log_parameters_decorator_logs PASSED [ 88%]
tests/arb/utils/test_log_util.py::test_log_parameters_decorator_custom_logger PASSED [ 89%]
tests/arb/utils/test_log_util.py::test_log_parameters_type_error PASSED  [ 89%]
tests/arb/utils/test_log_util.py::test_flask_user_context_filter_sets_user PASSED [ 89%]
tests/arb/utils/test_log_util.py::test_flask_user_context_filter_no_user PASSED [ 89%]
tests/arb/utils/test_misc.py::test_get_nested_value_basic PASSED         [ 89%]
tests/arb/utils/test_misc.py::test_get_nested_value_missing_key PASSED   [ 89%]
tests/arb/utils/test_misc.py::test_get_nested_value_type_error PASSED    [ 90%]
tests/arb/utils/test_misc.py::test_get_nested_value_value_error PASSED   [ 90%]
tests/arb/utils/test_misc.py::test_ensure_key_value_pair_injects PASSED  [ 90%]
tests/arb/utils/test_misc.py::test_ensure_key_value_pair_type_error PASSED [ 90%]
tests/arb/utils/test_misc.py::test_replace_list_occurrences PASSED       [ 90%]
tests/arb/utils/test_misc.py::test_replace_list_occurrences_none PASSED  [ 90%]
tests/arb/utils/test_misc.py::test_args_to_string PASSED                 [ 91%]
tests/arb/utils/test_misc.py::test_log_error_logs_and_raises PASSED      [ 91%]
tests/arb/utils/test_misc.py::test_safe_cast_basic PASSED                [ 91%]
tests/arb/utils/test_misc.py::test_safe_cast_value_error PASSED          [ 91%]
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_valid PASSED        [ 91%]
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_non_string PASSED   [ 91%]
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_windows_1252_smart_quote PASSED [ 92%]
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_none PASSED         [ 92%]
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_empty_string PASSED [ 92%]
tests/arb/utils/test_sql_alchemy.py::test_sa_model_diagnostics_logs PASSED [ 92%]
tests/arb/utils/test_sql_alchemy.py::test_get_sa_fields_returns_sorted PASSED [ 92%]
tests/arb/utils/test_sql_alchemy.py::test_get_sa_column_types_handles_types PASSED [ 92%]
tests/arb/utils/test_sql_alchemy.py::test_get_sa_automap_types PASSED    [ 93%]
tests/arb/utils/test_sql_alchemy.py::test_sa_model_to_dict PASSED        [ 93%]
tests/arb/utils/test_sql_alchemy.py::test_table_to_list PASSED           [ 93%]
tests/arb/utils/test_sql_alchemy.py::test_get_class_from_table_name PASSED [ 93%]
tests/arb/utils/test_sql_alchemy.py::test_get_rows_by_table_name PASSED  [ 93%]
tests/arb/utils/test_sql_alchemy.py::test_delete_commit_and_log_model PASSED [ 93%]
tests/arb/utils/test_sql_alchemy.py::test_add_commit_and_log_model PASSED [ 94%]
tests/arb/utils/test_web_html.py::test_upload_single_file PASSED         [ 94%]
tests/arb/utils/test_web_html.py::test_upload_single_file_no_filename PASSED [ 94%]
tests/arb/utils/test_web_html.py::test_upload_single_file_none_filename PASSED [ 94%]
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples PASSED    [ 94%]
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples_empty_list PASSED [ 94%]
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples_single_item PASSED [ 95%]
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple PASSED       [ 95%]
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple_empty_list PASSED [ 95%]
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple_single_item PASSED [ 95%]
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict PASSED   [ 95%]
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_empty_list PASSED [ 95%]
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_empty_match_list PASSED [ 96%]
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_none_unmatch_update PASSED [ 96%]
tests/arb/utils/test_web_html.py::test_update_selector_dict PASSED       [ 96%]
tests/arb/utils/test_web_html.py::test_update_selector_dict_empty_dict PASSED [ 96%]
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option PASSED  [ 96%]
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_custom_item PASSED [ 96%]
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_ensure_first_false PASSED [ 97%]
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_empty_list PASSED [ 97%]
tests/arb/utils/test_web_html.py::test_remove_items_single_string PASSED [ 97%]
tests/arb/utils/test_web_html.py::test_remove_items_list PASSED          [ 97%]
tests/arb/utils/test_web_html.py::test_remove_items_empty_list PASSED    [ 97%]
tests/arb/utils/test_web_html.py::test_remove_items_empty_tuples PASSED  [ 97%]
tests/arb/utils/test_web_html.py::test_remove_items_item_not_found PASSED [ 98%]
tests/arb/utils/test_web_html.py::test_run_diagnostics PASSED            [ 98%]
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid PASSED [ 98%]
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_invalid PASSED [ 98%]
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_none PASSED [ 98%]
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_value_error PASSED [ 98%]
tests/arb/utils/test_wtf_forms_util.py::test_remove_validators_removes_inputrequired PASSED [ 99%]
tests/arb/utils/test_wtf_forms_util.py::test_change_validators_on_test_switches PASSED [ 99%]
tests/arb/utils/test_wtf_forms_util.py::test_change_validators_replaces PASSED [ 99%]
tests/arb/utils/test_wtf_forms_util.py::test_get_wtforms_fields_lists_fields PASSED [ 99%]
tests/arb/utils/test_wtf_forms_util.py::test_model_to_wtform_and_wtform_to_model PASSED [ 99%]
tests/arb/utils/test_wtf_forms_util.py::test_update_model_with_payload_and_get_payloads PASSED [100%]

=============================== warnings summary ===============================
tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:584: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    primary_row = db.session.query(primary_table).get(primary_table_pk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:592: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    foreign_row = db.session.query(foreign_table).get(fk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload
tests/arb/portal/test_file_upload_suite.py::test_landfill_upload
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload
tests/arb/portal/test_file_upload_suite.py::test_energy_upload
tests/arb/portal/test_file_upload_suite.py::test_generic_upload
tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads
tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:592: SAWarning: fully NULL primary key identity cannot load any object.  This condition may raise an error in a future release.
    foreign_row = db.session.query(foreign_table).get(fk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:525: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    row = db.session.query(table).get(id_)  # type: ignore

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plumes.plume_incidence_mapping_collection' will copy column plumes.id_plume to column plume_incidence_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_incidence_mapping_collection,plumes"' to the 'plumes.plume_incidence_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plume_incidence_mapping.plumes' will copy column plumes.id_plume to column plume_incidence_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_incidence_mapping_collection,plumes"' to the 'plume_incidence_mapping.plumes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'incidences.plume_incidence_mapping_collection' will copy column incidences.id_incidence to column plume_incidence_mapping.id_incidence_fk, which conflicts with relationship(s): 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plume_incidence_mapping_collection"' to the 'incidences.plume_incidence_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plume_incidence_mapping.incidences' will copy column incidences.id_incidence to column plume_incidence_mapping.id_incidence_fk, which conflicts with relationship(s): 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plume_incidence_mapping_collection"' to the 'plume_incidence_mapping.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plumes.plume_source_mapping_collection' will copy column plumes.id_plume to column plume_source_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plumes"' to the 'plumes.plume_source_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plume_source_mapping.plumes' will copy column plumes.id_plume to column plume_source_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plumes"' to the 'plume_source_mapping.plumes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'sources.plume_source_mapping_collection' will copy column sources.id_source to column plume_source_mapping.id_source_fk, which conflicts with relationship(s): 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,sources"' to the 'sources.plume_source_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'plume_source_mapping.sources' will copy column sources.id_source to column plume_source_mapping.id_source_fk, which conflicts with relationship(s): 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,sources"' to the 'plume_source_mapping.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:399: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plumes.plume_incidence_mapping_collection' will copy column plumes.id_plume to column plume_incidence_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_incidence_mapping_collection,plume_incidence_mapping_collection,plumes,plumes"' to the 'plumes.plume_incidence_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plume_incidence_mapping.plumes' will copy column plumes.id_plume to column plume_incidence_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_incidence_mapping_collection,plume_incidence_mapping_collection,plumes,plumes"' to the 'plume_incidence_mapping.plumes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'incidences.plume_incidence_mapping_collection' will copy column incidences.id_incidence to column plume_incidence_mapping.id_incidence_fk, which conflicts with relationship(s): 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plume_incidence_mapping_collection,plume_incidence_mapping_collection"' to the 'incidences.plume_incidence_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plume_incidence_mapping.incidences' will copy column incidences.id_incidence to column plume_incidence_mapping.id_incidence_fk, which conflicts with relationship(s): 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plume_incidence_mapping_collection,plume_incidence_mapping_collection"' to the 'plume_incidence_mapping.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plumes.plume_source_mapping_collection' will copy column plumes.id_plume to column plume_source_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plume_source_mapping_collection,plumes,plumes"' to the 'plumes.plume_source_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plume_source_mapping.plumes' will copy column plumes.id_plume to column plume_source_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plume_source_mapping_collection,plumes,plumes"' to the 'plume_source_mapping.plumes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'sources.plume_source_mapping_collection' will copy column sources.id_source to column plume_source_mapping.id_source_fk, which conflicts with relationship(s): 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plume_source_mapping_collection,sources,sources"' to the 'sources.plume_source_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'plume_source_mapping.sources' will copy column sources.id_source to column plume_source_mapping.id_source_fk, which conflicts with relationship(s): 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plume_source_mapping_collection,sources,sources"' to the 'plume_source_mapping.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/theld/code/git_repos/feedback_portal/source/production/arb/portal/routes.py:128: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_delete_route
  /home/theld/miniconda3/envs/mini_conda_02/lib/python3.11/site-packages/flask_sqlalchemy/query.py:30: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    rv = self.get(ident)

tests/arb/utils/test_database.py: 16 warnings
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_database.py:52: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plumes.plume_incidence_mapping_collection' will copy column plumes.id_plume to column plume_incidence_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_incidence_mapping_collection,plume_incidence_mapping_collection,plumes,plumes"' to the 'plumes.plume_incidence_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plume_incidence_mapping.plumes' will copy column plumes.id_plume to column plume_incidence_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plume_incidence_mapping.plumes' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk), 'plumes.plume_incidence_mapping_collection' (copies plumes.id_plume to plume_incidence_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_incidence_mapping_collection,plume_incidence_mapping_collection,plumes,plumes"' to the 'plume_incidence_mapping.plumes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'incidences.plume_incidence_mapping_collection' will copy column incidences.id_incidence to column plume_incidence_mapping.id_incidence_fk, which conflicts with relationship(s): 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plume_incidence_mapping_collection,plume_incidence_mapping_collection"' to the 'incidences.plume_incidence_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plume_incidence_mapping.incidences' will copy column incidences.id_incidence to column plume_incidence_mapping.id_incidence_fk, which conflicts with relationship(s): 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'incidences.plume_incidence_mapping_collection' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk), 'plume_incidence_mapping.incidences' (copies incidences.id_incidence to plume_incidence_mapping.id_incidence_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plume_incidence_mapping_collection,plume_incidence_mapping_collection"' to the 'plume_incidence_mapping.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plumes.plume_source_mapping_collection' will copy column plumes.id_plume to column plume_source_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plume_source_mapping_collection,plumes,plumes"' to the 'plumes.plume_source_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plume_source_mapping.plumes' will copy column plumes.id_plume to column plume_source_mapping.id_plume_fk, which conflicts with relationship(s): 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plume_source_mapping.plumes' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk), 'plumes.plume_source_mapping_collection' (copies plumes.id_plume to plume_source_mapping.id_plume_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plume_source_mapping_collection,plumes,plumes"' to the 'plume_source_mapping.plumes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'sources.plume_source_mapping_collection' will copy column sources.id_source to column plume_source_mapping.id_source_fk, which conflicts with relationship(s): 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plume_source_mapping_collection,sources,sources"' to the 'sources.plume_source_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'plume_source_mapping.sources' will copy column sources.id_source to column plume_source_mapping.id_source_fk, which conflicts with relationship(s): 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'plume_source_mapping.sources' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk), 'sources.plume_source_mapping_collection' (copies sources.id_source to plume_source_mapping.id_source_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_source_mapping_collection,plume_source_mapping_collection,sources,sources"' to the 'plume_source_mapping.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
  /home/theld/code/git_repos/feedback_portal/tests/arb/utils/test_wtf_forms_util.py:80: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    db_session.query(TestModel).filter(TestModel.id_incidence >= 1000000).delete()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================ 578 passed, 18 skipped, 165 warnings in 19.34s ================
