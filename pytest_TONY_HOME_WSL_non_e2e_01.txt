============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- /home/tonyh/miniconda3/envs/mini_conda_02/bin/python
cachedir: .pytest_cache
rootdir: /home/tonyh/git_repos/feedback_portal
configfile: pytest.ini
plugins: base-url-2.1.0, anyio-4.7.0, playwright-0.7.0, asyncio-1.1.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... ✓ Found 14 test files in /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard
✓ Test infrastructure validation passed
collected 1414 items

tests/arb/auth/test_auth_routes.py::test_auth_bp_exists PASSED
tests/arb/auth/test_auth_routes.py::test_login_route SKIPPED (Requir...)
tests/arb/auth/test_auth_routes.py::test_register_route SKIPPED (Req...)
tests/arb/auth/test_auth_routes.py::test_logout_route SKIPPED (Requi...)
tests/arb/auth/test_auth_routes.py::test_password_reset_route SKIPPED
tests/arb/auth/test_email_util.py::test_send_welcome_email_function_signature PASSED
tests/arb/auth/test_email_util.py::test_send_password_reset_email_function_signature PASSED
tests/arb/auth/test_email_util.py::test_send_email_confirmation_function_signature PASSED
tests/arb/auth/test_email_util.py::test_send_welcome_email_with_valid_user SKIPPED
tests/arb/auth/test_email_util.py::test_send_password_reset_email_with_valid_user SKIPPED
tests/arb/auth/test_email_util.py::test_send_email_confirmation_with_valid_user SKIPPED
tests/arb/auth/test_forms.py::test_registration_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_login_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_password_reset_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_forgot_username_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_change_password_form_instantiation PASSED
tests/arb/auth/test_forms.py::test_registration_form_validation SKIPPED
tests/arb/auth/test_forms.py::test_login_form_validation SKIPPED (Re...)
tests/arb/auth/test_forms.py::test_password_reset_form_validation SKIPPED
tests/arb/auth/test_forms.py::test_change_password_form_validation SKIPPED
tests/arb/auth/test_models.py::test_get_user_model_function_signature PASSED
tests/arb/auth/test_models.py::test_get_user_model_returns_model SKIPPED
tests/arb/auth/test_models.py::test_user_model_creation SKIPPED (Req...)
tests/arb/auth/test_models.py::test_user_model_validation SKIPPED (R...)
tests/arb/portal/config/test_accessors.py::test_get_processed_versions_dir PASSED
tests/arb/portal/config/test_accessors.py::test_get_upload_folder PASSED
tests/arb/portal/config/test_accessors.py::test_get_payload_save_dir PASSED
tests/arb/portal/config/test_accessors.py::test_get_app_mode_default PASSED
tests/arb/portal/config/test_accessors.py::test_get_app_mode_custom PASSED
tests/arb/portal/config/test_accessors.py::test_get_database_uri PASSED
tests/arb/portal/config/test_accessors.py::test_missing_config_keys PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_production_via_config_type PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_production_via_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_testing_via_config_type PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_testing_via_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_default PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_empty_strings PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_invalid_values PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_case_insensitive PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_priority_config_type_over_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_mixed_case_environment PASSED
tests/arb/portal/config/test_settings.py::test_base_config_defaults PASSED
tests/arb/portal/config/test_settings.py::test_development_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_production_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_testing_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_env_override_sqlalchemy_database_uri PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_true PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_false PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_not_set PASSED
tests/arb/portal/config/test_settings.py::test_secret_key_from_environment PASSED
tests/arb/portal/config/test_settings.py::test_secret_key_default_when_not_set PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_blueprint_registration PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_blueprint_routes_accessible PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_calls_configure_flask_app PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_config_loading PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_context_globals_available PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_database_initialization_failure PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_database_initialization_success PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_environment_specific_config PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_flask_extensions_initialized PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_has_required_attributes PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_logging_configured PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_multiple_calls_independent PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_returns_flask_instance PASSED
tests/arb/portal/test_app.py::TestCreateApp::test_create_app_uses_config_module PASSED
tests/arb/portal/test_constants.py::TestUIConstants::test_please_select_constant PASSED
tests/arb/portal/test_constants.py::TestUIConstants::test_please_select_immutability PASSED
tests/arb/portal/test_constants.py::TestGeographicBoundaries::test_california_boundaries_validity PASSED
tests/arb/portal/test_constants.py::TestGeographicBoundaries::test_gps_resolution PASSED
tests/arb/portal/test_constants.py::TestGeographicBoundaries::test_latitude_boundaries PASSED
tests/arb/portal/test_constants.py::TestGeographicBoundaries::test_longitude_boundaries PASSED
tests/arb/portal/test_constants.py::TestValidationSchemas::test_latitude_validation_schema PASSED
tests/arb/portal/test_constants.py::TestValidationSchemas::test_longitude_validation_schema PASSED
tests/arb/portal/test_constants.py::TestValidationSchemas::test_validation_schema_consistency PASSED
tests/arb/portal/test_constants.py::TestTimezoneConstants::test_ca_timezone PASSED
tests/arb/portal/test_constants.py::TestTimezoneConstants::test_timezone_compatibility PASSED
tests/arb/portal/test_constants.py::TestTimezoneConstants::test_timezone_immutability PASSED
tests/arb/portal/test_constants.py::TestTimezoneConstants::test_utc_timezone PASSED
tests/arb/portal/test_constants.py::TestDateTimeFormats::test_datetime_format_validity PASSED
tests/arb/portal/test_constants.py::TestDateTimeFormats::test_datetime_with_seconds_format PASSED
tests/arb/portal/test_constants.py::TestDateTimeFormats::test_html_local_time_format PASSED
tests/arb/portal/test_constants.py::TestConstantTypes::test_all_constants_defined PASSED
tests/arb/portal/test_constants.py::TestConstantTypes::test_constant_immutability PASSED
tests/arb/portal/test_constants.py::TestConstantValidation::test_constant_documentation PASSED
tests/arb/portal/test_constants.py::TestConstantValidation::test_geographic_boundaries_logical PASSED
tests/arb/portal/test_constants.py::TestConstantValidation::test_timezone_differences PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_venting_exclusion_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_ogi_performed_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_method21_performed_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_equipment_other_description_conditional PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_component_other_description_conditional PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_ogi_result_requires_method21 PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_timestamp_validation_logic PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_emission_identified_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_lmr_included_conditional_description PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_lmr_planned_conditional_description PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_contingent_dropdown_population PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_cross_field_validation_no_leak_detected PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_cross_field_validation_operator_aware PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_timestamp_validation_logic PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_emission_cause_repeat_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestUploadFormCrossFieldLogic::test_file_type_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestUploadFormCrossFieldLogic::test_file_required_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_regulatory_compliance_across_sectors PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_conditional_field_consistency PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_timestamp_validation_consistency PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_empty_string_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_none_value_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_invalid_choice_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_multiple_conditional_changes PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_conditional_logic_performance PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::test_all_cross_field_logic_scenarios PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_og_dummy_form_data_keys PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_landfill_dummy_form_data_keys PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_og_dummy_form_data_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_landfill_dummy_form_data_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_dummy_data_datetime_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_dummy_data_sector_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_module_level_dropdowns_are_dicts PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_returns_tuple_and_dicts PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_please_select_present PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_tuple_structure PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_deepcopy_immutability PASSED
tests/arb/portal/test_db_hardcoded.py::test_empty_dropdown_edge_case PASSED
tests/arb/portal/test_db_hardcoded.py::test_contingent_dropdown_structure PASSED
tests/arb/portal/test_db_hardcoded.py::test_all_expected_dropdown_keys_present PASSED
tests/arb/portal/test_db_hardcoded.py::test_dropdown_values_not_empty PASSED
tests/arb/portal/test_db_hardcoded.py::test_contingent_dropdown_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_dropdown_data_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_sector_constants_are_lists PASSED
tests/arb/portal/test_db_hardcoded.py::test_logger_is_configured PASSED
tests/arb/portal/test_db_hardcoded.py::test_sector_constants_content PASSED
tests/arb/portal/test_db_hardcoded.py::test_selector_list_to_tuples_matches_canonical SKIPPED
tests/arb/portal/test_extensions.py::TestExtensions::test_csrf_extension_attributes PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_csrf_extension_creation PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_csrf_extension_methods PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_extensions_file_path_logging PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_extensions_geoalchemy2_import PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_extensions_importable PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_extensions_logger_configured PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_extensions_no_circular_imports PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_extensions_not_initialized PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_extensions_singleton_behavior PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_extensions_type_consistency PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_sqlalchemy_extension_attributes PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_sqlalchemy_extension_creation PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_sqlalchemy_extension_methods PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_sqlalchemy_metadata_access PASSED
tests/arb/portal/test_extensions.py::TestExtensions::test_sqlalchemy_session_access PASSED
tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload [DIAG] test_files_path=feedback_forms/testing_versions/standard
[DIAG] os.getcwd()=/home/tonyh/git_repos/feedback_portal
[DIAG] test_files_path absolute=/home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard
[DIAG] test_files_path exists=True
[DIAG] Files in feedback_forms/testing_versions/standard:
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_03_blank.xlsx
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/expected_results
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data_update.xlsx
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_landfill_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_energy_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_generic_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_landfill_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_energy_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_generic_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_field_level_value_assertions [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_database_state_verification [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_invalid_excel_file PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_corrupted_excel_file PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_missing_required_fields PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_negative_validation_errors PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_file_size_limits PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_concurrent_upload_handling [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_malicious_file_handling PASSEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_file_upload_suite.py::test_data_integrity_through_processing_pipeline [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
SKIPPEDWarning: Failed to clean table incidences: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table plumes: The current Flask app is not registered with this 'SQLAlchemy' instance. Did you forget to call 'init_app', or did you create multiple 'SQLAlchemy' instances?
Warning: Failed to clean table sources: type object 'sources' has no attribute 'id_incidence'
Warning: Failed to clean table scenes: type object 'scenes' has no attribute 'id_incidence'

tests/arb/portal/test_globals.py::test_globals_initial_state PASSED
tests/arb/portal/test_globals.py::test_load_drop_downs_sets_globals SKIPPED
tests/arb/portal/test_globals.py::test_load_type_mapping_sets_db_column_types SKIPPED
tests/arb/portal/test_globals.py::test_load_drop_downs_integration PASSED
tests/arb/portal/test_globals.py::test_load_type_mapping_integration PASSED
tests/arb/portal/test_globals.py::test_globals_integration_with_real_data PASSED
tests/arb/portal/test_globals.py::test_globals_persistence_across_calls PASSED
tests/arb/portal/test_in_memory_staging.py::TestUploadProcessingConfig::test_upload_processing_config_defaults PASSED
tests/arb/portal/test_in_memory_staging.py::TestUploadProcessingConfig::test_upload_processing_config_direct_upload PASSED
tests/arb/portal/test_in_memory_staging.py::TestUploadProcessingConfig::test_upload_processing_config_staged_upload PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_in_memory_staging_creation PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_database_success PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_database_validation_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_database_exception PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_staging_file_success PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_staging_file_directory_creation PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_staging_file_permission_error PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadToMemory::test_process_upload_to_memory_success PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadToMemory::test_process_upload_to_memory_save_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadToMemory::test_process_upload_to_memory_conversion_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadToMemory::test_process_upload_to_memory_validation_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadWithConfig::test_process_upload_with_config_direct_upload PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadWithConfig::test_process_upload_with_config_staged_upload PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadWithConfig::test_process_upload_with_config_both_persistence PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadWithConfig::test_process_upload_with_config_memory_processing_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestArchitecturalBenefits::test_perfect_separation_of_concerns PASSED
tests/arb/portal/test_in_memory_staging.py::TestArchitecturalBenefits::test_configuration_driven_behavior PASSED
tests/arb/portal/test_in_memory_staging.py::TestArchitecturalBenefits::test_result_types_provide_type_safety PASSED
tests/arb/portal/test_integration_app.py::test_app_starts PASSED
tests/arb/portal/test_integration_app.py::test_homepage_route PASSED
tests/arb/portal/test_integration_app.py::test_404_route PASSED
tests/arb/portal/test_integration_app.py::test_db_session_creation PASSED
tests/arb/portal/test_integration_app.py::test_error_handling PASSED
tests/arb/portal/test_integration_app.py::test_list_uploads_route PASSED
tests/arb/portal/test_integration_app.py::test_diagnostics_route PASSED
tests/arb/portal/test_integration_app.py::test_portal_updates_route PASSED
tests/arb/portal/test_integration_app.py::test_search_route PASSED
tests/arb/portal/test_integration_app.py::test_show_log_file_route PASSED
tests/arb/portal/test_integration_app.py::test_og_incidence_create_route PASSED
tests/arb/portal/test_integration_app.py::test_landfill_incidence_create_route PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_basic PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_no_changes PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_filter_paths PASSED
tests/arb/portal/test_result_types.py::TestStagingResult::test_staging_result_creation PASSED
tests/arb/portal/test_result_types.py::TestStagingResult::test_staging_result_error_case PASSED
tests/arb/portal/test_result_types.py::TestStagingResult::test_staging_result_immutability PASSED
tests/arb/portal/test_result_types.py::TestUploadResult::test_upload_result_creation PASSED
tests/arb/portal/test_result_types.py::TestUploadResult::test_upload_result_error_case PASSED
tests/arb/portal/test_result_types.py::TestUploadResult::test_upload_result_immutability PASSED
tests/arb/portal/test_result_types.py::TestResultTypesModule::test_module_import PASSED
tests/arb/portal/test_result_types.py::TestResultTypesModule::test_result_types_documentation PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_get_request_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_get_request_with_message_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_post_no_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_post_empty_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_post_invalid_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_success_case_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_refactored_route_specific_error_handling PASSED
tests/arb/portal/test_route_equivalence.py::TestRefactoredRouteImprovements::test_refactored_route_uses_staging_result PASSED
tests/arb/portal/test_route_equivalence.py::TestRefactoredRouteImprovements::test_refactored_route_specific_error_types PASSED
tests/arb/portal/test_route_equivalence.py::TestRefactoredRouteImprovements::test_refactored_route_exception_handling PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_accessible PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_get_request_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_get_request_with_message_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_post_no_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_post_empty_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_post_invalid_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_success_case_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRefactoredRouteImprovements::test_refactored_route_uses_upload_result PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRefactoredRouteImprovements::test_refactored_route_specific_error_types PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRefactoredRouteImprovements::test_refactored_route_exception_handling PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteNavigation::test_refactored_upload_route_accessible PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteNavigation::test_refactored_upload_route_in_navigation PASSED
tests/arb/portal/test_route_equivalence.py::test_route_function_signatures PASSED
tests/arb/portal/test_route_upload_helpers.py::TestValidateUploadRequest::test_validate_upload_request_with_valid_file PASSED
tests/arb/portal/test_route_upload_helpers.py::TestValidateUploadRequest::test_validate_upload_request_with_no_file PASSED
tests/arb/portal/test_route_upload_helpers.py::TestValidateUploadRequest::test_validate_upload_request_with_empty_filename PASSED
tests/arb/portal/test_route_upload_helpers.py::TestValidateUploadRequest::test_validate_upload_request_with_none_filename PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_missing_id PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_conversion_failed PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_file_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_database_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_unknown_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetSuccessMessageForUpload::test_get_success_message_for_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetSuccessMessageForUpload::test_get_success_message_for_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadForm::test_render_upload_form_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadForm::test_render_upload_form_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadError::test_render_upload_error_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadError::test_render_upload_error_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_with_missing_id PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_with_conversion_failed PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_with_file_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_with_diagnostic_func PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_without_diagnostic_func PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_with_diagnostic_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_with_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_with_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_with_default_upload_type PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_with_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_with_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_with_default_upload_type PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadSuccessPage::test_render_upload_success_page_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadSuccessPage::test_render_upload_success_page_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadSuccessPage::test_render_upload_success_page_with_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadSuccessPage::test_render_upload_success_page_with_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_with_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_with_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_with_error_details PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_route_function_signature PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_get_request PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_success PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_missing_id_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_conversion_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_file_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_database_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_unknown_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_no_file_selected PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_with_message_parameter PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_exception_handling PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_route_function_signature PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_get_request PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_success PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_missing_id_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_conversion_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_file_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_database_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_unknown_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_no_file_selected PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_with_message_parameter PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_exception_handling PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route PASSED
tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_landfill_incidence_create_route PASSED
tests/arb/portal/test_routes_integration.py::test_landfill_incidence_create_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_delete_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_delete_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_list_uploads_route PASSED
tests/arb/portal/test_routes_integration.py::test_list_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_get_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_no_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_empty_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_invalid_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_get_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_no_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_empty_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_invalid_file PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post_empty_search PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post_no_search_param PASSED
tests/arb/portal/test_routes_integration.py::test_diagnostics_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_dropdown_dict_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_database_structure_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_feedback_form_structure_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_log_file_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_filters PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_sorting PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route_with_filters PASSED
tests/arb/portal/test_routes_integration.py::test_review_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_review_staged_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_confirm_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_confirm_staged_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_apply_staged_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_apply_staged_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_serve_file_route PASSED
tests/arb/portal/test_routes_integration.py::test_serve_file_route_invalid_filename PASSED
tests/arb/portal/test_routes_integration.py::test_index_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_multiple_rows_error PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_exception_handling PASSED
tests/arb/portal/test_routes_integration.py::test_upload_staged_route_exception_handling PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_with_special_characters_in_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_staged_route_with_special_characters_in_message PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_pagination PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_sorting PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_get_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_post_no_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_post_empty_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_post_invalid_file PASSED
tests/arb/portal/test_sqla_models.py::test_uploaded_file_repr PASSED
tests/arb/portal/test_sqla_models.py::test_portal_update_repr PASSED
tests/arb/portal/test_sqla_models.py::test_run_diagnostics_success PASSED
tests/arb/portal/test_sqla_models.py::test_run_diagnostics_db_error PASSED
tests/arb/portal/test_sqla_models.py::test_uploaded_file_integration PASSED
tests/arb/portal/test_sqla_models.py::test_portal_update_integration PASSED
tests/arb/portal/test_startup_db_integration.py::test_db_create_creates_tables PASSED
tests/arb/portal/test_startup_db_integration.py::test_db_initialize_and_create_runs PASSED
tests/arb/portal/test_startup_flask.py::test_configure_flask_app_can_be_called PASSED
tests/arb/portal/test_startup_flask.py::test_configure_flask_app_returns_none PASSED
tests/arb/portal/test_startup_flask.py::test_upload_configuration_applied PASSED
tests/arb/portal/test_startup_flask.py::test_upload_configuration_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_configuration_applied PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_undefined_behavior_set PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_globals_applied PASSED
tests/arb/portal/test_startup_flask.py::test_california_timezone_is_zoneinfo PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_applied PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_are_correct_functions PASSED
tests/arb/portal/test_startup_flask.py::test_logging_level_set_from_config PASSED
tests/arb/portal/test_startup_flask.py::test_logging_level_defaults_to_info PASSED
tests/arb/portal/test_startup_flask.py::test_werkzeug_logging_disabled PASSED
tests/arb/portal/test_startup_flask.py::test_werkzeug_logging_disabled_affects_global PASSED
tests/arb/portal/test_startup_flask.py::test_app_name_global_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_california_tz_global_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_overwrite_existing PASSED
tests/arb/portal/test_startup_flask.py::test_configuration_is_idempotent PASSED
tests/arb/portal/test_startup_flask.py::test_all_jinja_settings_configured PASSED
tests/arb/portal/test_startup_flask.py::test_all_app_config_settings_configured PASSED
tests/arb/portal/test_startup_flask.py::test_logging_debug_messages_emitted PASSED
tests/arb/portal/test_startup_flask.py::test_upload_path_is_valid_directory PASSED
tests/arb/portal/test_startup_flask.py::test_max_content_length_is_reasonable PASSED
tests/arb/portal/test_startup_flask.py::test_function_accepts_flask_app_instance PASSED
tests/arb/portal/test_startup_flask.py::test_function_modifies_app_in_place PASSED
tests/arb/portal/test_startup_runtime_info.py::test_platform_constants_defined PASSED
tests/arb/portal/test_startup_runtime_info.py::test_platform_detection_logic PASSED
tests/arb/portal/test_startup_runtime_info.py::test_path_constants_defined_and_types PASSED
tests/arb/portal/test_startup_runtime_info.py::test_path_structure PASSED
tests/arb/portal/test_startup_runtime_info.py::test_required_directories_exist PASSED
tests/arb/portal/test_startup_runtime_info.py::test_directory_creation_idempotent PASSED
tests/arb/portal/test_startup_runtime_info.py::test_print_runtime_diagnostics_logs_all PASSED
tests/arb/portal/test_startup_runtime_info.py::test_print_runtime_diagnostics_multiple_calls PASSED
tests/arb/portal/test_startup_runtime_info.py::test_log_file_path_is_file PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUploadAndProcessFileUnified::test_upload_and_process_file_unified_success PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUploadAndProcessFileUnified::test_upload_and_process_file_unified_failure PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUploadAndProcessFileUnified::test_upload_and_process_file_unified_configuration PASSED
tests/arb/portal/test_unified_upload_functions.py::TestStageUploadedFileForReviewUnified::test_stage_uploaded_file_for_review_unified_success PASSED
tests/arb/portal/test_unified_upload_functions.py::TestStageUploadedFileForReviewUnified::test_stage_uploaded_file_for_review_unified_failure PASSED
tests/arb/portal/test_unified_upload_functions.py::TestStageUploadedFileForReviewUnified::test_stage_uploaded_file_for_review_unified_configuration PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUnifiedFunctionEquivalence::test_function_signatures_match PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUnifiedFunctionEquivalence::test_return_types_match PASSED
tests/arb/portal/test_unified_upload_functions.py::TestArchitecturalBenefits::test_code_duplication_elimination PASSED
tests/arb/portal/test_unified_upload_functions.py::TestArchitecturalBenefits::test_configuration_driven_behavior PASSED
tests/arb/portal/test_unified_upload_functions.py::TestArchitecturalBenefits::test_single_point_of_maintenance PASSED
tests/arb/portal/test_unified_upload_functions.py::TestPerformanceAndMemoryUsage::test_memory_efficiency PASSED
tests/arb/portal/test_unified_upload_functions.py::TestPerformanceAndMemoryUsage::test_reduced_code_paths PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_with_valid_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_with_custom_tab_name PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_tab PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_tab_contents PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_sector PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_xl_dict_to_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_xl_dict_to_database_with_mock_db PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_empty_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_with_mock_components PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_new_row_backfill PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_json_file_to_db_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_json_file_to_db_with_mock_components PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_update_db_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_stage_only_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_excel_to_json_if_valid_with_excel_file PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_excel_to_json_if_valid_with_non_excel_file PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_sector_from_json PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_sector_from_json_missing_sector PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_store_staged_payload PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_all_functions_exist PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_payload_for_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_payload_for_database_with_valid_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_payload_for_database_with_empty_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_payload_for_database_with_none_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_resolve_database_row_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_resolve_database_row_with_existing_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_resolve_database_row_with_new_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_update_model_with_payload_and_commit_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_update_model_with_payload_and_commit_with_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_update_model_with_payload_and_commit_without_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_primary_key_from_model_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_primary_key_from_model_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_primary_key_from_model_missing_attribute PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_uses_smaller_functions PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_equivalent_to_original PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_with_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_named_tuple PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_error_case PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_missing PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_invalid PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_file_error PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_conversion_failed PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_missing_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_database_error PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_file_error PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_conversion_failed PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_missing_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_database_error PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_equivalent_to_original PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_with_result_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_with_result_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_with_result_missing_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_with_result_invalid_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_with_result_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_with_result_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_new_helper_functions_use_result_types PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_new_helper_functions_equivalent_to_original PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_function_signature PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_retrieves_existing_row PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_when_id_provided_but_not_found PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_with_auto_generated_id PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_adds_to_session_when_requested PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_does_not_add_to_session_by_default PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_handles_commit_failure PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_raises_error_for_invalid_table PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_uses_custom_primary_key PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_with_custom_primary_key PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_logs_detailed_diagnostics PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_handles_attribute_error_gracefully PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_session_state_tracking PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_default_parameters PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_returns_correct_tuple_structure PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_function_signature PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_valid_data PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_path_object PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_none_status_and_description PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_default_parameters PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_raises_error_for_none_filename PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_handles_commit_failure PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_logs_debug_messages PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_empty_strings PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_unicode_filename PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_long_description PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_returns_none PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_creates_audit_record PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_special_characters PASSED
tests/arb/portal/test_utils_form_mapper.py::test_apply_portal_update_filters_function_signature PASSED
tests/arb/portal/test_utils_form_mapper.py::test_no_filters_returns_original_query PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_key_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_user_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_comments_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_exact_and_range PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_empty_and_invalid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_open_ended PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_spaces_and_commas PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_valid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_invalid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_missing PASSED
tests/arb/portal/test_utils_form_mapper.py::test_combined_filters_all_types PASSED
tests/arb/portal/test_utils_form_mapper.py::test_apply_portal_update_filters_handles_missing_args PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_normalize_label_basic_functionality PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_normalize_label_empty_string PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_normalize_label_non_string_input PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_normalize_label_none_input PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_normalize_label_with_multiple_whitespace PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_normalize_label_with_newlines PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_pad_label_basic_functionality PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_pad_label_default_width PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_pad_label_exact_width PASSED
tests/arb/portal/test_utils_import_audit.py::TestUtilityFunctions::test_pad_label_longer_than_width PASSED
tests/arb/portal/test_utils_import_audit.py::TestHeaderFormatting::test_format_header_basic_functionality PASSED
tests/arb/portal/test_utils_import_audit.py::TestHeaderFormatting::test_format_header_empty_metadata PASSED
tests/arb/portal/test_utils_import_audit.py::TestHeaderFormatting::test_format_header_metadata_extraction PASSED
tests/arb/portal/test_utils_import_audit.py::TestHeaderFormatting::test_format_header_missing_keys PASSED
tests/arb/portal/test_utils_import_audit.py::TestHeaderFormatting::test_format_header_schema_extraction PASSED
tests/arb/portal/test_utils_import_audit.py::TestHeaderFormatting::test_format_header_with_route PASSED
tests/arb/portal/test_utils_import_audit.py::TestTypeConversion::test_try_type_conversion_already_correct_type PASSED
tests/arb/portal/test_utils_import_audit.py::TestTypeConversion::test_try_type_conversion_empty_string PASSED
tests/arb/portal/test_utils_import_audit.py::TestTypeConversion::test_try_type_conversion_failure PASSED
tests/arb/portal/test_utils_import_audit.py::TestTypeConversion::test_try_type_conversion_float_to_int PASSED
tests/arb/portal/test_utils_import_audit.py::TestTypeConversion::test_try_type_conversion_none_value PASSED
tests/arb/portal/test_utils_import_audit.py::TestTypeConversion::test_try_type_conversion_string_to_string PASSED
tests/arb/portal/test_utils_import_audit.py::TestTypeConversion::test_try_type_conversion_success PASSED
tests/arb/portal/test_utils_import_audit.py::TestEdgeCases::test_format_header_none_values PASSED
tests/arb/portal/test_utils_import_audit.py::TestEdgeCases::test_normalize_label_very_long_string PASSED
tests/arb/portal/test_utils_import_audit.py::TestEdgeCases::test_pad_label_negative_width PASSED
tests/arb/portal/test_utils_import_audit.py::TestEdgeCases::test_pad_label_zero_width PASSED
tests/arb/portal/test_utils_import_audit.py::TestEdgeCases::test_try_type_conversion_complex_types PASSED
tests/arb/portal/test_utils_import_audit.py::TestEdgeCases::test_try_type_conversion_unsupported_types PASSED
tests/arb/portal/test_utils_import_audit.py::TestIntegration::test_format_header_with_utility_functions PASSED
tests/arb/portal/test_utils_import_audit.py::TestIntegration::test_pad_label_and_normalize_integration PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_assertion_helpers PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_browser_configuration PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_configuration_functions PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_environment_setup PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_error_handling PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_import_available PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_import_consistency PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_module_file_path PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_module_importable PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_module_logging PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_module_structure PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_page_utilities PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_screenshot_utilities PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_test_data_utilities PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_utility_functions_documentation PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_utility_functions_error_handling PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_utility_functions_importable PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_utility_functions_memory_usage PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_utility_functions_no_circular_imports PASSED
tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_utility_functions_performance PASSED
tests/arb/portal/test_utils_route_util.py::test_incidence_prep_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_with_data PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_empty_data PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_success PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_no_file PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_file_not_saved PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_success PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_upload_failure PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_default PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_custom PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_with_id_extraction PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_with_all_parameters PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_empty_details PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_none_misc_json PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_success PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_metadata PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_sector PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_tab PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_json_priority PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_foreign_key_fallback PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_both_none_raises PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_mismatch_logs_error PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_oil_and_gas PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_landfill PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_unsupported PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_success PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_missing_misc_json PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_conflicting_sectors PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_landfill.py::test_required_fields_present PASSED
tests/arb/portal/test_wtf_landfill.py::test_optional_fields_present PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_email_format PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_phone_regex PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_number_ranges PASSED
tests/arb/portal/test_wtf_landfill.py::test_update_contingent_selectors PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_emission_identified PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_no_emission_identified PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_lmr_included PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_lmr_planned PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_validation_with_valid_data PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_validation_with_invalid_data PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_choices_initialization PASSED
tests/arb/portal/test_wtf_landfill.py::test_cross_field_validation_emission_identified_flow PASSED
tests/arb/portal/test_wtf_landfill.py::test_cross_field_validation_no_emission_identified_flow PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_required_fields_present PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_optional_fields_present PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_venting_responses_constant PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_unintentional_leak_constant PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_email_format PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_phone_regex PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_number_ranges PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_dropdown_choices_populated PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_venting_exclusion PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_ogi_performed PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_method21_performed PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_equipment_other PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_component_other PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_update_contingent_selectors_noop PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_validation_with_valid_data PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_validation_with_invalid_data PASSED
tests/arb/portal/test_wtf_upload.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_upload.py::test_file_field_present PASSED
tests/arb/portal/test_wtf_upload.py::test_submit_field_present PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_valid_excel_file PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_invalid_file_type PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_without_file PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_empty_filename PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_excel_patterns PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_json_patterns PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_iso_format PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_date_format PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_excel_internal PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_file_timestamps PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_mixed_content PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_no_timestamps PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_non_string_input PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestNormalizeTimestamps::test_normalize_timestamps_empty_string PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateStructure::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateStructure::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateStructure::test_validate_structure_valid_result PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateStructure::test_validate_structure_missing_keys PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateStructure::test_validate_structure_extra_keys PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateStructure::test_validate_structure_invalid_types PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateStructure::test_validate_structure_empty_sections PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateStructure::test_validate_structure_non_dict_input PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareMetadata::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareMetadata::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareMetadata::test_compare_metadata_identical PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareMetadata::test_compare_metadata_missing_fields PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareMetadata::test_compare_metadata_extra_fields PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareMetadata::test_compare_metadata_different_values is_equivalent: True
differences: []
PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareMetadata::test_compare_metadata_with_timestamps is_equivalent: True
differences: []
PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareMetadata::test_compare_metadata_empty_metadata PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareSchemas::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareSchemas::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareSchemas::test_compare_schemas_identical PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareSchemas::test_compare_schemas_missing_tabs PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareSchemas::test_compare_schemas_extra_tabs PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareSchemas::test_compare_schemas_different_values PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareTabContents::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareTabContents::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareTabContents::test_compare_tab_contents_identical PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareTabContents::test_compare_tab_contents_missing_tabs PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareTabContents::test_compare_tab_contents_missing_fields PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareTabContents::test_compare_tab_contents_different_values PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareTabContents::test_compare_tab_contents_invalid_tab_content PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelFileIntegrity::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelFileIntegrity::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelFileIntegrity::test_validate_excel_file_integrity_nonexistent_file PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelFileIntegrity::test_validate_excel_file_integrity_invalid_extension PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelFileIntegrity::test_validate_excel_file_integrity_valid_xlsx PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelFileIntegrity::test_validate_excel_file_integrity_missing_required_files PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareExcelResults::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareExcelResults::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareExcelResults::test_compare_excel_results_success PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestCompareExcelResults::test_compare_excel_results_load_error PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestFindCorrespondingExpectedResult::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestFindCorrespondingExpectedResult::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestFindCorrespondingExpectedResult::test_find_corresponding_expected_result_success PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestFindCorrespondingExpectedResult::test_find_corresponding_expected_result_not_found PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestFindCorrespondingExpectedResult::test_find_corresponding_expected_result_nonexistent_dir PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestGenerateComparisonReport::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestGenerateComparisonReport::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestGenerateComparisonReport::test_generate_comparison_report_success PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestGenerateComparisonReport::test_generate_comparison_report_with_differences PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelSchemaStructure::test_function_exists PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelSchemaStructure::test_function_signature PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelSchemaStructure::test_validate_excel_schema_structure_valid PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelSchemaStructure::test_validate_excel_schema_structure_missing_schema_key PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelSchemaStructure::test_validate_excel_schema_structure_missing_required_attrs PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestValidateExcelSchemaStructure::test_validate_excel_schema_structure_invalid_address_format PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestIntegration::test_end_to_end_validation_workflow PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestIntegration::test_error_handling_workflow PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestEdgeCases::test_empty_metadata_comparison PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestEdgeCases::test_none_values_in_metadata PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestEdgeCases::test_large_schema_validation PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestEdgeCases::test_malformed_json_handling PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestPerformance::test_large_metadata_comparison PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestPerformance::test_large_tab_contents_comparison PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestDocumentation::test_function_docstrings PASSED
tests/arb/utils/excel/test_excel_content_validator.py::TestDocumentation::test_class_docstrings PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_function_existence PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_function_signatures PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_function_documentation_equivalence PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_parse_xl_file_with_good_data ✅ Successfully parsed landfill_operator_feedback_v071_test_01_good_data.xlsx with both functions
✅ Both results match expected output exactly
✅ Results have consistent structure with 3 keys
PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_parse_xl_file_with_bad_data PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_parse_xl_file_with_blank_file PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_extract_tabs_equivalence PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_get_spreadsheet_key_value_pairs_equivalence PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestFunctionBehaviorEquivalence::test_empty_input_handling PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestFunctionBehaviorEquivalence::test_none_input_handling PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestFunctionBehaviorEquivalence::test_invalid_schema_handling PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestPerformanceEquivalence::test_parse_xl_file_performance PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestPerformanceEquivalence::test_extract_tabs_performance PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestErrorHandlingEquivalence::test_file_not_found_handling PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestErrorHandlingEquivalence::test_corrupted_file_handling PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestErrorHandlingEquivalence::test_memory_error_handling PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestEdgeCaseEquivalence::test_very_large_files PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestEdgeCaseEquivalence::test_unicode_handling PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestEdgeCaseEquivalence::test_special_characters_handling PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestIntegrationEquivalence::test_end_to_end_workflow_equivalence PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestIntegrationEquivalence::test_function_chain_equivalence PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelContentValidation::test_all_feedback_form_types SKIPPED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestComprehensiveEquivalence::test_all_function_combinations PASSED
tests/arb/utils/excel/test_excel_functional_equivalence.py::TestComprehensiveEquivalence::test_edge_case_combinations PASSED
tests/arb/utils/excel/test_minimal.py::test_hello_world hello world
PASSED
tests/arb/utils/excel/test_minimal.py::test_import_xl_create Testing import of xl_create module...
Successfully imported xl_create module
PASSED
tests/arb/utils/excel/test_xl_create.py::TestSortXlSchema::test_sort_xl_schema_by_variable_name PASSED
tests/arb/utils/excel/test_xl_create.py::TestSortXlSchema::test_sort_xl_schema_by_label_address PASSED
tests/arb/utils/excel/test_xl_create.py::TestSortXlSchema::test_sort_xl_schema_invalid_sort_by PASSED
tests/arb/utils/excel/test_xl_create.py::TestSortXlSchema::test_sort_xl_schema_empty_schema PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToJsonFile::test_schema_to_json_file_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToJsonFile::test_schema_to_json_file_no_filename PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToJsonFile::test_schema_to_json_file_with_custom_filename PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToJsonFile::test_schema_to_json_file_comparison_failure PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToJsonFile::test_schema_to_json_file_with_complex_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchema::test_update_vba_schema_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchema::test_update_vba_schema_with_complex_schema PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchema::test_update_vba_schema_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchema::test_update_vba_schema_with_empty_schema PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchemas::test_update_vba_schemas_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchemas::test_update_vba_schemas_with_specific_schemas PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchemas::test_update_vba_schemas_with_empty_schemas PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchemas::test_update_vba_schemas_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateVbaSchemas::test_update_vba_schemas_with_mixed_schemas PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultDict::test_schema_to_default_dict_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultDict::test_schema_to_default_dict_with_complex_schema PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultDict::test_schema_to_default_dict_with_missing_defaults PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultDict::test_schema_to_default_dict_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultDict::test_schema_to_default_dict_with_empty_schema PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultJson::test_schema_to_default_json_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultJson::test_schema_to_default_json_with_custom_output_file PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultJson::test_schema_to_default_json_with_complex_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultJson::test_schema_to_default_json_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestSchemaToDefaultJson::test_schema_to_default_json_with_empty_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsx::test_update_xlsx_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsx::test_update_xlsx_with_complex_jinja_templates PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsx::test_update_xlsx_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsxPayloads::test_update_xlsx_payloads_single PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsxPayloads::test_update_xlsx_payloads_multiple PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsxPayloads::test_update_xlsx_payloads_with_file_payloads PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsxPayloads::test_update_xlsx_payloads_with_mixed_payloads PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsxPayloads::test_update_xlsx_payloads_with_overlapping_keys PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsxPayloads::test_update_xlsx_payloads_with_empty_payloads PASSED
tests/arb/utils/excel/test_xl_create.py::TestUpdateXlsxPayloads::test_update_xlsx_payloads_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestPrepXlTemplates::test_prep_xl_templates_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestPrepXlTemplates::test_prep_xl_templates_with_missing_files PASSED
tests/arb/utils/excel/test_xl_create.py::TestPrepXlTemplates::test_prep_xl_templates_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateDefaultTypesSchema::test_create_default_types_schema_basic PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateDefaultTypesSchema::test_create_default_types_schema_with_complex_types PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateDefaultTypesSchema::test_create_default_types_schema_with_empty_types PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateDefaultTypesSchema::test_create_default_types_schema_with_diagnostics_logging PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateDefaultTypesSchema::test_create_default_types_schema_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateDefaultTypesSchema::test_create_default_types_schema_sorting PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayload::test_create_payload_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayload::test_create_payload_no_metadata PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayload::test_create_payload_with_complex_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayload::test_create_payload_with_various_data_types PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayload::test_create_payload_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayload::test_create_payload_with_empty_payload PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayloads::test_create_payloads_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayloads::test_create_payloads_with_specific_templates PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreatePayloads::test_create_payloads_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlCreateIntegration::test_schema_workflow_integration PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlCreateIntegration::test_error_handling_integration PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlCreateIntegration::test_schema_edge_cases_integration PASSED
tests/arb/utils/excel/test_xl_create.py::TestRunDiagnostics::test_run_diagnostics_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestRunDiagnostics::test_run_diagnostics_with_schema_error PASSED
tests/arb/utils/excel/test_xl_create.py::TestRunDiagnostics::test_run_diagnostics_with_template_error PASSED
tests/arb/utils/excel/test_xl_create.py::TestRunDiagnostics::test_run_diagnostics_with_payload_error PASSED
tests/arb/utils/excel/test_xl_create.py::TestRunDiagnostics::test_run_diagnostics_with_excel_error PASSED
tests/arb/utils/excel/test_xl_create.py::TestRunDiagnostics::test_run_diagnostics_logging_sequence PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateSchemasAndPayloads::test_create_schemas_and_payloads_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateSchemasAndPayloads::test_create_schemas_and_payloads_with_schema_error PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateSchemasAndPayloads::test_create_schemas_and_payloads_with_template_error PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateSchemasAndPayloads::test_create_schemas_and_payloads_with_payload_error PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateSchemasAndPayloads::test_create_schemas_and_payloads_with_excel_error PASSED
tests/arb/utils/excel/test_xl_create.py::TestCreateSchemasAndPayloads::test_create_schemas_and_payloads_directory_creation PASSED
tests/arb/utils/excel/test_xl_create.py::TestDiagUpdateXlsxPayloads01::test_diag_update_xlsx_payloads_01_success PASSED
tests/arb/utils/excel/test_xl_create.py::TestDiagUpdateXlsxPayloads01::test_diag_update_xlsx_payloads_01_with_single_template PASSED
tests/arb/utils/excel/test_xl_create.py::TestDiagUpdateXlsxPayloads01::test_diag_update_xlsx_payloads_01_with_empty_templates PASSED
tests/arb/utils/excel/test_xl_create.py::TestDiagUpdateXlsxPayloads01::test_diag_update_xlsx_payloads_01_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestDiagUpdateXlsxPayloads01::test_diag_update_xlsx_payloads_01_template_structure PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureKeyValuePair::test_ensure_key_value_pair_with_valid_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureKeyValuePair::test_ensure_key_value_pair_with_invalid_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureKeyValuePair::test_ensure_key_value_pair_with_nested_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureKeyValuePair::test_ensure_key_value_pair_with_various_types PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureDirExists::test_ensure_dir_exists_with_new_directory PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureDirExists::test_ensure_dir_exists_with_existing_directory PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureDirExists::test_ensure_dir_exists_with_file_path PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureDirExists::test_ensure_dir_exists_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureParentDirs::test_ensure_parent_dirs_with_file_path PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureParentDirs::test_ensure_parent_dirs_with_directory_path PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureParentDirs::test_ensure_parent_dirs_with_existing_parents PASSED
tests/arb/utils/excel/test_xl_create.py::TestEnsureParentDirs::test_ensure_parent_dirs_with_root_path PASSED
tests/arb/utils/excel/test_xl_create.py::TestCompareJsonFiles::test_compare_json_files_with_identical_files PASSED
tests/arb/utils/excel/test_xl_create.py::TestCompareJsonFiles::test_compare_json_files_with_different_files PASSED
tests/arb/utils/excel/test_xl_create.py::TestCompareJsonFiles::test_compare_json_files_with_nested_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestCompareJsonFiles::test_compare_json_files_with_metadata_differences PASSED
tests/arb/utils/excel/test_xl_create.py::TestCompareJsonFiles::test_compare_json_files_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestCompareJsonFiles::test_compare_json_files_with_empty_files PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonLoad::test_json_load_with_valid_file PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonLoad::test_json_load_with_invalid_json PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonLoad::test_json_load_with_file_not_found PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonLoad::test_json_load_with_complex_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonLoadWithMeta::test_json_load_with_meta_with_valid_file PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonLoadWithMeta::test_json_load_with_meta_without_metadata PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonLoadWithMeta::test_json_load_with_meta_with_invalid_json PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonLoadWithMeta::test_json_load_with_meta_with_file_not_found PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonSaveWithMeta::test_json_save_with_meta_with_data_and_metadata PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonSaveWithMeta::test_json_save_with_meta_without_metadata PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonSaveWithMeta::test_json_save_with_meta_with_complex_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonSaveWithMeta::test_json_save_with_meta_with_empty_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonSaveWithMeta::test_json_save_with_meta_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonSaveWithMeta::test_json_save_with_meta_file_structure PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetNestedValue::test_get_nested_value_with_single_key PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetNestedValue::test_get_nested_value_with_nested_keys PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetNestedValue::test_get_nested_value_with_missing_keys PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetNestedValue::test_get_nested_value_with_empty_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetNestedValue::test_get_nested_value_with_various_types PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetNestedValue::test_get_nested_value_with_list_indices PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetNestedValue::test_get_nested_value_edge_cases PASSED
tests/arb/utils/excel/test_xl_create.py::TestPleaseSelectConstant::test_please_select_constant_value PASSED
tests/arb/utils/excel/test_xl_create.py::TestPleaseSelectConstant::test_please_select_constant_usage PASSED
tests/arb/utils/excel/test_xl_create.py::TestPleaseSelectConstant::test_please_select_constant_immutability PASSED
tests/arb/utils/excel/test_xl_create.py::TestExcelTemplatesConstant::test_excel_templates_constant_structure PASSED
tests/arb/utils/excel/test_xl_create.py::TestExcelTemplatesConstant::test_excel_templates_constant_content PASSED
tests/arb/utils/excel/test_xl_create.py::TestExcelTemplatesConstant::test_excel_templates_constant_uniqueness PASSED
tests/arb/utils/excel/test_xl_create.py::TestExcelTemplatesConstant::test_excel_templates_constant_format PASSED
tests/arb/utils/excel/test_xl_create.py::TestExcelTemplatesConstant::test_excel_templates_constant_usage PASSED
tests/arb/utils/excel/test_xl_create.py::TestFileStructureConstants::test_project_root_constant PASSED
tests/arb/utils/excel/test_xl_create.py::TestFileStructureConstants::test_processed_versions_constant PASSED
tests/arb/utils/excel/test_xl_create.py::TestFileStructureConstants::test_feedback_forms_constant PASSED
tests/arb/utils/excel/test_xl_create.py::TestFileStructureConstants::test_current_versions_constant PASSED
tests/arb/utils/excel/test_xl_create.py::TestFileStructureConstants::test_file_structure_hierarchy PASSED
tests/arb/utils/excel/test_xl_create.py::TestFileStructureConstants::test_file_structure_paths_exist PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlAddressSort::test_xl_address_sort_with_valid_addresses PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlAddressSort::test_xl_address_sort_with_different_address_locations PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlAddressSort::test_xl_address_sort_with_nested_sub_keys PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlAddressSort::test_xl_address_sort_with_invalid_addresses PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlAddressSort::test_xl_address_sort_with_invalid_parameters PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlAddressSort::test_xl_address_sort_edge_cases PASSED
tests/arb/utils/excel/test_xl_create.py::TestXlAddressSort::test_xl_address_sort_with_double_column_addresses PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetExcelRowColumn::test_get_excel_row_column_with_valid_addresses PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetExcelRowColumn::test_get_excel_row_column_with_single_column_addresses PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetExcelRowColumn::test_get_excel_row_column_with_double_column_addresses PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetExcelRowColumn::test_get_excel_row_column_with_large_row_numbers PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetExcelRowColumn::test_get_excel_row_column_with_invalid_addresses PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetExcelRowColumn::test_get_excel_row_column_edge_cases PASSED
tests/arb/utils/excel/test_xl_create.py::TestGetExcelRowColumn::test_get_excel_row_column_column_ordering PASSED
tests/arb/utils/excel/test_xl_create.py::TestJinja2Import::test_jinja2_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestJinja2Import::test_jinja2_template_rendering PASSED
tests/arb/utils/excel/test_xl_create.py::TestJinja2Import::test_jinja2_conditional_logic PASSED
tests/arb/utils/excel/test_xl_create.py::TestJinja2Import::test_jinja2_loops PASSED
tests/arb/utils/excel/test_xl_create.py::TestZipfileImport::test_zipfile_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestZipfileImport::test_zipfile_basic_functionality PASSED
tests/arb/utils/excel/test_xl_create.py::TestZipfileImport::test_zipfile_context_manager PASSED
tests/arb/utils/excel/test_xl_create.py::TestShutilImport::test_shutil_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestShutilImport::test_shutil_copy_functionality PASSED
tests/arb/utils/excel/test_xl_create.py::TestShutilImport::test_shutil_copy_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestFunctoolsPartial::test_functools_partial_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestFunctoolsPartial::test_partial_basic_functionality PASSED
tests/arb/utils/excel/test_xl_create.py::TestFunctoolsPartial::test_partial_with_multiple_fixed_args PASSED
tests/arb/utils/excel/test_xl_create.py::TestFunctoolsPartial::test_partial_with_keyword_arguments PASSED
tests/arb/utils/excel/test_xl_create.py::TestFunctoolsPartial::test_partial_in_sorting_context PASSED
tests/arb/utils/excel/test_xl_create.py::TestLoggingImport::test_logging_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestLoggingImport::test_logging_getlogger PASSED
tests/arb/utils/excel/test_xl_create.py::TestLoggingImport::test_logging_levels PASSED
tests/arb/utils/excel/test_xl_create.py::TestLoggingImport::test_logging_basic_config PASSED
tests/arb/utils/excel/test_xl_create.py::TestSysImport::test_sys_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestSysImport::test_sys_version PASSED
tests/arb/utils/excel/test_xl_create.py::TestSysImport::test_sys_platform PASSED
tests/arb/utils/excel/test_xl_create.py::TestSysImport::test_sys_path PASSED
tests/arb/utils/excel/test_xl_create.py::TestSysImport::test_sys_exit PASSED
tests/arb/utils/excel/test_xl_create.py::TestPathImport::test_path_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestPathImport::test_path_creation PASSED
tests/arb/utils/excel/test_xl_create.py::TestPathImport::test_path_operations PASSED
tests/arb/utils/excel/test_xl_create.py::TestPathImport::test_path_methods PASSED
tests/arb/utils/excel/test_xl_create.py::TestPathImport::test_path_comparison PASSED
tests/arb/utils/excel/test_xl_create.py::TestPathImport::test_path_string_conversion PASSED
tests/arb/utils/excel/test_xl_create.py::TestPathImport::test_path_attributes PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonImport::test_json_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonImport::test_json_dumps_and_loads PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonImport::test_json_dump_and_load PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonImport::test_json_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonImport::test_json_with_various_types PASSED
tests/arb/utils/excel/test_xl_create.py::TestJsonImport::test_json_pretty_printing PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_basic_functionality PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_with_read_data PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_with_write_operations PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_context_manager PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_file_modes PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_error_simulation PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_multiple_files PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_basic_creation PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_attribute_access PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_return_value PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_side_effect PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_call_tracking PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_assertions PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_context_manager PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_iterable PASSED
tests/arb/utils/excel/test_xl_create.py::TestMockImport::test_mock_comparison PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_basic_functionality PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_as_decorator PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_with_context_manager PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_with_specific_target PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_with_side_effect PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_with_return_value PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_multiple_targets PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_error_handling PASSED
tests/arb/utils/excel/test_xl_create.py::TestPatchImport::test_patch_autospec PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_import PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_raises PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_raises_with_match PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_raises_with_exception_info PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_raises_no_exception PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_raises_multiple_exceptions PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_raises_context_manager PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_raises_with_custom_exception PASSED
tests/arb/utils/excel/test_xl_create.py::TestPytestImport::test_pytest_raises_integration PASSED
tests/arb/utils/excel/test_xl_misc.py::TestGetExcelRowColumn::test_function_exists PASSED
tests/arb/utils/excel/test_xl_misc.py::TestGetExcelRowColumn::test_function_signature PASSED
tests/arb/utils/excel/test_xl_misc.py::TestGetExcelRowColumn::test_get_excel_row_column_basic_addresses PASSED
tests/arb/utils/excel/test_xl_misc.py::TestGetExcelRowColumn::test_get_excel_row_column_edge_cases PASSED
tests/arb/utils/excel/test_xl_misc.py::TestGetExcelRowColumn::test_get_excel_row_column_invalid_addresses PASSED
tests/arb/utils/excel/test_xl_misc.py::TestGetExcelRowColumn::test_get_excel_row_column_with_whitespace PASSED
tests/arb/utils/excel/test_xl_misc.py::TestGetExcelRowColumn::test_get_excel_row_column_with_special_characters PASSED
tests/arb/utils/excel/test_xl_misc.py::TestGetExcelRowColumn::test_get_excel_row_column_performance PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_function_exists PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_function_signature PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_by_row PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_by_column PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_with_sub_keys PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_empty_data PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_single_item PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_invalid_sort_by PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_missing_address PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_with_different_address_locations PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_with_complex_nested_keys PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_with_invalid_address_format PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_with_none_values PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_with_empty_string_values PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlAddressSort::test_xl_address_sort_performance PASSED
tests/arb/utils/excel/test_xl_misc.py::TestRunDiagnostics::test_function_exists PASSED
tests/arb/utils/excel/test_xl_misc.py::TestRunDiagnostics::test_function_signature PASSED
tests/arb/utils/excel/test_xl_misc.py::TestRunDiagnostics::test_run_diagnostics_success === Testing get_excel_row_column ===
  Address: $C$42 => ('A', 1)
  Address: $AA$99 => ('A', 1)

=== Testing get_excel_row_column (invalid formats) ===
  UNEXPECTED SUCCESS: A$1 => ('A', 1)
  UNEXPECTED SUCCESS: $A1 => ('A', 1)
  UNEXPECTED SUCCESS: $A$1$ => ('A', 1)
  UNEXPECTED SUCCESS: $AB$ => ('A', 1)
  UNEXPECTED SUCCESS: $AB$XYZ => ('A', 1)

=== Testing xl_address_sort ===
  Tuple: ('$B$10', 'Example') => Row: {'test': 'sorted'}
  Tuple: ('key', {'nested': {'cell': '$D$20'}}) => Row: {'test': 'sorted'}
PASSED
tests/arb/utils/excel/test_xl_misc.py::TestRunDiagnostics::test_run_diagnostics_with_errors === Testing get_excel_row_column ===
  ERROR for $C$42: Test error
  ERROR for $AA$99: Test error

=== Testing get_excel_row_column (invalid formats) ===
  Expected failure for A$1: Test error
  Expected failure for $A1: Test error
  Expected failure for $A$1$: Test error
  Expected failure for $AB$: Test error
  Expected failure for $AB$XYZ: Test error

=== Testing xl_address_sort ===
PASSED
tests/arb/utils/excel/test_xl_misc.py::TestRunDiagnostics::test_run_diagnostics_multiple_calls === Testing get_excel_row_column ===
  Address: $C$42 => ('A', 1)
  Address: $AA$99 => ('A', 1)

=== Testing get_excel_row_column (invalid formats) ===
  UNEXPECTED SUCCESS: A$1 => ('A', 1)
  UNEXPECTED SUCCESS: $A1 => ('A', 1)
  UNEXPECTED SUCCESS: $A$1$ => ('A', 1)
  UNEXPECTED SUCCESS: $AB$ => ('A', 1)
  UNEXPECTED SUCCESS: $AB$XYZ => ('A', 1)

=== Testing xl_address_sort ===
  Tuple: ('$B$10', 'Example') => Row: {'test': 'sorted'}
  Tuple: ('key', {'nested': {'cell': '$D$20'}}) => Row: {'test': 'sorted'}
=== Testing get_excel_row_column ===
  Address: $C$42 => ('A', 1)
  Address: $AA$99 => ('A', 1)

=== Testing get_excel_row_column (invalid formats) ===
  UNEXPECTED SUCCESS: A$1 => ('A', 1)
  UNEXPECTED SUCCESS: $A1 => ('A', 1)
  UNEXPECTED SUCCESS: $A$1$ => ('A', 1)
  UNEXPECTED SUCCESS: $AB$ => ('A', 1)
  UNEXPECTED SUCCESS: $AB$XYZ => ('A', 1)

=== Testing xl_address_sort ===
  Tuple: ('$B$10', 'Example') => Row: {'test': 'sorted'}
  Tuple: ('key', {'nested': {'cell': '$D$20'}}) => Row: {'test': 'sorted'}
=== Testing get_excel_row_column ===
  Address: $C$42 => ('A', 1)
  Address: $AA$99 => ('A', 1)

=== Testing get_excel_row_column (invalid formats) ===
  UNEXPECTED SUCCESS: A$1 => ('A', 1)
  UNEXPECTED SUCCESS: $A1 => ('A', 1)
  UNEXPECTED SUCCESS: $A$1$ => ('A', 1)
  UNEXPECTED SUCCESS: $AB$ => ('A', 1)
  UNEXPECTED SUCCESS: $AB$XYZ => ('A', 1)

=== Testing xl_address_sort ===
  Tuple: ('$B$10', 'Example') => Row: {'test': 'sorted'}
  Tuple: ('key', {'nested': {'cell': '$D$20'}}) => Row: {'test': 'sorted'}
PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlMiscIntegration::test_address_parsing_and_sorting_integration PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlMiscIntegration::test_error_handling_integration PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlMiscIntegration::test_performance_with_large_datasets PASSED
tests/arb/utils/excel/test_xl_misc.py::TestXlMiscIntegration::test_edge_case_integration PASSED
tests/arb/utils/excel/test_xl_misc.py::TestEdgeCases::test_extremely_large_row_numbers PASSED
tests/arb/utils/excel/test_xl_misc.py::TestEdgeCases::test_extremely_large_column_letters PASSED
tests/arb/utils/excel/test_xl_misc.py::TestEdgeCases::test_mixed_case_column_letters PASSED
tests/arb/utils/excel/test_xl_misc.py::TestErrorHandling::test_malformed_addresses PASSED
tests/arb/utils/excel/test_xl_misc.py::TestErrorHandling::test_invalid_sort_parameters PASSED
tests/arb/utils/excel/test_xl_misc.py::TestErrorHandling::test_missing_or_invalid_sub_keys PASSED
tests/arb/utils/excel/test_xl_misc.py::TestPerformance::test_large_number_of_addresses PASSED
tests/arb/utils/excel/test_xl_misc.py::TestPerformance::test_large_number_of_sort_operations PASSED
tests/arb/utils/excel/test_xl_misc.py::TestCompatibility::test_string_vs_path_inputs PASSED
tests/arb/utils/excel/test_xl_misc.py::TestCompatibility::test_unicode_handling PASSED
tests/arb/utils/excel/test_xl_misc.py::TestCompatibility::test_whitespace_handling PASSED
tests/arb/utils/excel/test_xl_misc.py::TestDocumentation::test_function_docstrings PASSED
tests/arb/utils/excel/test_xl_misc.py::TestDocumentation::test_class_docstrings PASSED
tests/arb/utils/excel/test_xl_misc.py::TestDocumentation::test_method_docstrings PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile::test_function_signature PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile::test_parse_xl_file_with_mock_data PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile::test_parse_xl_file_with_invalid_path PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile::test_parse_xl_file_with_empty_workbook PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile::test_parse_xl_file_with_single_sheet PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile::test_parse_xl_file_with_corrupted_file PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile::test_parse_xl_file_with_large_workbook PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile2::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile2::test_function_signature PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile2::test_parse_xl_file_2_with_mock_data PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile2::test_parse_xl_file_2_with_invalid_path PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile2::test_parse_xl_file_2_with_empty_workbook PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile2::test_parse_xl_file_2_with_corrupted_file PASSED
tests/arb/utils/excel/test_xl_parse.py::TestParseXlFile2::test_parse_xl_file_2_with_large_workbook PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs::test_function_signature PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs::test_extract_tabs_with_mock_data PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs::test_extract_tabs_with_empty_schemas PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs::test_extract_tabs_with_complex_schemas PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs::test_extract_tabs_with_none_schema_map PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs::test_extract_tabs_with_empty_workbook PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs2::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs2::test_function_signature PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs2::test_extract_tabs_2_with_mock_data PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs2::test_extract_tabs_2_with_empty_schemas PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs2::test_extract_tabs_2_with_complex_schemas PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs2::test_extract_tabs_2_with_none_schema_map PASSED
tests/arb/utils/excel/test_xl_parse.py::TestExtractTabs2::test_extract_tabs_2_with_empty_workbook PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs::test_function_signature PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs::test_get_spreadsheet_key_value_pairs_with_mock_worksheet PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs::test_get_spreadsheet_key_value_pairs_with_empty_worksheet PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs::test_get_spreadsheet_key_value_pairs_with_single_key_value PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs::test_get_spreadsheet_key_value_pairs_with_multiple_key_values PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs::test_get_spreadsheet_key_value_pairs_with_invalid_cell_reference PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs::test_get_spreadsheet_key_value_pairs_with_none_values PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs2::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs2::test_function_signature PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs2::test_get_spreadsheet_key_value_pairs_2_with_mock_worksheet PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs2::test_get_spreadsheet_key_value_pairs_2_with_empty_worksheet PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs2::test_get_spreadsheet_key_value_pairs_2_with_single_key_value PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs2::test_get_spreadsheet_key_value_pairs_2_with_multiple_key_values PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs2::test_get_spreadsheet_key_value_pairs_2_with_invalid_cell_reference PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetSpreadsheetKeyValuePairs2::test_get_spreadsheet_key_value_pairs_2_with_none_values PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_valid_schema PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_missing_schema PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_schema_alias PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_none_schema_map PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_empty_schema_map PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_none_schema_alias PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_empty_schema_alias PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_complex_schema_map PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEnsureSchema::test_ensure_schema_with_complex_schema_alias PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_lat_long PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_empty_lat_long PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_single_coordinate PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_extra_commas PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_whitespace PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_no_lat_long_key PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_none_value PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_non_string_value PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_empty_dict PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSplitCompoundKeys::test_split_compound_keys_with_multiple_lat_long_keys PASSED
tests/arb/utils/excel/test_xl_parse.py::TestConvertUploadToJson::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestConvertUploadToJson::test_convert_upload_to_json_with_mock_data PASSED
tests/arb/utils/excel/test_xl_parse.py::TestConvertUploadToJson::test_convert_upload_to_json_with_complex_data PASSED
tests/arb/utils/excel/test_xl_parse.py::TestConvertUploadToJson::test_convert_upload_to_json_with_parse_error PASSED
tests/arb/utils/excel/test_xl_parse.py::TestConvertUploadToJson::test_convert_upload_to_json_with_save_error PASSED
tests/arb/utils/excel/test_xl_parse.py::TestConvertUploadToJson::test_convert_upload_to_json_with_different_paths PASSED
tests/arb/utils/excel/test_xl_parse.py::TestConvertUploadToJson::test_convert_upload_to_json_with_empty_data PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_function_exists PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_xlsx_file PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_xls_file PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_other_extension PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_complex_xlsx_file PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_parse_error PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_save_error PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_different_paths PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_empty_data PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_none_path PASSED
tests/arb/utils/excel/test_xl_parse.py::TestGetJsonFileNameOld::test_get_json_file_name_old_with_string_path PASSED
tests/arb/utils/excel/test_xl_parse.py::TestFunctionEquivalence::test_parse_xl_file_equivalence PASSED
tests/arb/utils/excel/test_xl_parse.py::TestFunctionEquivalence::test_extract_tabs_equivalence PASSED
tests/arb/utils/excel/test_xl_parse.py::TestFunctionEquivalence::test_get_spreadsheet_key_value_pairs_equivalence PASSED
tests/arb/utils/excel/test_xl_parse.py::TestFunctionEquivalence::test_function_behavior_equivalence PASSED
tests/arb/utils/excel/test_xl_parse.py::TestFunctionEquivalence::test_function_documentation_equivalence PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEdgeCases::test_parse_xl_file_with_very_long_filename PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEdgeCases::test_parse_xl_file_with_special_characters PASSED
tests/arb/utils/excel/test_xl_parse.py::TestEdgeCases::test_parse_xl_file_with_unicode_characters PASSED
tests/arb/utils/excel/test_xl_parse.py::TestErrorHandling::test_parse_xl_file_with_permission_error PASSED
tests/arb/utils/excel/test_xl_parse.py::TestErrorHandling::test_parse_xl_file_with_disk_full_error PASSED
tests/arb/utils/excel/test_xl_parse.py::TestErrorHandling::test_parse_xl_file_with_network_error PASSED
tests/arb/utils/excel/test_xl_parse.py::TestIntegration::test_end_to_end_workflow PASSED
tests/arb/utils/excel/test_xl_parse.py::TestIntegration::test_function_chain_consistency PASSED
tests/arb/utils/excel/test_xl_parse.py::TestPerformance::test_large_file_performance PASSED
tests/arb/utils/excel/test_xl_parse.py::TestPerformance::test_memory_usage PASSED
tests/arb/utils/excel/test_xl_parse.py::TestCompatibility::test_excel_version_compatibility PASSED
tests/arb/utils/excel/test_xl_parse.py::TestCompatibility::test_file_format_compatibility PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSecurity::test_path_traversal_protection PASSED
tests/arb/utils/excel/test_xl_parse.py::TestSecurity::test_malicious_file_handling PASSED
tests/arb/utils/excel/test_xl_parse.py::TestLogging::test_logging_verbosity PASSED
tests/arb/utils/excel/test_xl_parse.py::TestLogging::test_error_logging PASSED
tests/arb/utils/excel/test_xl_parse.py::TestDataValidation::test_data_type_validation PASSED
tests/arb/utils/excel/test_xl_parse.py::TestDataValidation::test_data_range_validation PASSED
tests/arb/utils/excel/test_xl_parse.py::TestDataValidation::test_data_format_validation PASSED
tests/arb/utils/excel/test_xl_parse.py::TestBoundaryConditions::test_empty_file_boundary PASSED
tests/arb/utils/excel/test_xl_parse.py::TestBoundaryConditions::test_single_cell_boundary PASSED
tests/arb/utils/excel/test_xl_parse.py::TestBoundaryConditions::test_maximum_size_boundary PASSED
tests/arb/utils/excel/test_xl_parse.py::TestStressTesting::test_concurrent_access PASSED
tests/arb/utils/excel/test_xl_parse.py::TestStressTesting::test_rapid_file_access PASSED
tests/arb/utils/excel/test_xl_parse.py::TestStressTesting::test_memory_pressure PASSED
tests/arb/utils/excel/test_xl_parse.py::TestRegressionTesting::test_known_bug_fixes PASSED
tests/arb/utils/excel/test_xl_parse.py::TestRegressionTesting::test_functionality_preservation PASSED
tests/arb/utils/excel/test_xl_parse.py::TestDocumentation::test_function_documentation PASSED
tests/arb/utils/excel/test_xl_parse.py::TestDocumentation::test_example_accuracy PASSED
tests/arb/utils/excel/test_xl_parse.py::TestMaintenance::test_code_style PASSED
tests/arb/utils/excel/test_xl_parse.py::TestMaintenance::test_code_complexity PASSED
tests/arb/utils/test_arb_logging.py::test_get_pretty_printer_basic PASSED
tests/arb/utils/test_arb_logging.py::test_get_pretty_printer_kwargs PASSED
tests/arb/utils/test_arb_logging.py::test_resolve_log_dir_creates_dir PASSED
tests/arb/utils/test_arb_logging.py::test_setup_standalone_logging_prints PASSED
tests/arb/utils/test_arb_logging.py::test_setup_app_logging_prints PASSED
tests/arb/utils/test_database.py::test_execute_sql_script_with_defaults SKIPPED
tests/arb/utils/test_database.py::test_execute_sql_script_with_custom_path_and_connection PASSED
tests/arb/utils/test_database.py::test_execute_sql_script_file_not_found PASSED
tests/arb/utils/test_database.py::test_execute_sql_script_empty_path PASSED
tests/arb/utils/test_database.py::test_execute_sql_script_invalid_sql PASSED
tests/arb/utils/test_database.py::test_get_reflected_base_valid PASSED
tests/arb/utils/test_database.py::test_get_reflected_base_none_db PASSED
tests/arb/utils/test_database.py::test_get_reflected_base_invalid_db PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_normal_operation PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_dry_run PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_remove_none_values PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_non_dict_json PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_json PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_json PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_table_not_found PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_column_not_found PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_table_name PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_table_name PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_empty_column_name PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_none_column_name PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_custom_remove_value PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_no_matches PASSED
tests/arb/utils/test_database.py::test_cleanse_misc_json_database_error_handling PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_missing_tz_error PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_missing_tz_assume_utc PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_empty PASSED
tests/arb/utils/test_date_and_time.py::test_iso_str_to_utc_datetime_invalid PASSED
tests/arb/utils/test_date_and_time.py::test_excel_str_to_naive_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_excel_str_to_naive_datetime_empty_invalid PASSED
tests/arb/utils/test_date_and_time.py::test_html_naive_str_to_utc_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_html_naive_str_to_utc_datetime_empty PASSED
tests/arb/utils/test_date_and_time.py::test_ca_naive_datetime_to_utc_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_ca_naive_datetime_to_utc_datetime_aware PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_utc PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_naive_flag PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_naive_error PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_ca_naive_datetime_non_utc_error PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_iso_str_valid PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_iso_str_naive PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_valid PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_naive PASSED
tests/arb/utils/test_date_and_time.py::test_utc_datetime_to_html_naive_str_non_utc PASSED
tests/arb/utils/test_date_and_time.py::test_is_datetime_naive_cases PASSED
tests/arb/utils/test_date_and_time.py::test_is_datetime_utc_cases PASSED
tests/arb/utils/test_date_and_time.py::test_excel_naive_datetime_to_utc_datetime_valid PASSED
tests/arb/utils/test_date_and_time.py::test_excel_naive_datetime_to_utc_datetime_aware PASSED
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_valid PASSED
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_empty PASSED
tests/arb/utils/test_date_and_time.py::test_utc_iso_str_to_ca_str_invalid PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_dict PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_list PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_utc_datetime_to_ca_naive_datetime_non_datetime PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_dict PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_list PASSED
tests/arb/utils/test_date_and_time.py::test_bulk_ca_naive_datetime_to_utc_datetime_non_datetime PASSED
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_basic PASSED
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_include_hidden_and_functions PASSED
tests/arb/utils/test_diagnostics.py::test_obj_diagnostics_none PASSED
tests/arb/utils/test_diagnostics.py::test_list_differences_lists PASSED
tests/arb/utils/test_diagnostics.py::test_list_differences_dicts PASSED
tests/arb/utils/test_diagnostics.py::test_list_differences_none PASSED
tests/arb/utils/test_diagnostics.py::test_list_differences_print_warning PASSED
tests/arb/utils/test_diagnostics.py::test_diag_recursive_simple PASSED
tests/arb/utils/test_diagnostics.py::test_diag_recursive_none PASSED
tests/arb/utils/test_diagnostics.py::test_dict_to_str_flat PASSED
tests/arb/utils/test_diagnostics.py::test_dict_to_str_nested PASSED
tests/arb/utils/test_diagnostics.py::test_dict_to_str_none PASSED
tests/arb/utils/test_diagnostics.py::test_obj_to_html_dict PASSED
tests/arb/utils/test_diagnostics.py::test_obj_to_html_none PASSED
tests/arb/utils/test_diagnostics.py::test_compare_dicts_equal PASSED
tests/arb/utils/test_diagnostics.py::test_compare_dicts_diff_keys PASSED
tests/arb/utils/test_diagnostics.py::test_compare_dicts_diff_values PASSED
tests/arb/utils/test_diagnostics.py::test_compare_dicts_none PASSED
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_basic PASSED
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_none PASSED
tests/arb/utils/test_diagnostics.py::test_get_changed_fields_partial PASSED
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_creates_parents PASSED
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_noop_for_empty PASSED
tests/arb/utils/test_file_io.py::test_ensure_parent_dirs_existing_dir PASSED
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_creates PASSED
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_existing PASSED
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_file_raises PASSED
tests/arb/utils/test_file_io.py::test_ensure_dir_exists_noop_for_empty PASSED
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_basic PASSED
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_empty_dir PASSED
tests/arb/utils/test_file_io.py::test_get_secure_timestamped_file_name_empty_file PASSED
tests/arb/utils/test_file_io.py::test_get_project_root_dir_success PASSED
tests/arb/utils/test_file_io.py::test_get_project_root_dir_no_match PASSED
tests/arb/utils/test_file_io.py::test_get_project_root_dir_empty_args PASSED
tests/arb/utils/test_file_io.py::test_resolve_project_root_success PASSED
tests/arb/utils/test_file_io.py::test_resolve_project_root_not_found PASSED
tests/arb/utils/test_file_io.py::test_resolve_project_root_empty_args PASSED
tests/arb/utils/test_file_io.py::test_read_file_reverse_basic PASSED
tests/arb/utils/test_file_io.py::test_read_file_reverse_empty_file PASSED
tests/arb/utils/test_file_io.py::test_read_file_reverse_file_not_found PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_basic PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_none_data PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_with_options PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_creates_parents PASSED
tests/arb/utils/test_io_wrappers.py::test_save_json_safely_none_path PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_basic PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_with_options PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_file_not_found PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_invalid_json PASSED
tests/arb/utils/test_io_wrappers.py::test_read_json_file_none_path PASSED
tests/arb/utils/test_io_wrappers.py::test_write_text_file_basic PASSED
tests/arb/utils/test_io_wrappers.py::test_write_text_file_none_text PASSED
tests/arb/utils/test_io_wrappers.py::test_write_text_file_creates_parents PASSED
tests/arb/utils/test_io_wrappers.py::test_write_text_file_none_path PASSED
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_basic PASSED
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_missing_src PASSED
tests/arb/utils/test_io_wrappers.py::test_copy_file_safe_none_args PASSED
tests/arb/utils/test_json.py::test_json_serializer_datetime PASSED
tests/arb/utils/test_json.py::test_json_serializer_decimal PASSED
tests/arb/utils/test_json.py::test_json_serializer_class PASSED
tests/arb/utils/test_json.py::test_json_serializer_unsupported PASSED
tests/arb/utils/test_json.py::test_json_deserializer_datetime PASSED
tests/arb/utils/test_json.py::test_json_deserializer_decimal PASSED
tests/arb/utils/test_json.py::test_json_deserializer_class PASSED
tests/arb/utils/test_json.py::test_json_deserializer_unknown_type PASSED
tests/arb/utils/test_json.py::test_json_deserializer_unknown_class PASSED
tests/arb/utils/test_json.py::test_json_save_and_load_roundtrip PASSED
tests/arb/utils/test_json.py::test_json_save_none_path PASSED
tests/arb/utils/test_json.py::test_json_save_none_data PASSED
tests/arb/utils/test_json.py::test_json_load_file_not_found PASSED
tests/arb/utils/test_json.py::test_json_load_invalid_json PASSED
tests/arb/utils/test_json.py::test_json_save_with_meta_and_load PASSED
tests/arb/utils/test_json.py::test_json_save_with_meta_none_metadata PASSED
tests/arb/utils/test_json.py::test_add_metadata_to_json PASSED
tests/arb/utils/test_json.py::test_compare_json_files_identical PASSED
tests/arb/utils/test_json.py::test_compare_json_files_different PASSED
tests/arb/utils/test_json.py::test_cast_model_value_int PASSED
tests/arb/utils/test_json.py::test_cast_model_value_float PASSED
tests/arb/utils/test_json.py::test_cast_model_value_bool PASSED
tests/arb/utils/test_json.py::test_cast_model_value_invalid PASSED
tests/arb/utils/test_json.py::test_wtform_types_and_values PASSED
tests/arb/utils/test_json.py::test_make_dict_serializeable_and_deserialize_dict PASSED
tests/arb/utils/test_json.py::test_safe_json_loads_valid PASSED
tests/arb/utils/test_json.py::test_safe_json_loads_none PASSED
tests/arb/utils/test_json.py::test_safe_json_loads_invalid PASSED
tests/arb/utils/test_json.py::test_extract_id_from_json PASSED
tests/arb/utils/test_json.py::test_extract_id_from_json_missing PASSED
tests/arb/utils/test_json.py::test_extract_tab_payload PASSED
tests/arb/utils/test_json.py::test_normalize_value PASSED
tests/arb/utils/test_json.py::test_compute_field_differences PASSED
tests/arb/utils/test_log_util.py::test_log_function_parameters_basic PASSED
tests/arb/utils/test_log_util.py::test_log_function_parameters_custom_logger PASSED
tests/arb/utils/test_log_util.py::test_log_function_parameters_type_error PASSED
tests/arb/utils/test_log_util.py::test_log_parameters_decorator_logs PASSED
tests/arb/utils/test_log_util.py::test_log_parameters_decorator_custom_logger PASSED
tests/arb/utils/test_log_util.py::test_log_parameters_type_error PASSED
tests/arb/utils/test_log_util.py::test_flask_user_context_filter_sets_user PASSED
tests/arb/utils/test_log_util.py::test_flask_user_context_filter_no_user PASSED
tests/arb/utils/test_misc.py::test_get_nested_value_basic PASSED
tests/arb/utils/test_misc.py::test_get_nested_value_missing_key PASSED
tests/arb/utils/test_misc.py::test_get_nested_value_type_error PASSED
tests/arb/utils/test_misc.py::test_get_nested_value_value_error PASSED
tests/arb/utils/test_misc.py::test_ensure_key_value_pair_injects PASSED
tests/arb/utils/test_misc.py::test_ensure_key_value_pair_type_error PASSED
tests/arb/utils/test_misc.py::test_replace_list_occurrences PASSED
tests/arb/utils/test_misc.py::test_replace_list_occurrences_none PASSED
tests/arb/utils/test_misc.py::test_args_to_string PASSED
tests/arb/utils/test_misc.py::test_log_error_logs_and_raises PASSED
tests/arb/utils/test_misc.py::test_safe_cast_basic PASSED
tests/arb/utils/test_misc.py::test_safe_cast_value_error PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_valid PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_non_string PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_windows_1252_smart_quote PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_none PASSED
tests/arb/utils/test_misc.py::test_sanitize_for_utf8_empty_string PASSED
tests/arb/utils/test_sql_alchemy.py::test_sa_model_diagnostics_logs PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_sa_fields_returns_sorted PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_sa_column_types_handles_types PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_sa_automap_types PASSED
tests/arb/utils/test_sql_alchemy.py::test_sa_model_to_dict PASSED
tests/arb/utils/test_sql_alchemy.py::test_table_to_list PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_class_from_table_name PASSED
tests/arb/utils/test_sql_alchemy.py::test_get_rows_by_table_name PASSED
tests/arb/utils/test_sql_alchemy.py::test_delete_commit_and_log_model PASSED
tests/arb/utils/test_sql_alchemy.py::test_add_commit_and_log_model PASSED
tests/arb/utils/test_web_html.py::test_upload_single_file PASSED
tests/arb/utils/test_web_html.py::test_upload_single_file_no_filename PASSED
tests/arb/utils/test_web_html.py::test_upload_single_file_none_filename PASSED
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples PASSED
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples_empty_list PASSED
tests/arb/utils/test_web_html.py::test_selector_list_to_tuples_single_item PASSED
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple PASSED
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple_empty_list PASSED
tests/arb/utils/test_web_html.py::test_list_to_triple_tuple_single_item PASSED
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict PASSED
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_empty_list PASSED
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_empty_match_list PASSED
tests/arb/utils/test_web_html.py::test_update_triple_tuple_dict_none_unmatch_update PASSED
tests/arb/utils/test_web_html.py::test_update_selector_dict PASSED
tests/arb/utils/test_web_html.py::test_update_selector_dict_empty_dict PASSED
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option PASSED
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_custom_item PASSED
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_ensure_first_false PASSED
tests/arb/utils/test_web_html.py::test_ensure_placeholder_option_empty_list PASSED
tests/arb/utils/test_web_html.py::test_remove_items_single_string PASSED
tests/arb/utils/test_web_html.py::test_remove_items_list PASSED
tests/arb/utils/test_web_html.py::test_remove_items_empty_list PASSED
tests/arb/utils/test_web_html.py::test_remove_items_empty_tuples PASSED
tests/arb/utils/test_web_html.py::test_remove_items_item_not_found PASSED
tests/arb/utils/test_web_html.py::test_run_diagnostics Running diagnostics for web_html.py...
All selector diagnostics passed.
PASSED
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid PASSED
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_invalid PASSED
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_none PASSED
tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_value_error PASSED
tests/arb/utils/test_wtf_forms_util.py::test_remove_validators_removes_inputrequired PASSED
tests/arb/utils/test_wtf_forms_util.py::test_change_validators_on_test_switches PASSED
tests/arb/utils/test_wtf_forms_util.py::test_change_validators_replaces PASSED
tests/arb/utils/test_wtf_forms_util.py::test_get_wtforms_fields_lists_fields PASSED
tests/arb/utils/test_wtf_forms_util.py::test_model_to_wtform_and_wtform_to_model PASSED
tests/arb/utils/test_wtf_forms_util.py::test_update_model_with_payload_and_get_payloads PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_route_function_existence PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_route_function_signatures PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence 📁 Found 14 test files for comprehensive unit testing
PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_staged_equivalence 📁 Found 14 test files for comprehensive unit testing
PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_error_handling_equivalence PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_response_format_equivalence PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestPerformanceEquivalence::test_route_execution_speed_equivalence PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestPerformanceEquivalence::test_function_call_overhead_equivalence FAILED
tests/unit/test_comprehensive_route_equivalence.py::TestBusinessLogicEquivalence::test_route_parameter_handling PASSED
tests/unit/test_comprehensive_route_equivalence.py::TestBusinessLogicEquivalence::test_route_return_type_consistency PASSED
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_route_function_existence PASSED
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data 📁 Found 14 test files for real-world testing
✅ Both routes processed landfill_operator_feedback_v071_test_01_good_data.xlsx successfully
PASSED
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_staged_upload_equivalence_with_real_data 📁 Found 14 test files for real-world testing
✅ Both staged routes processed landfill_operator_feedback_v071_test_01_good_data.xlsx successfully
PASSED
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data 📁 Found 14 test files for real-world testing
✅ Both route pairs handled bad data file landfill_operator_feedback_v070_test_02_bad_data.xlsx gracefully
PASSED
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_all_test_files_covered 📁 Found 14 test files for real-world testing
✅ Comprehensive test coverage: 14 test files covering all feedback form types
PASSED
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_expected_results_structure ✅ Expected results structure: 14 Excel files, 14 JSON files
PASSED
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_response_format_equivalence ✅ All routes return consistent HTML response formats
PASSED
tests/unit/test_route_equivalence_unit.py::TestRouteEquivalenceUnit::test_route_function_signatures ✅ All route functions are callable
PASSED
tests/unit/test_route_equivalence_unit.py::TestRouteEquivalenceUnit::test_upload_file_route_equivalence 📁 Found 14 test files for unit testing
✅ Route equivalence test passed - functions are callable
   Note: Full equivalence testing requires more complex Flask setup
PASSED
tests/unit/test_route_equivalence_unit.py::TestRouteEquivalenceUnit::test_upload_file_staged_route_equivalence 📁 Found 14 test files for unit testing
✅ Staged route equivalence test passed - functions are callable
   Note: Full equivalence testing requires more complex Flask setup
PASSED
tests/unit/test_route_equivalence_unit.py::TestRouteEquivalenceUnit::test_error_handling_equivalence ✅ Error handling equivalence test passed - functions are callable
   Note: Full error handling testing requires more complex Flask setup
PASSED
tests/unit/test_route_equivalence_unit.py::TestRouteEquivalenceUnit::test_response_format_equivalence 📁 Found 14 test files for unit testing
✅ Response format equivalence test passed - functions are callable
   Note: Full response format testing requires more complex Flask setup
PASSED
tests/unit/test_route_equivalence_unit.py::TestRoutePerformanceComparison::test_route_function_signatures ✅ All route functions are callable
PASSED
tests/unit/test_route_equivalence_unit.py::TestRoutePerformanceComparison::test_upload_file_route_equivalence 📁 Found 14 test files for unit testing
✅ Route equivalence test passed - functions are callable
   Note: Full equivalence testing requires more complex Flask setup
PASSED
tests/unit/test_route_equivalence_unit.py::TestRoutePerformanceComparison::test_upload_file_staged_route_equivalence 📁 Found 14 test files for unit testing
✅ Staged route equivalence test passed - functions are callable
   Note: Full equivalence testing requires more complex Flask setup
PASSED
tests/unit/test_route_equivalence_unit.py::TestRoutePerformanceComparison::test_error_handling_equivalence ✅ Error handling equivalence test passed - functions are callable
   Note: Full error handling testing requires more complex Flask setup
PASSED
tests/unit/test_route_equivalence_unit.py::TestRoutePerformanceComparison::test_response_format_equivalence 📁 Found 14 test files for unit testing
✅ Response format equivalence test passed - functions are callable
   Note: Full response format testing requires more complex Flask setup
PASSED
tests/unit/test_route_equivalence_unit.py::TestRoutePerformanceComparison::test_route_execution_speed 📁 Found 14 test files for unit testing
✅ Performance test passed - functions are callable
   Note: Full performance testing requires more complex Flask setup
   The unit test framework is ready for future enhancement
PASSED

=================================== FAILURES ===================================
______ TestPerformanceEquivalence.test_function_call_overhead_equivalence ______

self = <test_comprehensive_route_equivalence.TestPerformanceEquivalence object at 0x72987ed5e0d0>
client = <FlaskClient <Flask 'arb.portal.app'>>

    def test_function_call_overhead_equivalence(self, client):
        """Test that function call overhead is equivalent between routes."""
        # Measure multiple calls to ensure consistent performance
        call_times = []
    
        with client.application.app_context():
            for _ in range(10):
                start_time = time.time()
                try:
                    upload_file()  # Call placeholder function
                except Exception:
                    # Expected for placeholder functions, but should be consistent
                    pass
                end_time = time.time()
                call_times.append(end_time - start_time)
    
        # Calculate consistency metrics
        mean_time = statistics.mean(call_times)
        std_dev = statistics.stdev(call_times) if len(call_times) > 1 else 0
        coefficient_of_variation = std_dev / mean_time if mean_time > 0 else 0
    
        # Function calls should be reasonably consistent
        # Increased tolerance since placeholder functions may have variable behavior
        max_cv = 1.0  # 100% coefficient of variation max (more realistic for placeholder functions)
>       assert coefficient_of_variation <= max_cv, f"Function call variance too high: {coefficient_of_variation:.3f}"
E       AssertionError: Function call variance too high: 1.317
E       assert 1.3167296186401978 <= 1.0

tests/unit/test_comprehensive_route_equivalence.py:382: AssertionError
------------------------------ Captured log setup ------------------------------
INFO     arb.portal.app:app.py:57 App config SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://postgres:methane@192.168.1.66:5432/tony_home_tracker
DEBUG    arb.portal.startup.flask:flask.py:72 configure_flask_app() called
DEBUG    arb.portal.startup.flask:flask.py:109 Flask Jinja2 globals and logging initialized.
INFO     arb.portal.app:app.py:75 Automap base classes after reflection: ['scenes', 'messages', 'plumes', 'inspection_flag', 'incidences', 'test_model', 'spatial_ref_sys', 'contact_group_mapping', 'air_district_contacts', 'mitigation_type', 'emission_identified_flag', 'operators', 'sources', 'plume_qa_flag', 'test_wtf_forms_util_model', 'test_models', 'contact_groups', 'incidence_qa_flag', 'uploaded_files', 'portal_updates', 'emission_type', 'operator_contacts', 'air_districts']
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:214 geometry is of type: Geometry that is not implemented in python.  Setting python type to None.
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:215 
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:214 origin is of type: Geometry that is not implemented in python.  Setting python type to None.
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:215 
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:214 extent is of type: Geometry that is not implemented in python.  Setting python type to None.
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:215 
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:214 footprint is of type: Geometry that is not implemented in python.  Setting python type to None.
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:215 
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:214 coordinates is of type: Geometry that is not implemented in python.  Setting python type to None.
WARNING  arb.utils.sql_alchemy:sql_alchemy.py:215
=============================== warnings summary ===============================
tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:583: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    primary_row = db.session.query(primary_table).get(primary_table_pk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:591: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    foreign_row = db.session.query(foreign_table).get(fk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload
tests/arb/portal/test_file_upload_suite.py::test_landfill_upload
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload
tests/arb/portal/test_file_upload_suite.py::test_energy_upload
tests/arb/portal/test_file_upload_suite.py::test_generic_upload
tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads
tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:591: SAWarning: fully NULL primary key identity cannot load any object.  This condition may raise an error in a future release.
    foreign_row = db.session.query(foreign_table).get(fk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:524: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    row = db.session.query(table).get(id_)  # type: ignore

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,scenes,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,scenes,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plumes_collection,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plumes_collection,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,sources,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,sources,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_district_contacts_collection,air_districts,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_district_contacts_collection,air_districts,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,scenes,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,scenes,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plumes_collection,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plumes_collection,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,sources,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,sources,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_district_contacts_collection,air_districts,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_district_contacts_collection,air_districts,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:137: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_delete_route
  /home/tonyh/miniconda3/envs/mini_conda_02/lib/python3.11/site-packages/flask_sqlalchemy/query.py:30: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    rv = self.get(ident)

tests/arb/utils/test_database.py: 16 warnings
  /home/tonyh/git_repos/feedback_portal/tests/arb/utils/test_database.py:51: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/utils/db_introspection_util.py:88: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    model = session.get(table, id_)  # type: ignore

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
============================== slowest durations ===============================
1.27s call     tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads
0.78s call     tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation
0.49s call     tests/arb/portal/test_file_upload_suite.py::test_database_state_verification
0.34s call     tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_parse_xl_file_with_bad_data
0.34s call     tests/arb/portal/test_routes_integration.py::test_list_staged_route
0.30s call     tests/arb/portal/test_file_upload_suite.py::test_concurrent_upload_handling
0.30s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_returns_flask_instance
0.26s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_multiple_calls_independent
0.24s setup    tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
0.22s setup    tests/unit/test_comprehensive_route_equivalence.py::TestPerformanceEquivalence::test_function_call_overhead_equivalence
0.21s call     tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
0.21s call     tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_error_handling_equivalence_with_bad_data
0.20s call     tests/arb/portal/test_file_upload_suite.py::test_landfill_upload
0.20s call     tests/arb/portal/test_file_upload_suite.py::test_field_level_value_assertions
0.18s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_blueprint_registration
0.18s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_environment_specific_config
0.17s call     tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload
0.15s call     tests/arb/portal/test_utils_playwright_testing_util.py::TestPlaywrightUtilities::test_playwright_utility_functions_memory_usage
0.14s call     tests/arb/portal/test_file_upload_suite.py::test_generic_upload
0.14s call     tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_staged_upload
0.13s setup    tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_get_request_equivalence
0.13s setup    tests/arb/portal/test_routes_integration.py::test_incidence_update_route
0.13s setup    tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_get_request
0.13s call     tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
0.13s setup    tests/unit/test_comprehensive_route_equivalence.py::TestPerformanceEquivalence::test_route_execution_speed_equivalence
0.13s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_context_globals_available
0.13s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_blueprint_routes_accessible
0.13s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_calls_configure_flask_app
0.13s call     tests/arb/portal/test_routes_integration.py::test_portal_updates_route
0.13s setup    tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_response_format_equivalence
0.13s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_has_required_attributes
0.13s setup    tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
0.13s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_config_loading
0.13s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_logging_configured
0.13s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_flask_extensions_initialized
0.13s setup    tests/arb/portal/test_integration_app.py::test_app_starts
0.13s setup    tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_staged_upload_equivalence_with_real_data
0.13s setup    tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_staged_equivalence
0.13s setup    tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_upload_file_equivalence_with_real_data
0.13s setup    tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_response_format_equivalence
0.13s setup    tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_file_equivalence
0.13s setup    tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload
0.12s setup    tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_error_handling_equivalence
0.12s call     tests/arb/portal/test_integration_app.py::test_list_uploads_route
0.11s call     tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload
0.10s call     tests/arb/portal/test_file_upload_suite.py::test_data_integrity_through_processing_pipeline
0.09s call     tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_staged_upload_equivalence_with_real_data
0.09s call     tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_upload_staged_equivalence
0.09s call     tests/arb/portal/test_file_upload_suite.py::test_energy_upload
0.08s call     tests/arb/utils/excel/test_xl_create.py::TestMockOpenImport::test_mock_open_file_modes
0.08s call     tests/arb/portal/test_file_upload_suite.py::test_landfill_staged_upload
0.07s call     tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route_invalid_id
0.07s call     tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_staged_upload
0.07s call     tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_with_staged_upload
0.06s call     tests/arb/portal/test_file_upload_suite.py::test_energy_staged_upload
0.06s call     tests/arb/portal/test_routes_integration.py::test_list_uploads_route
0.06s call     tests/arb/portal/test_file_upload_suite.py::test_generic_staged_upload
0.06s call     tests/arb/portal/test_file_upload_suite.py::test_file_size_limits
0.05s call     tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_extract_tabs_equivalence
0.05s call     tests/arb/portal/test_integration_app.py::test_portal_updates_route
0.05s call     tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_get_spreadsheet_key_value_pairs_equivalence
0.05s setup    tests/arb/portal/test_globals.py::test_globals_integration_with_real_data
0.05s call     tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_parse_xl_file_with_good_data
0.05s setup    tests/arb/portal/test_globals.py::test_globals_persistence_across_calls
0.05s setup    tests/arb/portal/test_globals.py::test_load_type_mapping_integration
0.05s call     tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_sorting
0.05s call     tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_sorting
0.04s call     tests/arb/utils/excel/test_excel_functional_equivalence.py::TestExcelFunctionEquivalence::test_parse_xl_file_with_blank_file
0.04s call     tests/arb/portal/test_file_upload_suite.py::test_negative_validation_errors
0.03s call     tests/arb/portal/test_integration_app.py::test_homepage_route
0.03s call     tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
0.02s call     tests/arb/portal/test_sqla_models.py::test_portal_update_integration
0.02s call     tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route
0.02s call     tests/arb/portal/test_startup_db_integration.py::test_db_initialize_and_create_runs
0.02s teardown tests/arb/utils/test_wtf_forms_util.py::test_min_decimal_precision_valid
0.02s call     tests/arb/portal/test_startup_db_integration.py::test_db_create_creates_tables
0.02s call     tests/arb/portal/test_sqla_models.py::test_uploaded_file_integration
0.02s call     tests/arb/portal/test_routes_integration.py::test_incidence_update_route
0.02s call     tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_error_handling_equivalence
0.02s call     tests/unit/test_comprehensive_route_equivalence.py::TestComprehensiveRouteEquivalence::test_response_format_equivalence
0.02s call     tests/unit/test_real_world_route_equivalence.py::TestRealWorldRouteEquivalence::test_response_format_equivalence
0.01s call     tests/arb/utils/test_wtf_forms_util.py::test_model_to_wtform_and_wtform_to_model
0.01s call     tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_get_request_equivalence
0.01s call     tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_get_request
0.01s call     tests/arb/portal/test_file_upload_suite.py::test_missing_required_fields
0.01s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_uses_config_module
0.01s call     tests/arb/utils/test_wtf_forms_util.py::test_update_model_with_payload_and_get_payloads
0.01s call     tests/arb/portal/test_routes_integration.py::test_index_route
0.01s call     tests/arb/portal/test_globals.py::test_globals_integration_with_real_data
0.01s call     tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_post_invalid_file_equivalence
0.01s call     tests/arb/portal/test_globals.py::test_load_type_mapping_integration
0.01s call     tests/arb/portal/test_integration_app.py::test_og_incidence_create_route
0.01s call     tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_post_invalid_file_equivalence
0.01s call     tests/arb/portal/test_file_upload_suite.py::test_malicious_file_handling
0.01s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_database_initialization_failure
0.01s call     tests/arb/portal/test_app.py::TestCreateApp::test_create_app_database_initialization_success
0.01s setup    tests/unit/test_route_equivalence_unit.py::TestRouteEquivalenceUnit::test_upload_file_route_equivalence
0.01s call     tests/arb/portal/test_integration_app.py::test_landfill_incidence_create_route
0.01s call     tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_conditional_logic_performance
0.01s call     tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route

(4123 durations < 0.005s hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
FAILED tests/unit/test_comprehensive_route_equivalence.py::TestPerformanceEquivalence::test_function_call_overhead_equivalence
========== 1 failed, 1393 passed, 20 skipped, 255 warnings in 13.65s ===========
