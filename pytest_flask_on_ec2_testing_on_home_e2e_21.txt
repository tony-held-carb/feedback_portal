============================= test session starts =============================
platform win32 -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\tonyh\miniconda3\envs\mini_conda_02\python.exe
cachedir: .pytest_cache
rootdir: D:\local\cursor\feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, asyncio-1.1.0, base-url-2.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 87 items

tests/e2e/test_delete_testing_data.py::test_delete_testing_range_page_loads[chromium] FAILED [  1%]
tests/e2e/test_delete_testing_data.py::test_min_max_id_inputs[chromium] FAILED [  2%]
tests/e2e/test_delete_testing_data.py::test_dry_run_checkbox_and_preview[chromium] FAILED [  3%]
tests/e2e/test_delete_testing_data.py::test_delete_button_and_real_delete[chromium] FAILED [  4%]
tests/e2e/test_delete_testing_data.py::test_diagnostics_messaging[chromium] FAILED [  5%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_upload_page_loads[chromium] ERROR [  6%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_input_exists[chromium] ERROR [  8%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_drop_zone_exists[chromium] ERROR [  9%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] ERROR [ 10%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_invalid_file_upload[chromium] ERROR [ 11%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_empty_file_upload[chromium] ERROR [ 12%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_large_file_upload[chromium] ERROR [ 13%]
tests/e2e/test_excel_upload_workflows.py::TestUploadPageElements::test_page_structure[chromium] ERROR [ 14%]
tests/e2e/test_excel_upload_workflows.py::TestUploadPageElements::test_form_structure[chromium] ERROR [ 16%]
tests/e2e/test_excel_upload_workflows.py::TestUploadPageElements::test_accessibility_features[chromium] ERROR [ 17%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] ERROR [ 18%]
tests/e2e/test_excel_upload_workflows.py::test_list_staged_diagnostics_overlay[chromium] FAILED [ 19%]
tests/e2e/test_excel_upload_workflows.py::test_upload_file_only[chromium] FAILED [ 20%]
tests/e2e/test_excel_upload_workflows.py::test_discard_staged_file_only[chromium] ERROR [ 21%]
tests/e2e/test_excel_upload_workflows.py::test_upload_multiple_files_only[chromium] ERROR [ 22%]
tests/e2e/test_excel_upload_workflows.py::test_discard_each_staged_file_separately[chromium] ERROR [ 24%]
tests/e2e/test_excel_upload_workflows.py::test_upload_malformed_file_only[chromium] FAILED [ 25%]
tests/e2e/test_excel_upload_workflows.py::test_discard_malformed_file_only[chromium] FAILED [ 26%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_page_loads[chromium] FAILED [ 27%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_filter_functionality[chromium] FAILED [ 28%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_download_csv_button[chromium] FAILED [ 29%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_accessibility[chromium] FAILED [ 31%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_empty_state[chromium] FAILED [ 32%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_long_text_overflow[chromium] FAILED [ 33%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_special_characters[chromium] FAILED [ 34%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_date_range_boundaries[chromium] FAILED [ 35%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_csv_download_with_filters[chromium] FAILED [ 36%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_rapid_filter_changes[chromium] FAILED [ 37%]
tests/e2e/test_feedback_updates.py::test_feedback_updates_large_data_set[chromium] FAILED [ 39%]
tests/e2e/test_homepage.py::test_homepage_loads[chromium] FAILED         [ 40%]
tests/e2e/test_homepage.py::test_homepage_empty_state[chromium] FAILED   [ 41%]
tests/e2e/test_homepage.py::test_homepage_navigation_menu[chromium] FAILED [ 42%]
tests/e2e/test_homepage.py::test_homepage_accessibility[chromium] FAILED [ 43%]
tests/e2e/test_homepage.py::test_homepage_card_content_and_links[chromium] FAILED [ 44%]
tests/e2e/test_homepage.py::test_homepage_card_navigation[chromium] FAILED [ 45%]
tests/e2e/test_homepage.py::test_homepage_pagination_or_scrolling[chromium] FAILED [ 47%]
tests/e2e/test_homepage.py::test_homepage_special_characters_and_long_text[chromium] FAILED [ 48%]
tests/e2e/test_javascript_logging.py::test_diagnostics_overlay_on_diagnostic_test_page[chromium] FAILED [ 49%]
tests/e2e/test_list_uploads.py::test_list_uploads_page_loads[chromium] FAILED [ 50%]
tests/e2e/test_list_uploads.py::test_list_uploads_file_links[chromium] FAILED [ 51%]
tests/e2e/test_list_uploads.py::test_list_uploads_accessibility[chromium] FAILED [ 52%]
tests/e2e/test_list_uploads.py::test_list_uploads_empty_state[chromium] FAILED [ 54%]
tests/e2e/test_menu_calsmp_help.py::test_calsmp_help_menu_links[chromium] FAILED [ 55%]
tests/e2e/test_menu_developer_utilities.py::test_developer_utilities_menu_links_and_create_incidence[chromium] FAILED [ 56%]
tests/e2e/test_review_staged.py::test_hide_changes_checkbox[chromium] ERROR [ 57%]
tests/e2e/test_review_staged.py::test_field_search_filter[chromium] ERROR [ 58%]
tests/e2e/test_review_staged.py::test_change_summary_card[chromium] ERROR [ 59%]
tests/e2e/test_review_staged.py::test_cancel_and_save_buttons[chromium] ERROR [ 60%]
tests/e2e/test_review_staged.py::test_confirm_checkboxes[chromium] ERROR [ 62%]
tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] ERROR [ 63%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] ERROR [ 64%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] ERROR [ 65%]
tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx] ERROR [ 66%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] ERROR [ 67%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] ERROR [ 68%]
tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx] ERROR [ 70%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] ERROR [ 71%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] ERROR [ 72%]
tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx] ERROR [ 73%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data_update.xlsx] ERROR [ 74%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data_update.xlsx] ERROR [ 75%]
tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx] ERROR [ 77%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] ERROR [ 78%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] ERROR [ 79%]
tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] ERROR [ 80%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] ERROR [ 81%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] ERROR [ 82%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] ERROR [ 83%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] ERROR [ 85%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] ERROR [ 86%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] ERROR [ 87%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] ERROR [ 88%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] ERROR [ 89%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] ERROR [ 90%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] ERROR [ 91%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] ERROR [ 93%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] ERROR [ 94%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] ERROR [ 95%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] ERROR [ 96%]
tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] ERROR [ 97%]
tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] ERROR [ 98%]
tests/e2e/test_playwright_setup.py::test_playwright_setup SKIPPED (S...) [100%]

=================================== ERRORS ====================================
_____ ERROR at setup of TestExcelUpload.test_upload_page_loads[chromium] ______

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F1C7880>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____ ERROR at setup of TestExcelUpload.test_file_input_exists[chromium] ______

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35D3A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
______ ERROR at setup of TestExcelUpload.test_drop_zone_exists[chromium] ______

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F1C7100>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35E3E0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____ ERROR at setup of TestExcelUpload.test_invalid_file_upload[chromium] _____

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F1C6480>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____ ERROR at setup of TestExcelUpload.test_empty_file_upload[chromium] ______

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35F060>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____ ERROR at setup of TestExcelUpload.test_large_file_upload[chromium] ______

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F01FE20>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
___ ERROR at setup of TestUploadPageElements.test_page_structure[chromium] ____

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2F91C0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
___ ERROR at setup of TestUploadPageElements.test_form_structure[chromium] ____

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F382C00>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestUploadPageElements.test_accessibility_features[chromium] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F78A520>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2F87C0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
__________ ERROR at setup of test_discard_staged_file_only[chromium] __________

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def staged_file_for_discard(page: Page) -> str:
        """
        Fixture: Upload a file via /upload_staged and return its staged filename.
        The file will be available in /list_staged for the discard test.
        """
        test_files = get_test_files()
        if not test_files:
            pytest.skip("No test files available for staging.")
        file_path = test_files[0]
        # Upload file
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_excel_upload_workflows.py:700: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F788180>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_________ ERROR at setup of test_upload_multiple_files_only[chromium] _________

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def two_staged_files(page: Page) -> tuple:
        """
        Fixture: Upload two files via /upload_staged and return their staged filenames.
        Both files will be available in /list_staged for discard tests.
        """
        test_files = get_test_files()
        if len(test_files) < 2:
            pytest.skip("Need at least two test files for this test.")
        file_path1, file_path2 = test_files[:2]
        # Upload first file
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_excel_upload_workflows.py:786: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2F9260>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____ ERROR at setup of test_discard_each_staged_file_separately[chromium] _____

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def two_staged_files(page: Page) -> tuple:
        """
        Fixture: Upload two files via /upload_staged and return their staged filenames.
        Both files will be available in /list_staged for discard tests.
        """
        test_files = get_test_files()
        if len(test_files) < 2:
            pytest.skip("Need at least two test files for this test.")
        file_path1, file_path2 = test_files[:2]
        # Upload first file
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_excel_upload_workflows.py:786: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F3816C0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
___________ ERROR at setup of test_hide_changes_checkbox[chromium] ____________

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_and_stage_file(page: Page):
        """
        Uploads a test file via /upload_staged and returns the review_staged URL.
        Adds diagnostics after upload.
        """
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_review_staged.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2FA840>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____________ ERROR at setup of test_field_search_filter[chromium] _____________

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_and_stage_file(page: Page):
        """
        Uploads a test file via /upload_staged and returns the review_staged URL.
        Adds diagnostics after upload.
        """
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_review_staged.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F3827A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____________ ERROR at setup of test_change_summary_card[chromium] _____________

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_and_stage_file(page: Page):
        """
        Uploads a test file via /upload_staged and returns the review_staged URL.
        Adds diagnostics after upload.
        """
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_review_staged.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F78AA20>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
__________ ERROR at setup of test_cancel_and_save_buttons[chromium] ___________

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_and_stage_file(page: Page):
        """
        Uploads a test file via /upload_staged and returns the review_staged URL.
        Adds diagnostics after upload.
        """
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_review_staged.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F382340>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____________ ERROR at setup of test_confirm_checkboxes[chromium] _____________

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_and_stage_file(page: Page):
        """
        Uploads a test file via /upload_staged and returns the review_staged URL.
        Adds diagnostics after upload.
        """
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_review_staged.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F380180>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_incremental_upload[chromium-feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def clear_test_data(page: Page):
        """
        Clears test data using the /delete_testing_range endpoint before each test.
        Default min_id=1000000, max_id=2000000.
        Skips test if endpoint is unavailable or deletion fails.
        """
        print(f"clear_test_data called with page: {page}")
    
        # Step 0: Use Playwright to clear test data via the UI
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_review_staged.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F380F40>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
---------------------------- Captured stdout setup ----------------------------
clear_test_data called with page: <Page url='about:blank'>
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C2840>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F274D60>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_incremental_upload[chromium-feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def clear_test_data(page: Page):
        """
        Clears test data using the /delete_testing_range endpoint before each test.
        Default min_id=1000000, max_id=2000000.
        Skips test if endpoint is unavailable or deletion fails.
        """
        print(f"clear_test_data called with page: {page}")
    
        # Step 0: Use Playwright to clear test data via the UI
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_review_staged.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C0860>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
---------------------------- Captured stdout setup ----------------------------
clear_test_data called with page: <Page url='about:blank'>
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F3800E0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2FB240>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_incremental_upload[chromium-feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def clear_test_data(page: Page):
        """
        Clears test data using the /delete_testing_range endpoint before each test.
        Default min_id=1000000, max_id=2000000.
        Skips test if endpoint is unavailable or deletion fails.
        """
        print(f"clear_test_data called with page: {page}")
    
        # Step 0: Use Playwright to clear test data via the UI
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_review_staged.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C3740>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
---------------------------- Captured stdout setup ----------------------------
clear_test_data called with page: <Page url='about:blank'>
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F4EA3E0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F380F40>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_incremental_upload[chromium-feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def clear_test_data(page: Page):
        """
        Clears test data using the /delete_testing_range endpoint before each test.
        Default min_id=1000000, max_id=2000000.
        Skips test if endpoint is unavailable or deletion fails.
        """
        print(f"clear_test_data called with page: {page}")
    
        # Step 0: Use Playwright to clear test data via the UI
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_review_staged.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2FB380>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
---------------------------- Captured stdout setup ----------------------------
clear_test_data called with page: <Page url='about:blank'>
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data_update.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C0CC0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data_update.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F4EAA20>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_incremental_upload[chromium-feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def clear_test_data(page: Page):
        """
        Clears test data using the /delete_testing_range endpoint before each test.
        Default min_id=1000000, max_id=2000000.
        Skips test if endpoint is unavailable or deletion fails.
        """
        print(f"clear_test_data called with page: {page}")
    
        # Step 0: Use Playwright to clear test data via the UI
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_review_staged.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F789440>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
---------------------------- Captured stdout setup ----------------------------
clear_test_data called with page: <Page url='about:blank'>
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2FA200>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C3560>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_incremental_upload[chromium-feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture(scope="function")
    def clear_test_data(page: Page):
        """
        Clears test data using the /delete_testing_range endpoint before each test.
        Default min_id=1000000, max_id=2000000.
        Skips test if endpoint is unavailable or deletion fails.
        """
        print(f"clear_test_data called with page: {page}")
    
        # Step 0: Use Playwright to clear test data via the UI
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_review_staged.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F4EAAC0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
---------------------------- Captured stdout setup ----------------------------
clear_test_data called with page: <Page url='about:blank'>
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F4E8180>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F3827A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C11C0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F4E84A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2762A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2FAB60>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C3B00>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2759E0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C2020>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F4EA660>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C2F20>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F276520>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C00E0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F4E8A40>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of TestExcelUpload.test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F5C2200>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_ ERROR at setup of test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] _

page = <Page url='about:blank'>

    @pytest.fixture
    def upload_page(page: Page):
        """
        Navigate to upload page and return the page object.
        Ensures each test starts from a clean upload page.
        """
>       page.goto(f"{BASE_URL}/upload")

tests\e2e\test_excel_upload_workflows.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F4EB7E0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
================================== FAILURES ===================================
_______________ test_delete_testing_range_page_loads[chromium] ________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_delete_testing_range_page_loads(page: Page):
        """
        E2E: Loads the Delete Testing Range page and checks for form and input presence.
        """
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_delete_testing_data.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F1C7EC0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
______________________ test_min_max_id_inputs[chromium] _______________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_min_max_id_inputs(page: Page):
        """
        E2E: Min/Max ID input boxes accept values and update form state.
        """
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_delete_testing_data.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F276E80>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_________________ test_dry_run_checkbox_and_preview[chromium] _________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_dry_run_checkbox_and_preview(page: Page):
        """
        E2E: Dry Run checkbox toggles Preview/Delete button and triggers dry run preview.
        """
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_delete_testing_data.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2FB6A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
________________ test_delete_button_and_real_delete[chromium] _________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_delete_button_and_real_delete(page: Page):
        """
        E2E: Unchecking Dry Run enables Delete mode, triggers confirmation modal, and performs delete.
        """
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_delete_testing_data.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F1C71A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____________________ test_diagnostics_messaging[chromium] _____________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_diagnostics_messaging(page: Page):
        """
        E2E: Diagnostics messages (success, error, info) appear after actions.
        """
>       page.goto(f"{BASE_URL}/delete_testing_range")

tests\e2e\test_delete_testing_data.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2F9800>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/delete_testing_range
E           Call log:
E             - navigating to "http://169.254.169.254:2113/delete_testing_range", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_______________ test_list_staged_diagnostics_overlay[chromium] ________________

page = <Page url='about:blank'>

    def test_list_staged_diagnostics_overlay(page):
        """
        E2E: Load /list_staged, ensure a staged file is present, click discard, and check overlay/modal updates.
        This test now only verifies the discard modal workflow and overlay log for discards.
        """
        from playwright.sync_api import expect
        import os
        # Ensure at least one staged file exists
>       page.goto(f"{BASE_URL}/list_staged")

tests\e2e\test_excel_upload_workflows.py:643: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35CC20>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/list_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/list_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_______________________ test_upload_file_only[chromium] _______________________

page = <Page url='about:blank'>

    def test_upload_file_only(page: Page):
        """
        E2E: Upload a file via /upload_staged and verify it appears in /list_staged.
        Does NOT discard the file. This isolates the upload and staged list logic.
        """
        test_files = get_test_files()
        if not test_files:
            pytest.skip("No test files available for upload.")
        file_path = test_files[0]
        # Upload file
>       page.goto(f"{BASE_URL}/upload_staged")

tests\e2e\test_excel_upload_workflows.py:729: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F381800>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/upload_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/upload_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
__________________ test_upload_malformed_file_only[chromium] __________________

page = <Page url='about:blank'>
malformed_file_for_discard = 'malformed_test.json'

    def test_upload_malformed_file_only(page: Page, malformed_file_for_discard):
        """
        E2E: Create a malformed file, verify it appears in /list_staged.
        Does NOT discard the file. Isolates malformed file handling.
        """
        malformed_filename = malformed_file_for_discard
>       page.goto(f"{BASE_URL}/list_staged")

tests\e2e\test_excel_upload_workflows.py:888: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35CD60>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/list_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/list_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_________________ test_discard_malformed_file_only[chromium] __________________

page = <Page url='about:blank'>
malformed_file_for_discard = 'malformed_test.json'

    def test_discard_malformed_file_only(page: Page, malformed_file_for_discard):
        """
        E2E: Discard a malformed file from /list_staged, verifying modal/overlay, backend POST, and removal.
        Uses Playwright's recommended waiting/synchronization tools for robust async handling.
        """
        filename = malformed_file_for_discard
        # 1. Navigate to /list_staged
>       page.goto(f"{BASE_URL}/list_staged")

tests\e2e\test_excel_upload_workflows.py:900: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35FB00>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/list_staged
E           Call log:
E             - navigating to "http://169.254.169.254:2113/list_staged", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_________________ test_feedback_updates_page_loads[chromium] __________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_page_loads(page: Page):
        """
        E2E: Loads the Feedback Portal Updates page and checks for title, filter UI, and table presence.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2F8040>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____________ test_feedback_updates_filter_functionality[chromium] _____________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_filter_functionality(page: Page):
        """
        E2E: Tests the filter UI by applying a filter and checking that the table updates.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F788F40>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____________ test_feedback_updates_download_csv_button[chromium] _____________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_download_csv_button(page: Page):
        """
        E2E: Checks that the Download CSV button is present and enabled.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F380D60>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
________________ test_feedback_updates_accessibility[chromium] ________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_accessibility(page: Page):
        """
        E2E: Basic accessibility checks for the Feedback Updates page.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35EC00>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_________________ test_feedback_updates_empty_state[chromium] _________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_empty_state(page: Page):
        """
        E2E: Apply a filter that matches no records and check for empty state handling.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2F9800>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____________ test_feedback_updates_long_text_overflow[chromium] ______________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_long_text_overflow(page: Page):
        """
        E2E: Check that long text in fields/comments does not break table layout.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F78A020>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____________ test_feedback_updates_special_characters[chromium] ______________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_special_characters(page: Page):
        """
        E2E: Check that special characters render correctly and do not break filters.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2F96C0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____________ test_feedback_updates_date_range_boundaries[chromium] ____________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_date_range_boundaries(page: Page):
        """
        E2E: Use start/end date filters at the boundary of available data.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F78A840>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
__________ test_feedback_updates_csv_download_with_filters[chromium] __________

page = <Page url='about:blank'>
tmp_path = WindowsPath('C:/Users/tonyh/AppData/Local/Temp/pytest-of-tonyh/pytest-126/test_feedback_updates_csv_down0')

    @pytest.mark.e2e
    def test_feedback_updates_csv_download_with_filters(page: Page, tmp_path):
        """
        E2E: Apply a filter, download CSV, and check that the CSV only contains filtered results.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35C180>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____________ test_feedback_updates_rapid_filter_changes[chromium] _____________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_rapid_filter_changes(page: Page):
        """
        E2E: Rapidly change filters and apply them in succession, checking for UI stability.
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35FBA0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_______________ test_feedback_updates_large_data_set[chromium] ________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_feedback_updates_large_data_set(page: Page):
        """
        E2E: If possible, check that the table handles a large number of updates (pagination, scrolling).
        """
>       page.goto(f"{BASE_URL}/portal_updates")

tests\e2e\test_feedback_updates.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35D8A0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/portal_updates
E           Call log:
E             - navigating to "http://169.254.169.254:2113/portal_updates", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
________________________ test_homepage_loads[chromium] ________________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_homepage_loads(page: Page):
        """
        E2E: Loads the homepage and checks for title/header and incidence list presence.
        """
>       page.goto(BASE_URL)

tests\e2e\test_homepage.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2FAE80>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____________________ test_homepage_empty_state[chromium] _____________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_homepage_empty_state(page: Page):
        """
        E2E: Checks that the homepage handles the empty state (no incidences) gracefully.
        """
>       page.goto(BASE_URL)

tests\e2e\test_homepage.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F789C60>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
___________________ test_homepage_navigation_menu[chromium] ___________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_homepage_navigation_menu(page: Page):
        """
        E2E: Checks that the main navigation/menu is present and contains expected items.
        """
>       page.goto(BASE_URL)

tests\e2e\test_homepage.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F382840>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____________________ test_homepage_accessibility[chromium] ____________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_homepage_accessibility(page: Page):
        """
        E2E: Basic accessibility checks for the homepage.
        """
>       page.goto(BASE_URL)

tests\e2e\test_homepage.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540EE76FC0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_______________ test_homepage_card_content_and_links[chromium] ________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_homepage_card_content_and_links(page: Page):
        """
        E2E: Checks that each incidence card displays expected fields and has a valid link.
        """
>       page.goto(BASE_URL)

tests\e2e\test_homepage.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2FBEC0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
___________________ test_homepage_card_navigation[chromium] ___________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_homepage_card_navigation(page: Page):
        """
        E2E: Clicks the first incidence card's link and checks navigation to the detail/edit page.
        """
>       page.goto(BASE_URL)

tests\e2e\test_homepage.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F78B880>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_______________ test_homepage_pagination_or_scrolling[chromium] _______________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_homepage_pagination_or_scrolling(page: Page):
        """
        E2E: Checks for pagination or scrolling if many incidences are present.
        """
>       page.goto(BASE_URL)

tests\e2e\test_homepage.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F382980>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
__________ test_homepage_special_characters_and_long_text[chromium] ___________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_homepage_special_characters_and_long_text(page: Page):
        """
        E2E: Checks for special characters and long text in incidence card data.
        """
>       page.goto(BASE_URL)

tests\e2e\test_homepage.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F274680>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_________ test_diagnostics_overlay_on_diagnostic_test_page[chromium] __________

page = <Page url='about:blank'>

    def test_diagnostics_overlay_on_diagnostic_test_page(page: Page):
        """
        E2E: Load /java_script_diagnostic_test, check overlay for page load diagnostic, click diagnostics button, and check overlay updates.
        This test verifies:
        - Overlay is present and logs page load
        - Diagnostics button logs to overlay (including input value)
        - Waits are used to avoid race conditions
        """
>       page.goto(f"{BASE_URL}/java_script_diagnostic_test")

tests\e2e\test_javascript_logging.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F78BBA0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/java_script_diagnostic_test
E           Call log:
E             - navigating to "http://169.254.169.254:2113/java_script_diagnostic_test", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
___________________ test_list_uploads_page_loads[chromium] ____________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_list_uploads_page_loads(page: Page):
        """
        E2E: Loads the List Uploaded Files page and checks for title and table presence.
        """
>       page.goto(f"{BASE_URL}/list_uploads")

tests\e2e\test_list_uploads.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F382DE0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/list_uploads
E           Call log:
E             - navigating to "http://169.254.169.254:2113/list_uploads", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
___________________ test_list_uploads_file_links[chromium] ____________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_list_uploads_file_links(page: Page):
        """
        E2E: Checks that file links are present and valid in the uploaded files table.
        """
>       page.goto(f"{BASE_URL}/list_uploads")

tests\e2e\test_list_uploads.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F1C68E0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/list_uploads
E           Call log:
E             - navigating to "http://169.254.169.254:2113/list_uploads", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
__________________ test_list_uploads_accessibility[chromium] __________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_list_uploads_accessibility(page: Page):
        """
        E2E: Basic accessibility checks for the List Uploaded Files page.
        """
>       page.goto(f"{BASE_URL}/list_uploads")

tests\e2e\test_list_uploads.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35E0C0>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/list_uploads
E           Call log:
E             - navigating to "http://169.254.169.254:2113/list_uploads", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
___________________ test_list_uploads_empty_state[chromium] ___________________

page = <Page url='about:blank'>

    @pytest.mark.e2e
    def test_list_uploads_empty_state(page: Page):
        """
        E2E: Checks that the page handles the empty state (no uploaded files) gracefully.
        """
>       page.goto(f"{BASE_URL}/list_uploads")

tests\e2e\test_list_uploads.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F2F9800>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/list_uploads
E           Call log:
E             - navigating to "http://169.254.169.254:2113/list_uploads", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
____________________ test_calsmp_help_menu_links[chromium] ____________________

page = <Page url='about:blank'>

    def test_calsmp_help_menu_links(page: Page):
        """
        E2E: Verify the CalSMP & Help dropdown menu contains all expected links with correct href and target attributes.
        This test does NOT click the links or assert on the new tab's URL, since external resources may redirect to login pages or be inaccessible.
        """
        expected_links = [
            ("Plume Processing Resources", "Plume%20Processing%20Resources.docx"),
            ("Daily Protocol", "Daily%20CalSMP%20Protocol.docx"),
            ("Daily Processing Log", "Daily%20Plume%20Processing%20Log.docx"),
            ("Open Items Log", "Open%20items%20log.xlsx"),
            ("Plume Tracker", "10.93.112.44:5003"),
            ("Contact Manager", "internal-smdms-sdb-lb-shared-182971779.us-west-2.elb.amazonaws.com"),
            ("Feedback Portal Source Code & Documentation", "tony-held-carb.github.io/feedback_portal/")
        ]
        # Go to the main page
>       page.goto(BASE_URL)

tests\e2e\test_menu_calsmp_help.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F789440>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
_____ test_developer_utilities_menu_links_and_create_incidence[chromium] ______

page = <Page url='about:blank'>

    def test_developer_utilities_menu_links_and_create_incidence(page: Page):
        """
        E2E: Verify the Developer Utilities dropdown menu contains all expected items with valid hrefs.
        For 'Create Incidence' items, click and check dummy data as before.
        """
>       page.goto(BASE_URL)

tests\e2e\test_menu_developer_utilities.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\sync_api\_generated.py:9019: in goto
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_page.py:556: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_frame.py:153: in goto
    await self._channel.send(
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x000002540D6A1E90>
cb = <function Channel.send.<locals>.<lambda> at 0x000002540F35EB60>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ADDRESS_UNREACHABLE at http://169.254.169.254:2113/
E           Call log:
E             - navigating to "http://169.254.169.254:2113/", waiting until "load"

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\site-packages\playwright\_impl\_connection.py:558: Error
=========================== short test summary info ===========================
FAILED tests/e2e/test_delete_testing_data.py::test_delete_testing_range_page_loads[chromium]
FAILED tests/e2e/test_delete_testing_data.py::test_min_max_id_inputs[chromium]
FAILED tests/e2e/test_delete_testing_data.py::test_dry_run_checkbox_and_preview[chromium]
FAILED tests/e2e/test_delete_testing_data.py::test_delete_button_and_real_delete[chromium]
FAILED tests/e2e/test_delete_testing_data.py::test_diagnostics_messaging[chromium]
FAILED tests/e2e/test_excel_upload_workflows.py::test_list_staged_diagnostics_overlay[chromium]
FAILED tests/e2e/test_excel_upload_workflows.py::test_upload_file_only[chromium]
FAILED tests/e2e/test_excel_upload_workflows.py::test_upload_malformed_file_only[chromium]
FAILED tests/e2e/test_excel_upload_workflows.py::test_discard_malformed_file_only[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_page_loads[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_filter_functionality[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_download_csv_button[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_accessibility[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_empty_state[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_long_text_overflow[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_special_characters[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_date_range_boundaries[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_csv_download_with_filters[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_rapid_filter_changes[chromium]
FAILED tests/e2e/test_feedback_updates.py::test_feedback_updates_large_data_set[chromium]
FAILED tests/e2e/test_homepage.py::test_homepage_loads[chromium] - playwright...
FAILED tests/e2e/test_homepage.py::test_homepage_empty_state[chromium] - play...
FAILED tests/e2e/test_homepage.py::test_homepage_navigation_menu[chromium] - ...
FAILED tests/e2e/test_homepage.py::test_homepage_accessibility[chromium] - pl...
FAILED tests/e2e/test_homepage.py::test_homepage_card_content_and_links[chromium]
FAILED tests/e2e/test_homepage.py::test_homepage_card_navigation[chromium] - ...
FAILED tests/e2e/test_homepage.py::test_homepage_pagination_or_scrolling[chromium]
FAILED tests/e2e/test_homepage.py::test_homepage_special_characters_and_long_text[chromium]
FAILED tests/e2e/test_javascript_logging.py::test_diagnostics_overlay_on_diagnostic_test_page[chromium]
FAILED tests/e2e/test_list_uploads.py::test_list_uploads_page_loads[chromium]
FAILED tests/e2e/test_list_uploads.py::test_list_uploads_file_links[chromium]
FAILED tests/e2e/test_list_uploads.py::test_list_uploads_accessibility[chromium]
FAILED tests/e2e/test_list_uploads.py::test_list_uploads_empty_state[chromium]
FAILED tests/e2e/test_menu_calsmp_help.py::test_calsmp_help_menu_links[chromium]
FAILED tests/e2e/test_menu_developer_utilities.py::test_developer_utilities_menu_links_and_create_incidence[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_upload_page_loads[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_input_exists[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_drop_zone_exists[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_invalid_file_upload[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_empty_file_upload[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_large_file_upload[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestUploadPageElements::test_page_structure[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestUploadPageElements::test_form_structure[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::TestUploadPageElements::test_accessibility_features[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_discard_staged_file_only[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::test_upload_multiple_files_only[chromium]
ERROR tests/e2e/test_excel_upload_workflows.py::test_discard_each_staged_file_separately[chromium]
ERROR tests/e2e/test_review_staged.py::test_hide_changes_checkbox[chromium]
ERROR tests/e2e/test_review_staged.py::test_field_search_filter[chromium] - p...
ERROR tests/e2e/test_review_staged.py::test_change_summary_card[chromium] - p...
ERROR tests/e2e/test_review_staged.py::test_cancel_and_save_buttons[chromium]
ERROR tests/e2e/test_review_staged.py::test_confirm_checkboxes[chromium] - pl...
ERROR tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx]
ERROR tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx]
ERROR tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx]
ERROR tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data_update.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data_update.xlsx]
ERROR tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx]
ERROR tests/e2e/test_review_staged.py::test_incremental_upload[chromium-feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx]
ERROR tests/e2e/test_excel_upload_workflows.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx]
================== 35 failed, 1 skipped, 51 errors in 13.47s ==================
