============================= test session starts =============================
platform win32 -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\tonyh\miniconda3\envs\mini_conda_01\python.exe
cachedir: .pytest_cache
rootdir: D:\local\cursor\feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, asyncio-1.1.0, base-url-2.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 105 items / 65 deselected / 40 selected

tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] SKIPPED [  2%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] FAILED [  5%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_malformed_staged_file_handling[chromium] FAILED [  7%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] FAILED [ 10%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] SKIPPED [ 12%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] FAILED [ 15%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] FAILED [ 17%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] SKIPPED [ 20%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] FAILED [ 22%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] FAILED [ 25%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] SKIPPED [ 27%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] FAILED [ 30%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] FAILED [ 32%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] SKIPPED [ 35%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] FAILED [ 37%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] FAILED [ 40%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] SKIPPED [ 42%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] FAILED [ 45%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] FAILED [ 47%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] SKIPPED [ 50%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] FAILED [ 52%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] FAILED [ 55%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] SKIPPED [ 57%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] FAILED [ 60%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] FAILED [ 62%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] SKIPPED [ 65%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] FAILED [ 67%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] FAILED [ 70%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] SKIPPED [ 72%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] FAILED [ 75%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] FAILED [ 77%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] SKIPPED [ 80%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] FAILED [ 82%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] FAILED [ 85%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] SKIPPED [ 87%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] FAILED [ 90%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] FAILED [ 92%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] SKIPPED [ 95%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] FAILED [ 97%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] FAILED [100%]

================================== FAILURES ===================================
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902D290>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2001_ts_20250719_225220.json' (repr: 'id_2001_ts_20250719_225220.json')
_____ TestExcelUploadStaged.test_malformed_staged_file_handling[chromium] _____

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1903BE90>
page = <Page url='http://127.0.0.1:5000/list_staged'>
tmp_path = WindowsPath('C:/Users/tonyh/AppData/Local/Temp/pytest-of-tonyh/pytest-70/test_malformed_staged_file_han0')

    def test_malformed_staged_file_handling(self, page: Page, tmp_path):
        """
        E2E: Create a malformed JSON file in the staging dir, verify it appears in the malformed section, and can be discarded.
        Uses the new custom modal and overlay logging system.
        """
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        staging_dir = Path("portal_uploads/staging")
        staging_dir.mkdir(parents=True, exist_ok=True)
        malformed_file = staging_dir / "malformed_test.json"
        malformed_file.write_text("{ this is not valid json }")
        print(f"Malformed file to discard: '{malformed_file.name}' (repr: {repr(malformed_file.name)})")
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert "malformed_test.json" in page.content(), "Malformed file not listed in /list_staged"
        discard_btn = page.locator(f"form[action*='malformed_test.json'] button[data-js-logging-context='discard-malformed']").first
>       discard_btn.click()

tests\e2e\test_excel_upload_playwright_pytest.py:887: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\sync_api\_generated.py:15505: in click
    self._sync(
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_locator.py:160: in click
    return await self._frame.click(self._selector, strict=True, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_frame.py:521: in click
    await self._channel.send("click", self._timeout, locals_to_params(locals()))
C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_connection.py:69: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <playwright._impl._connection.Connection object at 0x0000021A146CD110>
cb = <function Channel.send.<locals>.<lambda> at 0x0000021A194BB420>
is_internal = False, title = None

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(
            task, "__pw_stack__", None
        ) or inspect.stack(0)
    
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.
E           Call log:
E             - waiting for locator("form[action*='malformed_test.json'] button[data-js-logging-context='discard-malformed']").first

C:\Users\tonyh\miniconda3\envs\mini_conda_01\Lib\site-packages\playwright\_impl\_connection.py:558: TimeoutError
---------------------------- Captured stdout call -----------------------------
Malformed file to discard: 'malformed_test.json' (repr: 'malformed_test.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902D510>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2002_ts_20250719_225255.json' (repr: 'id_2002_ts_20250719_225255.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902D790>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
>       assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
E       AssertionError: Could not extract staged filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:770: AssertionError
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] _

page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
>       assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
E       AssertionError: Could not extract staged filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:1010: AssertionError
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902DA10>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2011_ts_20250719_225330.json' (repr: 'id_2011_ts_20250719_225330.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902DCD0>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2012_ts_20250719_225335.json' (repr: 'id_2012_ts_20250719_225335.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902DFD0>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2021_ts_20250719_225338.json' (repr: 'id_2021_ts_20250719_225338.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902E2D0>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2022_ts_20250719_225342.json' (repr: 'id_2022_ts_20250719_225342.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902E5D0>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2031_ts_20250719_225346.json' (repr: 'id_2031_ts_20250719_225346.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902E8D0>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2032_ts_20250719_225349.json' (repr: 'id_2032_ts_20250719_225349.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902EB90>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2041_ts_20250719_225353.json' (repr: 'id_2041_ts_20250719_225353.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902EE90>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2051_ts_20250719_225357.json' (repr: 'id_2051_ts_20250719_225357.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902F190>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2051_ts_20250719_225400.json' (repr: 'id_2051_ts_20250719_225400.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x0000021A1902F490>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Uses the new custom modal and overlay logging system.
        """
        import re
        from pathlib import Path
        from playwright.sync_api import expect
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename using the new modal
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:780: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2052_ts_20250719_225404.json' (repr: 'id_2052_ts_20250719_225404.json')
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] _

page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        from playwright.sync_api import expect
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        overlay = page.locator('#js-diagnostics').inner_text()
        print(f"[DIAGNOSTICS OVERLAY after load] {overlay}")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[data-js-logging-context='discard-staged']").first
        discard_btn.click()
        modal = page.locator('#discardConfirmModal')
>       assert modal.is_visible(), "Custom discard modal did not appear."
E       AssertionError: Custom discard modal did not appear.
E       assert False
E        +  where False = is_visible()
E        +    where is_visible = <Locator frame=<Frame name= url='http://127.0.0.1:5000/list_staged'> selector='#discardConfirmModal'>.is_visible

tests\e2e\test_excel_upload_playwright_pytest.py:1021: AssertionError
---------------------------- Captured stdout call -----------------------------
[DIAGNOSTICS OVERLAY after load] [JS_DIAG] Page loaded: list_staged

=========================== short test summary info ===========================
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_malformed_staged_file_handling[chromium]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx]
========== 27 failed, 13 skipped, 65 deselected in 111.10s (0:01:51) ==========
