============================= test session starts ==============================
platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- /home/tonyh/miniconda3/envs/mini_conda_02/bin/python
cachedir: .pytest_cache
rootdir: /home/tonyh/git_repos/feedback_portal
configfile: pytest.ini
plugins: base-url-2.1.0, anyio-4.7.0, playwright-0.7.0, asyncio-1.1.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 599 items

tests/arb/portal/config/test_accessors.py::test_get_processed_versions_dir PASSED
tests/arb/portal/config/test_accessors.py::test_get_upload_folder PASSED
tests/arb/portal/config/test_accessors.py::test_get_payload_save_dir PASSED
tests/arb/portal/config/test_accessors.py::test_get_app_mode_default PASSED
tests/arb/portal/config/test_accessors.py::test_get_app_mode_custom PASSED
tests/arb/portal/config/test_accessors.py::test_get_database_uri PASSED
tests/arb/portal/config/test_accessors.py::test_missing_config_keys PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_production_via_config_type PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_production_via_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_testing_via_config_type PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_testing_via_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_default PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_empty_strings PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_development_invalid_values PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_case_insensitive PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_priority_config_type_over_flask_env PASSED
tests/arb/portal/config/test_config_init.py::test_get_config_mixed_case_environment PASSED
tests/arb/portal/config/test_settings.py::test_base_config_defaults PASSED
tests/arb/portal/config/test_settings.py::test_development_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_production_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_testing_config_inherits PASSED
tests/arb/portal/config/test_settings.py::test_env_override_sqlalchemy_database_uri PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_true PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_false PASSED
tests/arb/portal/config/test_settings.py::test_fast_load_environment_variable_not_set PASSED
tests/arb/portal/config/test_settings.py::test_secret_key_from_environment PASSED
tests/arb/portal/config/test_settings.py::test_secret_key_default_when_not_set PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_venting_exclusion_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_ogi_performed_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_method21_performed_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_equipment_other_description_conditional PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_component_other_description_conditional PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_ogi_result_requires_method21 PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestOilGasCrossFieldLogic::test_timestamp_validation_logic PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_emission_identified_conditional_fields PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_lmr_included_conditional_description PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_lmr_planned_conditional_description PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_contingent_dropdown_population PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_cross_field_validation_no_leak_detected PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_cross_field_validation_operator_aware PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_timestamp_validation_logic PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestLandfillCrossFieldLogic::test_emission_cause_repeat_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestUploadFormCrossFieldLogic::test_file_type_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestUploadFormCrossFieldLogic::test_file_required_validation PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_regulatory_compliance_across_sectors PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_conditional_field_consistency PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicIntegration::test_timestamp_validation_consistency PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_empty_string_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_none_value_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_invalid_choice_handling PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_multiple_conditional_changes PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_conditional_logic_performance PASSED
tests/arb/portal/test_cross_field_conditional_logic.py::test_all_cross_field_logic_scenarios PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_og_dummy_form_data_keys PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_landfill_dummy_form_data_keys PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_og_dummy_form_data_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_landfill_dummy_form_data_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_dummy_data_datetime_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_dummy_data_sector_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_module_level_dropdowns_are_dicts PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_returns_tuple_and_dicts PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_please_select_present PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_tuple_structure PASSED
tests/arb/portal/test_db_hardcoded.py::test_get_excel_dropdown_data_deepcopy_immutability PASSED
tests/arb/portal/test_db_hardcoded.py::test_empty_dropdown_edge_case PASSED
tests/arb/portal/test_db_hardcoded.py::test_contingent_dropdown_structure PASSED
tests/arb/portal/test_db_hardcoded.py::test_all_expected_dropdown_keys_present PASSED
tests/arb/portal/test_db_hardcoded.py::test_dropdown_values_not_empty PASSED
tests/arb/portal/test_db_hardcoded.py::test_contingent_dropdown_completeness PASSED
tests/arb/portal/test_db_hardcoded.py::test_dropdown_data_consistency PASSED
tests/arb/portal/test_db_hardcoded.py::test_sector_constants_are_lists PASSED
tests/arb/portal/test_db_hardcoded.py::test_logger_is_configured PASSED
tests/arb/portal/test_db_hardcoded.py::test_sector_constants_content PASSED
tests/arb/portal/test_db_hardcoded.py::test_selector_list_to_tuples_matches_canonical SKIPPED
tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload [DIAG] test_files_path=feedback_forms/testing_versions/standard
[DIAG] os.getcwd()=/home/tonyh/git_repos/feedback_portal
[DIAG] test_files_path absolute=/home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard
[DIAG] test_files_path exists=True
[DIAG] Files in feedback_forms/testing_versions/standard:
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_03_blank.xlsx
  - feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx
  - feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_02_bad_data.xlsx
  - feedback_forms/testing_versions/standard/expected_results
  - feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data_update.xlsx
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_landfill_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_energy_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_generic_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_landfill_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_energy_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_generic_staged_upload [DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_field_level_value_assertions [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_database_state_verification [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/landfill_operator_feedback_v071_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/energy_operator_feedback_v003_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/generic_operator_feedback_v002_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_invalid_excel_file PASSED
tests/arb/portal/test_file_upload_suite.py::test_corrupted_excel_file PASSED
tests/arb/portal/test_file_upload_suite.py::test_missing_required_fields PASSED
tests/arb/portal/test_file_upload_suite.py::test_negative_validation_errors PASSED
tests/arb/portal/test_file_upload_suite.py::test_file_size_limits PASSED
tests/arb/portal/test_file_upload_suite.py::test_concurrent_upload_handling [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_file_upload_suite.py::test_malicious_file_handling PASSED
tests/arb/portal/test_file_upload_suite.py::test_data_integrity_through_processing_pipeline [DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
[DIAG] Looking for file: feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx (absolute: /home/tonyh/git_repos/feedback_portal/feedback_forms/testing_versions/standard/dairy_digester_operator_feedback_v006_test_01_good_data.xlsx) exists=True
PASSED
tests/arb/portal/test_globals.py::test_globals_initial_state PASSED
tests/arb/portal/test_globals.py::test_load_drop_downs_sets_globals SKIPPED
tests/arb/portal/test_globals.py::test_load_type_mapping_sets_db_column_types SKIPPED
tests/arb/portal/test_globals.py::test_load_drop_downs_integration PASSED
tests/arb/portal/test_globals.py::test_load_type_mapping_integration PASSED
tests/arb/portal/test_globals.py::test_globals_integration_with_real_data PASSED
tests/arb/portal/test_globals.py::test_globals_persistence_across_calls PASSED
tests/arb/portal/test_in_memory_staging.py::TestUploadProcessingConfig::test_upload_processing_config_defaults PASSED
tests/arb/portal/test_in_memory_staging.py::TestUploadProcessingConfig::test_upload_processing_config_direct_upload PASSED
tests/arb/portal/test_in_memory_staging.py::TestUploadProcessingConfig::test_upload_processing_config_staged_upload PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_in_memory_staging_creation PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_database_success PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_database_validation_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_database_exception PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_staging_file_success PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_staging_file_directory_creation PASSED
tests/arb/portal/test_in_memory_staging.py::TestInMemoryStaging::test_to_staging_file_permission_error PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadToMemory::test_process_upload_to_memory_success PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadToMemory::test_process_upload_to_memory_save_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadToMemory::test_process_upload_to_memory_conversion_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadToMemory::test_process_upload_to_memory_validation_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadWithConfig::test_process_upload_with_config_direct_upload PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadWithConfig::test_process_upload_with_config_staged_upload PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadWithConfig::test_process_upload_with_config_both_persistence PASSED
tests/arb/portal/test_in_memory_staging.py::TestProcessUploadWithConfig::test_process_upload_with_config_memory_processing_failure PASSED
tests/arb/portal/test_in_memory_staging.py::TestArchitecturalBenefits::test_perfect_separation_of_concerns PASSED
tests/arb/portal/test_in_memory_staging.py::TestArchitecturalBenefits::test_configuration_driven_behavior PASSED
tests/arb/portal/test_in_memory_staging.py::TestArchitecturalBenefits::test_result_types_provide_type_safety PASSED
tests/arb/portal/test_integration_app.py::test_app_starts PASSED
tests/arb/portal/test_integration_app.py::test_homepage_route PASSED
tests/arb/portal/test_integration_app.py::test_404_route PASSED
tests/arb/portal/test_integration_app.py::test_db_session_creation PASSED
tests/arb/portal/test_integration_app.py::test_error_handling PASSED
tests/arb/portal/test_integration_app.py::test_list_uploads_route PASSED
tests/arb/portal/test_integration_app.py::test_diagnostics_route PASSED
tests/arb/portal/test_integration_app.py::test_portal_updates_route PASSED
tests/arb/portal/test_integration_app.py::test_search_route PASSED
tests/arb/portal/test_integration_app.py::test_show_log_file_route PASSED
tests/arb/portal/test_integration_app.py::test_og_incidence_create_route PASSED
tests/arb/portal/test_integration_app.py::test_landfill_incidence_create_route PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_basic PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_no_changes PASSED
tests/arb/portal/test_json_update_util.py::test_apply_json_patch_and_log_integration_filter_paths PASSED
tests/arb/portal/test_result_types.py::TestStagingResult::test_staging_result_creation PASSED
tests/arb/portal/test_result_types.py::TestStagingResult::test_staging_result_error_case PASSED
tests/arb/portal/test_result_types.py::TestStagingResult::test_staging_result_immutability PASSED
tests/arb/portal/test_result_types.py::TestUploadResult::test_upload_result_creation PASSED
tests/arb/portal/test_result_types.py::TestUploadResult::test_upload_result_error_case PASSED
tests/arb/portal/test_result_types.py::TestUploadResult::test_upload_result_immutability PASSED
tests/arb/portal/test_result_types.py::TestResultTypesModule::test_module_import PASSED
tests/arb/portal/test_result_types.py::TestResultTypesModule::test_result_types_documentation PASSED
tests/arb/portal/test_route_consolidation.py::TestConsolidatedUploadRoute::test_unified_config_creation PASSED
tests/arb/portal/test_route_consolidation.py::TestConsolidatedUploadRoute::test_standard_configurations PASSED
tests/arb/portal/test_route_consolidation.py::TestConsolidatedUploadRoute::test_configuration_validation PASSED
tests/arb/portal/test_route_consolidation.py::TestConsolidatedUploadRoute::test_unified_processing_pipeline_integration PASSED
tests/arb/portal/test_route_consolidation.py::TestConfigurationHandling::test_different_upload_type_configurations PASSED
tests/arb/portal/test_route_consolidation.py::TestConfigurationHandling::test_configuration_summary_generation PASSED
tests/arb/portal/test_route_consolidation.py::TestTemplateRendering::test_template_configuration_display PASSED
tests/arb/portal/test_route_consolidation.py::TestTemplateRendering::test_template_form_elements PASSED
tests/arb/portal/test_route_consolidation.py::TestIntegration::test_unified_pipeline_integration PASSED
tests/arb/portal/test_route_consolidation.py::TestIntegration::test_backward_compatibility_structure PASSED
tests/arb/portal/test_route_consolidation.py::TestErrorHandling::test_invalid_configuration_handling PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_get_request_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_get_request_with_message_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_post_no_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_post_empty_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_post_invalid_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_success_case_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_refactored_route_specific_error_handling PASSED
tests/arb/portal/test_route_equivalence.py::TestRefactoredRouteImprovements::test_refactored_route_uses_staging_result PASSED
tests/arb/portal/test_route_equivalence.py::TestRefactoredRouteImprovements::test_refactored_route_specific_error_types PASSED
tests/arb/portal/test_route_equivalence.py::TestRefactoredRouteImprovements::test_refactored_route_exception_handling PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_accessible PASSED
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_get_request_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_get_request_with_message_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_post_no_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_post_empty_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_post_invalid_file_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_success_case_equivalence PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRefactoredRouteImprovements::test_refactored_route_uses_upload_result PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRefactoredRouteImprovements::test_refactored_route_specific_error_types PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRefactoredRouteImprovements::test_refactored_route_exception_handling PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteNavigation::test_refactored_upload_route_accessible PASSED
tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteNavigation::test_refactored_upload_route_in_navigation PASSED
tests/arb/portal/test_route_equivalence.py::test_route_function_signatures PASSED
tests/arb/portal/test_route_upload_helpers.py::TestValidateUploadRequest::test_validate_upload_request_with_valid_file PASSED
tests/arb/portal/test_route_upload_helpers.py::TestValidateUploadRequest::test_validate_upload_request_with_no_file PASSED
tests/arb/portal/test_route_upload_helpers.py::TestValidateUploadRequest::test_validate_upload_request_with_empty_filename PASSED
tests/arb/portal/test_route_upload_helpers.py::TestValidateUploadRequest::test_validate_upload_request_with_none_filename PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_missing_id PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_conversion_failed PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_file_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_database_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetErrorMessageForType::test_get_error_message_for_unknown_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetSuccessMessageForUpload::test_get_success_message_for_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestGetSuccessMessageForUpload::test_get_success_message_for_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadForm::test_render_upload_form_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadForm::test_render_upload_form_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadError::test_render_upload_error_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadError::test_render_upload_error_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_with_missing_id PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_with_conversion_failed PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadError::test_handle_upload_error_with_file_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_with_diagnostic_func PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_without_diagnostic_func PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadException::test_handle_upload_exception_with_diagnostic_error PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_with_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_with_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestHandleUploadSuccess::test_handle_upload_success_with_default_upload_type PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_with_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_with_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadPage::test_render_upload_page_with_default_upload_type PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadSuccessPage::test_render_upload_success_page_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadSuccessPage::test_render_upload_success_page_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadSuccessPage::test_render_upload_success_page_with_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadSuccessPage::test_render_upload_success_page_with_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_function_signature PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_docstring PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_with_direct_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_with_staged_upload PASSED
tests/arb/portal/test_route_upload_helpers.py::TestRenderUploadErrorPage::test_render_upload_error_page_with_error_details PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_route_function_signature PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_get_request PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_success PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_missing_id_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_conversion_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_file_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_database_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_unknown_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_no_file_selected PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_with_message_parameter PASSED
tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_exception_handling PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_route_function_signature PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_get_request PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_success PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_missing_id_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_conversion_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_file_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_database_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_unknown_error PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_no_file_selected PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_with_message_parameter PASSED
tests/arb/portal/test_routes.py::test_upload_file_refactored_exception_handling PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route PASSED
tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_landfill_incidence_create_route PASSED
tests/arb/portal/test_routes_integration.py::test_landfill_incidence_create_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_delete_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_delete_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_list_uploads_route PASSED
tests/arb/portal/test_routes_integration.py::test_list_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_get_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_no_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_empty_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_post_invalid_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_get_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_no_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_empty_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_staged_route_post_invalid_file PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post_empty_search PASSED
tests/arb/portal/test_routes_integration.py::test_search_route_post_no_search_param PASSED
tests/arb/portal/test_routes_integration.py::test_diagnostics_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_dropdown_dict_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_database_structure_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_feedback_form_structure_route PASSED
tests/arb/portal/test_routes_integration.py::test_show_log_file_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_filters PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_sorting PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route_with_filters PASSED
tests/arb/portal/test_routes_integration.py::test_review_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_review_staged_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_confirm_staged_route PASSED
tests/arb/portal/test_routes_integration.py::test_confirm_staged_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_discard_staged_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_apply_staged_update_route PASSED
tests/arb/portal/test_routes_integration.py::test_apply_staged_update_route_invalid_id PASSED
tests/arb/portal/test_routes_integration.py::test_serve_file_route PASSED
tests/arb/portal/test_routes_integration.py::test_serve_file_route_invalid_filename PASSED
tests/arb/portal/test_routes_integration.py::test_index_route PASSED
tests/arb/portal/test_routes_integration.py::test_incidence_update_route_multiple_rows_error PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_exception_handling PASSED
tests/arb/portal/test_routes_integration.py::test_upload_staged_route_exception_handling PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_route_with_special_characters_in_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_staged_route_with_special_characters_in_message PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_pagination PASSED
tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_sorting PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_get PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_get_with_message PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_post_no_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_post_empty_file PASSED
tests/arb/portal/test_routes_integration.py::test_upload_file_refactored_route_post_invalid_file PASSED
tests/arb/portal/test_sqla_models.py::test_uploaded_file_repr PASSED
tests/arb/portal/test_sqla_models.py::test_portal_update_repr PASSED
tests/arb/portal/test_sqla_models.py::test_run_diagnostics_success PASSED
tests/arb/portal/test_sqla_models.py::test_run_diagnostics_db_error PASSED
tests/arb/portal/test_sqla_models.py::test_uploaded_file_integration PASSED
tests/arb/portal/test_sqla_models.py::test_portal_update_integration PASSED
tests/arb/portal/test_startup_db_integration.py::test_db_create_creates_tables PASSED
tests/arb/portal/test_startup_db_integration.py::test_db_initialize_and_create_runs PASSED
tests/arb/portal/test_startup_flask.py::test_configure_flask_app_can_be_called PASSED
tests/arb/portal/test_startup_flask.py::test_configure_flask_app_returns_none PASSED
tests/arb/portal/test_startup_flask.py::test_upload_configuration_applied PASSED
tests/arb/portal/test_startup_flask.py::test_upload_configuration_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_configuration_applied PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_undefined_behavior_set PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_globals_applied PASSED
tests/arb/portal/test_startup_flask.py::test_california_timezone_is_zoneinfo PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_applied PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_are_correct_functions PASSED
tests/arb/portal/test_startup_flask.py::test_logging_level_set_from_config PASSED
tests/arb/portal/test_startup_flask.py::test_logging_level_defaults_to_info PASSED
tests/arb/portal/test_startup_flask.py::test_werkzeug_logging_disabled PASSED
tests/arb/portal/test_startup_flask.py::test_werkzeug_logging_disabled_affects_global PASSED
tests/arb/portal/test_startup_flask.py::test_app_name_global_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_california_tz_global_overwrites_existing PASSED
tests/arb/portal/test_startup_flask.py::test_jinja_filters_overwrite_existing PASSED
tests/arb/portal/test_startup_flask.py::test_configuration_is_idempotent PASSED
tests/arb/portal/test_startup_flask.py::test_all_jinja_settings_configured PASSED
tests/arb/portal/test_startup_flask.py::test_all_app_config_settings_configured PASSED
tests/arb/portal/test_startup_flask.py::test_logging_debug_messages_emitted PASSED
tests/arb/portal/test_startup_flask.py::test_upload_path_is_valid_directory PASSED
tests/arb/portal/test_startup_flask.py::test_max_content_length_is_reasonable PASSED
tests/arb/portal/test_startup_flask.py::test_function_accepts_flask_app_instance PASSED
tests/arb/portal/test_startup_flask.py::test_function_modifies_app_in_place PASSED
tests/arb/portal/test_startup_runtime_info.py::test_platform_constants_defined PASSED
tests/arb/portal/test_startup_runtime_info.py::test_platform_detection_logic PASSED
tests/arb/portal/test_startup_runtime_info.py::test_path_constants_defined_and_types PASSED
tests/arb/portal/test_startup_runtime_info.py::test_path_structure PASSED
tests/arb/portal/test_startup_runtime_info.py::test_required_directories_exist PASSED
tests/arb/portal/test_startup_runtime_info.py::test_directory_creation_idempotent PASSED
tests/arb/portal/test_startup_runtime_info.py::test_print_runtime_diagnostics_logs_all PASSED
tests/arb/portal/test_startup_runtime_info.py::test_print_runtime_diagnostics_multiple_calls PASSED
tests/arb/portal/test_startup_runtime_info.py::test_log_file_path_is_file PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUploadAndProcessFileUnified::test_upload_and_process_file_unified_success PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUploadAndProcessFileUnified::test_upload_and_process_file_unified_failure PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUploadAndProcessFileUnified::test_upload_and_process_file_unified_configuration PASSED
tests/arb/portal/test_unified_upload_functions.py::TestStageUploadedFileForReviewUnified::test_stage_uploaded_file_for_review_unified_success PASSED
tests/arb/portal/test_unified_upload_functions.py::TestStageUploadedFileForReviewUnified::test_stage_uploaded_file_for_review_unified_failure PASSED
tests/arb/portal/test_unified_upload_functions.py::TestStageUploadedFileForReviewUnified::test_stage_uploaded_file_for_review_unified_configuration PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUnifiedFunctionEquivalence::test_function_signatures_match PASSED
tests/arb/portal/test_unified_upload_functions.py::TestUnifiedFunctionEquivalence::test_return_types_match PASSED
tests/arb/portal/test_unified_upload_functions.py::TestArchitecturalBenefits::test_code_duplication_elimination PASSED
tests/arb/portal/test_unified_upload_functions.py::TestArchitecturalBenefits::test_configuration_driven_behavior PASSED
tests/arb/portal/test_unified_upload_functions.py::TestArchitecturalBenefits::test_single_point_of_maintenance PASSED
tests/arb/portal/test_unified_upload_functions.py::TestPerformanceAndMemoryUsage::test_memory_efficiency PASSED
tests/arb/portal/test_unified_upload_functions.py::TestPerformanceAndMemoryUsage::test_reduced_code_paths PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestUnifiedUploadConfig::test_valid_direct_original_config PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestUnifiedUploadConfig::test_valid_staged_refactored_config PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestUnifiedUploadConfig::test_invalid_upload_type PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestUnifiedUploadConfig::test_invalid_core_logic_function PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestUnifiedUploadConfig::test_staged_original_warning PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestGetCoreLogicFunction::test_direct_original_logic PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestGetCoreLogicFunction::test_direct_refactored_logic PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestGetCoreLogicFunction::test_staged_original_logic PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestGetCoreLogicFunction::test_staged_refactored_logic PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestGetCoreLogicFunction::test_invalid_upload_type PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestGetCoreLogicFunction::test_invalid_core_logic_function PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestProcessUploadUnified::test_successful_upload PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestProcessUploadUnified::test_failed_upload PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestProcessUploadUnified::test_exception_handling PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestProcessUploadUnified::test_logging PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestStandardConfigurations::test_get_standard_configurations PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestStandardConfigurations::test_create_custom_configuration PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestConfigurationValidation::test_valid_configuration PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestConfigurationValidation::test_invalid_configuration PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestConfigurationValidation::test_get_configuration_summary PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestIntegration::test_direct_upload_workflow PASSED
tests/arb/portal/test_unified_upload_pipeline.py::TestIntegration::test_staged_upload_workflow PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_upload_file_logic_success PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_upload_file_logic_missing_id PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_upload_file_refactored_logic_success PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_upload_file_refactored_logic_error PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_upload_file_staged_logic_success PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_upload_file_staged_logic_missing_id PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_upload_file_staged_refactored_logic_success PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_upload_file_staged_refactored_logic_error PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_exception_handling PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicFunctions::test_get_upload_folder_logic PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicResult::test_upload_logic_result_creation PASSED
tests/arb/portal/test_upload_logic.py::TestUploadLogicResult::test_upload_logic_result_with_errors PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_with_valid_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_with_custom_tab_name PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_tab PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_tab_contents PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_tab_and_sector_missing_sector PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_xl_dict_to_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_xl_dict_to_database_with_mock_db PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_empty_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_with_mock_components PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_new_row_backfill PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_json_file_to_db_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_json_file_to_db_with_mock_components PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_update_db_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_stage_only_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_excel_to_json_if_valid_with_excel_file PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_excel_to_json_if_valid_with_non_excel_file PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_sector_from_json PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_sector_from_json_missing_sector PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_store_staged_payload PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_all_functions_exist PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_payload_for_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_payload_for_database_with_valid_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_payload_for_database_with_empty_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_payload_for_database_with_none_data PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_resolve_database_row_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_resolve_database_row_with_existing_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_resolve_database_row_with_new_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_update_model_with_payload_and_commit_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_update_model_with_payload_and_commit_with_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_update_model_with_payload_and_commit_without_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_primary_key_from_model_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_primary_key_from_model_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_extract_primary_key_from_model_missing_attribute PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_uses_smaller_functions PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_equivalent_to_original PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_with_dry_run PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_named_tuple PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_error_case PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_missing PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_invalid PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_file_error PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_conversion_failed PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_missing_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_process_file_database_error PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_file_error PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_conversion_failed PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_missing_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_database_error PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_equivalent_to_original PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_with_result_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_convert_file_to_json_with_result_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_with_result_missing_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_validate_id_from_json_with_result_invalid_id PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_create_staged_file_with_result_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_with_result_function_signature PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_with_result_success PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_insert_json_into_database_with_result_failure PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_new_helper_functions_use_result_types PASSED
tests/arb/portal/test_utils_db_ingest_util.py::test_new_helper_functions_equivalent_to_original PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_function_signature PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_retrieves_existing_row PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_when_id_provided_but_not_found PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_with_auto_generated_id PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_adds_to_session_when_requested PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_does_not_add_to_session_by_default PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_handles_commit_failure PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_raises_error_for_invalid_table PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_uses_custom_primary_key PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_creates_new_row_with_custom_primary_key PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_logs_detailed_diagnostics PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_handles_attribute_error_gracefully PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_session_state_tracking PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_default_parameters PASSED
tests/arb/portal/test_utils_db_introspection_util.py::test_get_ensured_row_returns_correct_tuple_structure PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_function_signature PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_valid_data PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_path_object PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_none_status_and_description PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_default_parameters PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_raises_error_for_none_filename PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_handles_commit_failure PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_logs_debug_messages PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_empty_strings PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_unicode_filename PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_long_description PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_returns_none PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_creates_audit_record PASSED
tests/arb/portal/test_utils_file_upload_util.py::test_add_file_to_upload_table_with_special_characters PASSED
tests/arb/portal/test_utils_form_mapper.py::test_apply_portal_update_filters_function_signature PASSED
tests/arb/portal/test_utils_form_mapper.py::test_no_filters_returns_original_query PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_key_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_user_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_comments_applies_ilike PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_exact_and_range PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_empty_and_invalid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_open_ended PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_id_incidence_spaces_and_commas PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_valid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_invalid PASSED
tests/arb/portal/test_utils_form_mapper.py::test_filter_date_range_missing PASSED
tests/arb/portal/test_utils_form_mapper.py::test_combined_filters_all_types PASSED
tests/arb/portal/test_utils_form_mapper.py::test_apply_portal_update_filters_handles_missing_args PASSED
tests/arb/portal/test_utils_route_util.py::test_incidence_prep_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_function_signature PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_with_data PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_empty_data PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_success PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_no_file PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_file_not_saved PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_success PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_upload_failure PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_default PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_custom PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_upload_diagnostics_with_id_extraction PASSED
tests/arb/portal/test_utils_route_util.py::test_generate_staging_diagnostics_with_all_parameters PASSED
tests/arb/portal/test_utils_route_util.py::test_format_diagnostic_message_empty_details PASSED
tests/arb/portal/test_utils_route_util.py::test_render_readonly_sector_view_none_misc_json PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_success PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_metadata PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_sector PASSED
tests/arb/portal/test_utils_sector_util.py::test_extract_sector_payload_missing_tab PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_json_priority PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_foreign_key_fallback PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_both_none_raises PASSED
tests/arb/portal/test_utils_sector_util.py::test_resolve_sector_mismatch_logs_error PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_oil_and_gas PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_landfill PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_type_unsupported PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_success PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_missing_misc_json PASSED
tests/arb/portal/test_utils_sector_util.py::test_get_sector_info_conflicting_sectors PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_landfill.py::test_required_fields_present PASSED
tests/arb/portal/test_wtf_landfill.py::test_optional_fields_present PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_email_format PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_phone_regex PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_validation_number_ranges PASSED
tests/arb/portal/test_wtf_landfill.py::test_update_contingent_selectors PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_emission_identified PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_no_emission_identified PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_lmr_included PASSED
tests/arb/portal/test_wtf_landfill.py::test_determine_contingent_fields_lmr_planned PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_validation_with_valid_data PASSED
tests/arb/portal/test_wtf_landfill.py::test_form_validation_with_invalid_data PASSED
tests/arb/portal/test_wtf_landfill.py::test_field_choices_initialization PASSED
tests/arb/portal/test_wtf_landfill.py::test_cross_field_validation_emission_identified_flow PASSED
tests/arb/portal/test_wtf_landfill.py::test_cross_field_validation_no_emission_identified_flow PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_required_fields_present PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_optional_fields_present PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_venting_responses_constant PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_unintentional_leak_constant PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_email_format PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_phone_regex PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_field_validation_number_ranges PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_dropdown_choices_populated PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_venting_exclusion PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_ogi_performed PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_method21_performed PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_equipment_other PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_determine_contingent_fields_component_other PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_update_contingent_selectors_noop PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_validation_with_valid_data PASSED
tests/arb/portal/test_wtf_oil_and_gas.py::test_form_validation_with_invalid_data PASSED
tests/arb/portal/test_wtf_upload.py::test_form_instantiation PASSED
tests/arb/portal/test_wtf_upload.py::test_file_field_present PASSED
tests/arb/portal/test_wtf_upload.py::test_submit_field_present PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_valid_excel_file PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_invalid_file_type PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_without_file PASSED
tests/arb/portal/test_wtf_upload.py::test_form_validation_with_empty_filename PASSED

=============================== warnings summary ===============================
tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:583: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    primary_row = db.session.query(primary_table).get(primary_table_pk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:591: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    foreign_row = db.session.query(foreign_table).get(fk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload
tests/arb/portal/test_file_upload_suite.py::test_landfill_upload
tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload
tests/arb/portal/test_file_upload_suite.py::test_energy_upload
tests/arb/portal/test_file_upload_suite.py::test_generic_upload
tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads
tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:591: SAWarning: fully NULL primary key identity cannot load any object.  This condition may raise an error in a future release.
    foreign_row = db.session.query(foreign_table).get(fk_value)  # type: ignore

tests/arb/portal/test_file_upload_suite.py: 17 warnings
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:524: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    row = db.session.query(table).get(id_)  # type: ignore

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_integration_app.py::test_homepage_route
tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
  /home/tonyh/git_repos/feedback_portal/source/production/arb/utils/sql_alchemy.py:398: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    query = db.session.query(table)

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'emission_identified_flag.incidences_collection' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'emission_identified_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'incidences.emission_identified_flag' will copy column emission_identified_flag.id_flag to column incidences.emission_identified_flag_fk, which conflicts with relationship(s): 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'emission_identified_flag.incidences_collection' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk), 'incidences.emission_identified_flag' (copies emission_identified_flag.id_flag to incidences.emission_identified_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_identified_flag,emission_identified_flag,incidences_collection,incidences_collection"' to the 'incidences.emission_identified_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'sources.incidences_collection' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'sources.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'incidences.sources' will copy column sources.id_source to column incidences.source_id, which conflicts with relationship(s): 'incidences.sources' (copies sources.id_source to incidences.source_id), 'incidences.sources' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id), 'sources.incidences_collection' (copies sources.id_source to incidences.source_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,sources,sources"' to the 'incidences.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'emission_type.incidences_collection' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'emission_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'incidences.emission_type' will copy column emission_type.id_type to column incidences.emission_type_fk, which conflicts with relationship(s): 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'emission_type.incidences_collection' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk), 'incidences.emission_type' (copies emission_type.id_type to incidences.emission_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="emission_type,emission_type,incidences_collection,incidences_collection"' to the 'incidences.emission_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'incidence_qa_flag.incidences_collection' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidence_qa_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'incidences.incidence_qa_flag' will copy column incidence_qa_flag.id_flag to column incidences.incidence_qa_flag_fk, which conflicts with relationship(s): 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidence_qa_flag.incidences_collection' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk), 'incidences.incidence_qa_flag' (copies incidence_qa_flag.id_flag to incidences.incidence_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidence_qa_flag,incidence_qa_flag,incidences_collection,incidences_collection"' to the 'incidences.incidence_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'inspection_flag.incidences_collection' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'inspection_flag.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'incidences.inspection_flag' will copy column inspection_flag.id_flag to column incidences.inspection_flag_fk, which conflicts with relationship(s): 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'incidences.inspection_flag' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk), 'inspection_flag.incidences_collection' (copies inspection_flag.id_flag to incidences.inspection_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,inspection_flag,inspection_flag"' to the 'incidences.inspection_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'mitigation_type.incidences_collection' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'mitigation_type.incidences_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'incidences.mitigation_type' will copy column mitigation_type.id_type to column incidences.mitigation_type_fk, which conflicts with relationship(s): 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'incidences.mitigation_type' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk), 'mitigation_type.incidences_collection' (copies mitigation_type.id_type to incidences.mitigation_type_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences_collection,incidences_collection,mitigation_type,mitigation_type"' to the 'incidences.mitigation_type' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'scenes.plumes_collection' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,scenes,scenes"' to the 'scenes.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'plumes.scenes' will copy column scenes.scene_id to column plumes.scene_id, which conflicts with relationship(s): 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'plumes.scenes' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id), 'scenes.plumes_collection' (copies scenes.scene_id to plumes.scene_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,scenes,scenes"' to the 'plumes.scenes' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'incidences.plumes_collection' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plumes_collection,plumes_collection"' to the 'incidences.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'plumes.incidences' will copy column incidences.id_incidence to column plumes.id_incidence, which conflicts with relationship(s): 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'incidences.plumes_collection' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence), 'plumes.incidences' (copies incidences.id_incidence to plumes.id_incidence). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="incidences,incidences,plumes_collection,plumes_collection"' to the 'plumes.incidences' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'plume_qa_flag.plumes_collection' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plume_qa_flag.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'plumes.plume_qa_flag' will copy column plume_qa_flag.id_flag to column plumes.plume_qa_flag_fk, which conflicts with relationship(s): 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plume_qa_flag.plumes_collection' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk), 'plumes.plume_qa_flag' (copies plume_qa_flag.id_flag to plumes.plume_qa_flag_fk). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plume_qa_flag,plume_qa_flag,plumes_collection,plumes_collection"' to the 'plumes.plume_qa_flag' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'sources.plumes_collection' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,sources,sources"' to the 'sources.plumes_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'plumes.sources' will copy column sources.id_source to column plumes.id_source, which conflicts with relationship(s): 'plumes.sources' (copies sources.id_source to plumes.id_source), 'plumes.sources' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source), 'sources.plumes_collection' (copies sources.id_source to plumes.id_source). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="plumes_collection,plumes_collection,sources,sources"' to the 'plumes.sources' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'operator_contacts.contact_group_mapping_collection' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'operator_contacts.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'contact_group_mapping.operator_contacts' will copy column operator_contacts.id_contact to column contact_group_mapping.id_contact, which conflicts with relationship(s): 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'contact_group_mapping.operator_contacts' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact), 'operator_contacts.contact_group_mapping_collection' (copies operator_contacts.id_contact to contact_group_mapping.id_contact). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,operator_contacts,operator_contacts"' to the 'contact_group_mapping.operator_contacts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'contact_groups.contact_group_mapping_collection' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_groups.contact_group_mapping_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'contact_group_mapping.contact_groups' will copy column contact_groups.id_contact_group to column contact_group_mapping.id_contact_group, which conflicts with relationship(s): 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_group_mapping.contact_groups' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group), 'contact_groups.contact_group_mapping_collection' (copies contact_groups.id_contact_group to contact_group_mapping.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_group_mapping_collection,contact_group_mapping_collection,contact_groups,contact_groups"' to the 'contact_group_mapping.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'contact_groups.sources_collection' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'contact_groups.sources_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'sources.contact_groups' will copy column contact_groups.id_contact_group to column sources.id_contact_group, which conflicts with relationship(s): 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'contact_groups.sources_collection' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group), 'sources.contact_groups' (copies contact_groups.id_contact_group to sources.id_contact_group). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups,contact_groups,sources_collection,sources_collection"' to the 'sources.contact_groups' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'operators.contact_groups_collection' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'operators.contact_groups_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'contact_groups.operators' will copy column operators.id_operator to column contact_groups.id_operator, which conflicts with relationship(s): 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'contact_groups.operators' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator), 'operators.contact_groups_collection' (copies operators.id_operator to contact_groups.id_operator). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="contact_groups_collection,contact_groups_collection,operators,operators"' to the 'contact_groups.operators' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'air_districts.air_district_contacts_collection' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_district_contacts_collection,air_districts,air_districts"' to the 'air_districts.air_district_contacts_collection' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_update_route
  /home/tonyh/git_repos/feedback_portal/source/production/arb/portal/routes.py:138: SAWarning: relationship 'air_district_contacts.air_districts' will copy column air_districts.dis to column air_district_contacts.dis, which conflicts with relationship(s): 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_district_contacts.air_districts' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis), 'air_districts.air_district_contacts_collection' (copies air_districts.dis to air_district_contacts.dis). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   To silence this warning, add the parameter 'overlaps="air_district_contacts_collection,air_district_contacts_collection,air_districts,air_districts"' to the 'air_district_contacts.air_districts' relationship. (Background on this warning at: https://sqlalche.me/e/20/qzyx) (This warning originated from the `configure_mappers()` process, which was invoked automatically in response to a user-initiated operation.)
    rows = db.session.query(table_class).filter_by(id_incidence=id_).all()

tests/arb/portal/test_routes_integration.py::test_incidence_delete_route
  /home/tonyh/miniconda3/envs/mini_conda_02/lib/python3.11/site-packages/flask_sqlalchemy/query.py:30: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    rv = self.get(ident)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
============================== slowest durations ===============================
1.19s call     tests/arb/portal/test_file_upload_suite.py::test_all_file_uploads
0.69s call     tests/arb/portal/test_file_upload_suite.py::test_comprehensive_upload_validation
0.55s call     tests/arb/portal/test_file_upload_suite.py::test_database_state_verification
0.27s call     tests/arb/portal/test_file_upload_suite.py::test_concurrent_upload_handling
0.17s call     tests/arb/portal/test_file_upload_suite.py::test_landfill_upload
0.17s call     tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload
0.16s setup    tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_upload
0.16s call     tests/arb/portal/test_file_upload_suite.py::test_field_level_value_assertions
0.13s call     tests/arb/portal/test_file_upload_suite.py::test_energy_upload
0.13s setup    tests/arb/portal/test_routes_integration.py::test_incidence_update_route
0.13s setup    tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_get_request
0.13s setup    tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_get_request_equivalence
0.13s setup    tests/arb/portal/test_integration_app.py::test_app_starts
0.11s call     tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_upload
0.11s call     tests/arb/portal/test_routes_integration.py::test_list_staged_route
0.11s call     tests/arb/portal/test_file_upload_suite.py::test_dairy_digester_staged_upload
0.11s call     tests/arb/portal/test_file_upload_suite.py::test_oil_and_gas_staged_upload
0.10s setup    tests/arb/portal/test_globals.py::test_globals_persistence_across_calls
0.09s call     tests/arb/portal/test_file_upload_suite.py::test_data_integrity_through_processing_pipeline
0.09s call     tests/arb/portal/test_routes_integration.py::test_portal_updates_route
0.09s call     tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_sorting
0.08s call     tests/arb/portal/test_file_upload_suite.py::test_generic_upload
0.08s call     tests/arb/portal/test_file_upload_suite.py::test_landfill_staged_upload
0.06s call     tests/arb/portal/test_file_upload_suite.py::test_energy_staged_upload
0.06s call     tests/arb/portal/test_file_upload_suite.py::test_generic_staged_upload
0.06s setup    tests/arb/portal/test_globals.py::test_globals_integration_with_real_data
0.05s setup    tests/arb/portal/test_globals.py::test_load_type_mapping_integration
0.05s call     tests/arb/portal/test_integration_app.py::test_portal_updates_route
0.05s call     tests/arb/portal/test_file_upload_suite.py::test_negative_validation_errors
0.04s setup    tests/arb/portal/test_utils_db_ingest_util.py::test_dict_to_database_refactored_uses_smaller_functions
0.04s call     tests/arb/portal/test_routes_integration.py::test_portal_updates_route_with_invalid_sorting
0.04s setup    tests/arb/portal/test_route_consolidation.py::TestConsolidatedUploadRoute::test_unified_processing_pipeline_integration
0.04s call     tests/arb/portal/test_integration_app.py::test_homepage_route
0.03s call     tests/arb/portal/test_file_upload_suite.py::test_file_size_limits
0.03s call     tests/arb/portal/test_route_equivalence.py::TestRouteNavigation::test_refactored_route_in_navigation
0.03s call     tests/arb/portal/test_routes_integration.py::test_list_uploads_route
0.02s call     tests/arb/portal/test_sqla_models.py::test_portal_update_integration
0.02s call     tests/arb/portal/test_routes_integration.py::test_incidence_update_route
0.02s call     tests/arb/portal/test_startup_db_integration.py::test_db_create_creates_tables
0.02s call     tests/arb/portal/test_sqla_models.py::test_uploaded_file_integration
0.02s call     tests/arb/portal/test_startup_db_integration.py::test_db_initialize_and_create_runs
0.02s call     tests/arb/portal/test_integration_app.py::test_list_uploads_route
0.02s call     tests/arb/portal/test_routes_integration.py::test_portal_updates_export_route
0.01s call     tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_get_request_equivalence
0.01s call     tests/arb/portal/test_routes.py::test_upload_file_staged_refactored_get_request
0.01s call     tests/arb/portal/test_file_upload_suite.py::test_missing_required_fields
0.01s call     tests/arb/portal/test_routes_integration.py::test_index_route
0.01s call     tests/arb/portal/test_route_equivalence.py::TestRouteEquivalence::test_post_invalid_file_equivalence
0.01s call     tests/arb/portal/test_integration_app.py::test_og_incidence_create_route
0.01s call     tests/arb/portal/test_file_upload_suite.py::test_malicious_file_handling
0.01s call     tests/arb/portal/test_route_equivalence.py::TestUploadFileRouteEquivalence::test_post_invalid_file_equivalence
0.01s call     tests/arb/portal/test_routes_integration.py::test_og_incidence_create_route
0.01s call     tests/arb/portal/test_cross_field_conditional_logic.py::TestCrossFieldLogicEdgeCases::test_conditional_logic_performance

(1741 durations < 0.005s hidden.  Use -vv to show these durations.)
================= 596 passed, 3 skipped, 149 warnings in 6.72s =================
