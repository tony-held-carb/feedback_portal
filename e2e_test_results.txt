============================= test session starts =============================
platform win32 -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\tonyh\miniconda3\envs\mini_conda_01\python.exe
cachedir: .pytest_cache
rootdir: D:\local\cursor\feedback_portal
plugins: anyio-4.7.0, asyncio-1.1.0, base-url-2.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 241 items

tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_upload_page_loads[chromium] PASSED [  0%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_input_exists[chromium] PASSED [  0%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_drop_zone_exists[chromium] PASSED [  1%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] PASSED [  1%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_invalid_file_upload[chromium] PASSED [  2%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_empty_file_upload[chromium] PASSED [  2%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_large_file_upload[chromium] PASSED [  2%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestUploadPageElements::test_page_structure[chromium] PASSED [  3%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestUploadPageElements::test_form_structure[chromium] PASSED [  3%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestUploadPageElements::test_accessibility_features[chromium] PASSED [  4%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] PASSED [  4%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] PASSED [  4%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] SKIPPED [  5%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] PASSED [  5%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] PASSED [  6%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] PASSED [  6%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] SKIPPED [  7%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] PASSED [  7%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] PASSED [  7%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] FAILED [  8%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] SKIPPED [  8%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] PASSED [  9%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] PASSED [  9%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] PASSED [  9%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] SKIPPED [ 10%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] PASSED [ 10%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] PASSED [ 11%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] PASSED [ 11%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] SKIPPED [ 12%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] PASSED [ 12%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] PASSED [ 12%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] PASSED [ 13%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] SKIPPED [ 13%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] PASSED [ 14%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] PASSED [ 14%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] PASSED [ 14%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] SKIPPED [ 15%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] PASSED [ 15%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] PASSED [ 16%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] PASSED [ 16%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] SKIPPED [ 17%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] PASSED [ 17%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] PASSED [ 17%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] PASSED [ 18%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] SKIPPED [ 18%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] PASSED [ 19%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] PASSED [ 19%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] PASSED [ 19%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] SKIPPED [ 20%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] PASSED [ 20%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] PASSED [ 21%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] PASSED [ 21%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] SKIPPED [ 21%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] PASSED [ 22%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] PASSED [ 22%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] PASSED [ 23%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] SKIPPED [ 23%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] PASSED [ 24%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] PASSED [ 24%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] PASSED [ 24%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] SKIPPED [ 25%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\corrupted_file.xlsx] PASSED [ 25%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\corrupted_file.xlsx] PASSED [ 26%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\corrupted_file.xlsx] PASSED [ 26%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\corrupted_file.xlsx] SKIPPED [ 26%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\data_only.xlsx] PASSED [ 27%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\data_only.xlsx] PASSED [ 27%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\data_only.xlsx] PASSED [ 28%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\data_only.xlsx] SKIPPED [ 28%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\duplicate_fields.xlsx] PASSED [ 29%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\duplicate_fields.xlsx] PASSED [ 29%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\duplicate_fields.xlsx] PASSED [ 29%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\duplicate_fields.xlsx] SKIPPED [ 30%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\extra_columns.xlsx] PASSED [ 30%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\extra_columns.xlsx] PASSED [ 31%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\extra_columns.xlsx] PASSED [ 31%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\extra_columns.xlsx] SKIPPED [ 31%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\headers_only.xlsx] PASSED [ 32%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\headers_only.xlsx] PASSED [ 32%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\headers_only.xlsx] PASSED [ 33%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\headers_only.xlsx] SKIPPED [ 33%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\large_file.xlsx] PASSED [ 34%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\large_file.xlsx] PASSED [ 34%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\large_file.xlsx] PASSED [ 34%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\large_file.xlsx] SKIPPED [ 35%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\missing_columns.xlsx] PASSED [ 35%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\missing_columns.xlsx] PASSED [ 36%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\missing_columns.xlsx] PASSED [ 36%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\missing_columns.xlsx] SKIPPED [ 36%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\mixed_types.xlsx] PASSED [ 37%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\mixed_types.xlsx] PASSED [ 37%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\mixed_types.xlsx] PASSED [ 38%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\mixed_types.xlsx] SKIPPED [ 38%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\unicode_fields.xlsx] PASSED [ 39%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\edge_cases\\unicode_fields.xlsx] PASSED [ 39%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\edge_cases\\unicode_fields.xlsx] PASSED [ 39%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\edge_cases\\unicode_fields.xlsx] SKIPPED [ 40%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx] PASSED [ 40%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx] FAILED [ 41%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx] FAILED [ 41%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx] SKIPPED [ 41%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx] PASSED [ 42%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx] FAILED [ 42%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx] FAILED [ 43%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx] SKIPPED [ 43%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx] PASSED [ 43%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx] FAILED [ 44%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx] FAILED [ 44%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx] SKIPPED [ 45%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_large.xlsx] PASSED [ 45%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_large.xlsx] FAILED [ 46%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_large.xlsx] FAILED [ 46%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\dairy_large.xlsx] SKIPPED [ 46%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx] PASSED [ 47%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx] FAILED [ 47%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx] FAILED [ 48%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx] SKIPPED [ 48%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx] PASSED [ 48%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx] FAILED [ 49%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx] FAILED [ 49%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx] SKIPPED [ 50%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx] PASSED [ 50%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx] FAILED [ 51%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx] FAILED [ 51%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx] SKIPPED [ 51%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx] PASSED [ 52%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx] FAILED [ 52%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx] FAILED [ 53%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx] SKIPPED [ 53%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx] PASSED [ 53%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx] FAILED [ 54%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx] FAILED [ 54%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx] SKIPPED [ 55%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_large.xlsx] PASSED [ 55%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_large.xlsx] FAILED [ 56%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_large.xlsx] FAILED [ 56%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\energy_large.xlsx] SKIPPED [ 56%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx] PASSED [ 57%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx] FAILED [ 57%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx] FAILED [ 58%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx] SKIPPED [ 58%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_valid.xlsx] PASSED [ 58%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_valid.xlsx] FAILED [ 59%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_valid.xlsx] FAILED [ 59%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\energy_valid.xlsx] SKIPPED [ 60%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx] PASSED [ 60%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx] FAILED [ 60%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx] FAILED [ 61%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx] SKIPPED [ 61%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx] PASSED [ 62%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx] FAILED [ 62%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx] FAILED [ 63%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx] SKIPPED [ 63%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx] PASSED [ 63%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx] FAILED [ 64%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx] FAILED [ 64%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx] SKIPPED [ 65%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_large.xlsx] PASSED [ 65%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_large.xlsx] FAILED [ 65%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_large.xlsx] FAILED [ 66%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\generic_large.xlsx] SKIPPED [ 66%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx] PASSED [ 67%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx] FAILED [ 67%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx] FAILED [ 68%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx] SKIPPED [ 68%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_valid.xlsx] PASSED [ 68%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_valid.xlsx] FAILED [ 69%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_valid.xlsx] FAILED [ 69%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\generic_valid.xlsx] SKIPPED [ 70%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx] PASSED [ 70%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx] FAILED [ 70%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx] FAILED [ 71%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx] SKIPPED [ 71%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx] PASSED [ 72%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx] FAILED [ 72%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx] FAILED [ 73%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx] SKIPPED [ 73%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx] PASSED [ 73%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx] FAILED [ 74%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx] FAILED [ 74%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx] SKIPPED [ 75%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_large.xlsx] PASSED [ 75%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_large.xlsx] FAILED [ 75%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_large.xlsx] FAILED [ 76%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\landfill_large.xlsx] SKIPPED [ 76%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx] PASSED [ 77%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx] FAILED [ 77%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx] FAILED [ 78%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx] SKIPPED [ 78%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx] PASSED [ 78%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx] FAILED [ 79%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx] FAILED [ 79%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx] SKIPPED [ 80%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx] PASSED [ 80%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx] FAILED [ 80%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx] FAILED [ 81%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx] SKIPPED [ 81%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx] PASSED [ 82%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx] FAILED [ 82%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx] FAILED [ 82%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx] SKIPPED [ 83%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx] PASSED [ 83%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx] FAILED [ 84%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx] FAILED [ 84%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx] SKIPPED [ 85%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx] PASSED [ 85%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx] FAILED [ 85%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx] FAILED [ 86%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx] SKIPPED [ 86%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx] PASSED [ 87%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx] FAILED [ 87%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx] FAILED [ 87%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx] SKIPPED [ 88%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx] PASSED [ 88%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx] FAILED [ 89%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx] FAILED [ 89%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx] SKIPPED [ 90%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\old\\dairy_digester_operator_feedback_v005_test_01.xlsx] PASSED [ 90%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\old\\dairy_digester_operator_feedback_v005_test_01.xlsx] PASSED [ 90%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\old\\dairy_digester_operator_feedback_v005_test_01.xlsx] PASSED [ 91%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\old\\dairy_digester_operator_feedback_v005_test_01.xlsx] SKIPPED [ 91%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\old\\energy_operator_feedback_v003_test_01.xlsx] PASSED [ 92%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\old\\energy_operator_feedback_v003_test_01.xlsx] PASSED [ 92%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\old\\energy_operator_feedback_v003_test_01.xlsx] PASSED [ 92%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\old\\energy_operator_feedback_v003_test_01.xlsx] SKIPPED [ 93%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\old\\generic_operator_feedback_v002_test_01.xlsx] PASSED [ 93%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\old\\generic_operator_feedback_v002_test_01.xlsx] PASSED [ 94%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\old\\generic_operator_feedback_v002_test_01.xlsx] PASSED [ 94%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\old\\generic_operator_feedback_v002_test_01.xlsx] SKIPPED [ 95%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\old\\landfill_operator_feedback_v070_test_01.xlsx] PASSED [ 95%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\old\\landfill_operator_feedback_v070_test_01.xlsx] PASSED [ 95%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\old\\landfill_operator_feedback_v070_test_01.xlsx] PASSED [ 96%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\old\\landfill_operator_feedback_v070_test_01.xlsx] SKIPPED [ 96%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\old\\landfill_operator_feedback_v071_test_01.xlsx] PASSED [ 97%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\old\\landfill_operator_feedback_v071_test_01.xlsx] PASSED [ 97%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\old\\landfill_operator_feedback_v071_test_01.xlsx] PASSED [ 97%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\old\\landfill_operator_feedback_v071_test_01.xlsx] SKIPPED [ 98%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUpload::test_file_upload_workflow[chromium-feedback_forms\\testing_versions\\old\\oil_and_gas_operator_feedback_v070_test_01.xlsx] PASSED [ 98%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\old\\oil_and_gas_operator_feedback_v070_test_01.xlsx] PASSED [ 99%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\old\\oil_and_gas_operator_feedback_v070_test_01.xlsx] PASSED [ 99%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\old\\oil_and_gas_operator_feedback_v070_test_01.xlsx] SKIPPED [100%]

================================== FAILURES ===================================
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E0F0D0>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\dairy_conditional_logic.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E1AC10>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\dairy_extra_fields.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E1AF50>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\dairy_invalid_types.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E1B250>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_large.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\dairy_large.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_large.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E1B550>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\dairy_missing_required.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E1B850>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\dairy_valid.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E1BB50>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\energy_conditional_logic.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E1BE50>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\energy_extra_fields.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E24190>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\energy_invalid_types.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E24490>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_large.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\energy_large.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_large.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E24790>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\energy_missing_required.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E24A90>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_valid.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\energy_valid.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_valid.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E24D90>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\energy_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\generic_conditional_logic.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E25090>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\generic_extra_fields.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E25390>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\generic_invalid_types.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E25690>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_large.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\generic_large.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_large.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E25990>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\generic_missing_required.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E25C90>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_valid.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\generic_valid.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_valid.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E25F90>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\generic_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\landfill_conditional_logic.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E26290>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\landfill_extra_fields.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E26590>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\landfill_invalid_types.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E26890>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_large.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\landfill_large.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_large.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E26B90>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\landfill_missing_required.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E26E90>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\landfill_valid.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E27190>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\oil_and_gas_conditional_logic.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E27490>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\oil_and_gas_extra_fields.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E27790>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\oil_and_gas_invalid_types.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E27A90>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\oil_and_gas_large.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E27D90>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\oil_and_gas_missing_required.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E300D0>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
_ test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx] _

upload_page = <Page url='http://127.0.0.1:5000/upload'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_deep_backend_validation(upload_page, file_path):
        # Navigate to the upload page
        upload_page.goto("http://127.0.0.1:5000/upload")
        upload_page.wait_for_load_state("networkidle")
        # Upload file via UI
        file_input = upload_page.locator("input[type='file']")
        upload_page.set_input_files("input[type='file']", file_path)
        upload_page.wait_for_timeout(1000)
        # Wait for redirect or success
        for _ in range(10):
            if "/incidence_update/" in upload_page.url:
                break
            upload_page.wait_for_timeout(500)
        # Log the URL and page content for debugging
        print(f"[DEBUG] After upload, page URL: {upload_page.url}")
        page_content = upload_page.content()
        print(f"[DEBUG] After upload, page content (first 1000 chars):\n{page_content[:1000]}")
    
        import re
        from pathlib import Path
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload page and show error message
            assert "/upload" in upload_page.url, f"Expected to remain on upload page for edge case file, got: {upload_page.url}"
            assert any(keyword in page_content.lower() for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/incidence_update/(\d+)", upload_page.url)
        id_ = match.group(1) if match else None
        if not id_:
            # Try to find error messages in the page content
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_content, "html.parser")
            error_msgs = []
            for alert in soup.find_all(class_=["alert", "alert-danger", "invalid-feedback", "form-error"]):
                error_msgs.append(alert.get_text(strip=True))
            print(f"[DEBUG] Error messages found on page: {error_msgs}")
            upload_dir = Path("portal_uploads")
            uploaded_files = list(upload_dir.glob("*" + Path(file_path).name))
            print(f"[DEBUG] Uploaded file(s) found in upload dir: {uploaded_files}")
>       assert id_ is not None, f"Could not extract id_incidence from redirect after uploading {file_path}. See debug output above."
E       AssertionError: Could not extract id_incidence from redirect after uploading feedback_forms\testing_versions\generated\oil_and_gas_valid.xlsx. See debug output above.
E       assert None is not None

tests\e2e\test_excel_upload_playwright_pytest.py:482: AssertionError
---------------------------- Captured stdout call -----------------------------
[DEBUG] After upload, page URL: http://127.0.0.1:5000/upload
[DEBUG] After upload, page content (first 1000 chars):
<!DOCTYPE html><html lang="en"><head>
  <meta charset="UTF-8">

  <!-- Bootstrap CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

  <!-- Portal Styles -->
  <link rel="stylesheet" href="/static/css/portal_styles_01.css">

  <!-- Portal JavaScript -->
  <script defer="" src="/static/js/delete_confirmation.js"></script>
  <!-- TOAST NOTIFICATIONS DISABLED - Reverted to old system
       Benefits of re-enabling in the future:
       - Better UX for ephemeral messages (upload progress, success notifications)
       - Non-intrusive fee
[DEBUG] Error messages found on page: ['Important:Please close any files before uploading a file. Files that are still open may be\n      locked and cannot be uploaded. If you try to upload a file that is locked, you will receive an error message\n      "This site can\'t be reached".']
[DEBUG] Uploaded file(s) found in upload dir: []
_ TestExcelUploadStaged.test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001E536E303D0>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_excel_upload_staged_workflow(self, page: Page, file_path: str):
        """
        E2E: Upload via /upload_staged, verify in /list_staged, review, confirm, and validate DB.
        """
        import re
        from bs4 import BeautifulSoup
        from pathlib import Path
        # 1. Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        page.wait_for_load_state("networkidle")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Wait for redirect to /review_staged or flash message
        for _ in range(10):
            if "/review_staged/" in page.url:
                break
            page.wait_for_timeout(500)
        # If this is an edge case file, expect error and no redirect
        if "edge_cases" in Path(file_path).parts:
            # Should remain on upload_staged and show error message
            assert "/upload_staged" in page.url, f"Expected to remain on upload_staged for edge case file, got: {page.url}"
            page_content = page.content().lower()
            assert any(keyword in page_content for keyword in ["error", "invalid", "not recognized", "missing", "could not", "failed"]), (
                f"Expected error message for edge case file. Content: {page_content[:300]}"
            )
            return  # Test passes for edge case scenario
        # Otherwise, proceed as before
        match = re.search(r"/review_staged/(\d+)/(.*?)$", page.url)
>       assert match, f"Could not extract id_ and filename from URL: {page.url}"
E       AssertionError: Could not extract id_ and filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:535: AssertionError
=========================== short test summary info ===========================
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\dairy_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\energy_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\energy_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\generic_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\generic_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\landfill_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_conditional_logic.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_extra_fields.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_invalid_types.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_large.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_missing_required.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_excel_upload_deep_backend_validation[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_workflow[chromium-feedback_forms\\testing_versions\\generated\\oil_and_gas_valid.xlsx]
===== 61 failed, 122 passed, 58 skipped, 49 warnings in 785.15s (0:13:05) =====
