============================= test session starts =============================
platform win32 -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\tonyh\miniconda3\envs\mini_conda_02\python.exe
cachedir: .pytest_cache
rootdir: D:\local\cursor\feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, asyncio-1.1.0, base-url-2.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 62 items / 48 deselected / 14 selected

tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_update_db_function_signature PASSED [  7%]
tests/arb/portal/test_utils_db_ingest_util.py::test_upload_and_stage_only_function_signature PASSED [ 14%]
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_named_tuple PASSED [ 21%]
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_error_case PASSED [ 28%]
tests/arb/portal/test_utils_db_ingest_util.py::test_staging_result_function_signature PASSED [ 35%]
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_function_signature PASSED [ 42%]
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_success PASSED [ 50%]
tests/arb/portal/test_utils_db_ingest_util.py::test_save_uploaded_file_failure PASSED [ 57%]
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_success FAILED [ 64%]
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_file_error PASSED [ 71%]
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_conversion_failed FAILED [ 78%]
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_missing_id FAILED [ 85%]
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_database_error FAILED [ 92%]
tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_equivalent_to_original FAILED [100%]

================================== FAILURES ===================================
_________________ test_stage_uploaded_file_for_review_success _________________

mock_db = <MagicMock id='2306144798800'>
mock_base = <MagicMock id='2306152308304'>
mock_table_class = <MagicMock id='2306152354192'>

    def test_stage_uploaded_file_for_review_success(mock_db, mock_base, mock_table_class):
        """stage_uploaded_file_for_review returns success result for valid file."""
        mock_request_file = MagicMock()
        mock_request_file.filename = "test.xlsx"
        mock_model = MagicMock()
        mock_model.misc_json = {"existing": "data"}
    
        with patch('arb.portal.utils.db_ingest_util._save_uploaded_file') as mock_save:
            with patch('arb.portal.utils.db_ingest_util._convert_file_to_json') as mock_convert:
>               with patch('arb.portal.utils.db_ingest_util._validate_and_extract_id') as mock_validate:

tests\arb\portal\test_utils_db_ingest_util.py:760: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\unittest\mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x00000218EEDAFD10>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'arb.portal.utils.db_ingest_util' from 'D:\\local\\cursor\\feedback_portal\\source\\production\\arb\\portal\\utils\\db_ingest_util.py'> does not have the attribute '_validate_and_extract_id'

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\unittest\mock.py:1419: AttributeError
____________ test_stage_uploaded_file_for_review_conversion_failed ____________

mock_db = <MagicMock id='2306154133712'>
mock_base = <MagicMock id='2306154133200'>
mock_table_class = <MagicMock id='2306154120144'>

    def test_stage_uploaded_file_for_review_conversion_failed(mock_db, mock_base, mock_table_class):
        """stage_uploaded_file_for_review returns conversion_failed result."""
        mock_request_file = MagicMock()
        mock_request_file.filename = "test.txt"
    
        with patch('arb.portal.utils.db_ingest_util._save_uploaded_file') as mock_save:
            with patch('arb.portal.utils.db_ingest_util._convert_file_to_json') as mock_convert:
                mock_save.return_value = Path("uploads/test.txt")
                mock_convert.return_value = (None, None)
    
>               result = db_ingest_util.stage_uploaded_file_for_review(mock_db, "uploads", mock_request_file, mock_base)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests\arb\portal\test_utils_db_ingest_util.py:802: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

db = <MagicMock id='2306154133712'>, upload_dir = 'uploads'
request_file = <MagicMock id='2306152262096'>
base = <MagicMock id='2306154133200'>

    def stage_uploaded_file_for_review(db: SQLAlchemy,
                                     upload_dir: str | Path,
                                     request_file: FileStorage,
                                     base: AutomapBase) -> StagingResult:
        """
        Stage an uploaded file for review without committing to database.
    
        This function handles the complete staging workflow:
        1. Save the uploaded file
        2. Convert to JSON format
        3. Validate and extract id_incidence
        4. Create staged file with metadata
    
        Args:
            db (SQLAlchemy): Active SQLAlchemy database instance
            upload_dir (str | Path): Target upload folder path
            request_file (FileStorage): Uploaded file from Flask request
            base (AutomapBase): Reflected metadata
    
        Returns:
            StagingResult: Rich result object with success/failure information
    
        Examples:
            result = stage_uploaded_file_for_review(db, upload_dir, request_file, base)
    
            if result.success:
                # Staging successful
                flash(f"File staged successfully: {result.staged_filename}")
            else:
                # Handle specific error
                if result.error_type == "missing_id":
                    flash("Please add a valid ID to your spreadsheet")
                elif result.error_type == "conversion_failed":
                    flash("Please upload an Excel file")
                else:
                    flash(f"Error: {result.error_message}")
    
        Notes:
            - This function does NOT update the database
            - Staging will be blocked if id_incidence is missing or invalid
            - All values are JSON-serializable before staging
            - Includes current database state as base_misc_json for comparison
        """
        logger.debug(f"stage_uploaded_file_for_review() called with {request_file.filename}")
    
        # Step 1: Save the uploaded file
        try:
            file_path = _save_uploaded_file(upload_dir, request_file, db, description="Staged only (no DB write)")
        except ValueError as e:
            return StagingResult(
                file_path=Path("unknown"),
                id_=None,
                sector=None,
                json_data={},
                staged_filename=None,
                success=False,
                error_message=str(e),
                error_type="file_error"
            )
    
        # Step 2: Convert file to JSON and extract sector
>       json_path, sector, json_data, error = _convert_file_to_json(file_path)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       ValueError: not enough values to unpack (expected 4, got 2)

source\production\arb\portal\utils\db_ingest_util.py:1023: ValueError
_______________ test_stage_uploaded_file_for_review_missing_id ________________

mock_db = <MagicMock id='2306158365904'>
mock_base = <MagicMock id='2306154787984'>
mock_table_class = <MagicMock id='2306155568848'>

    def test_stage_uploaded_file_for_review_missing_id(mock_db, mock_base, mock_table_class):
        """stage_uploaded_file_for_review returns missing_id result."""
        mock_request_file = MagicMock()
        mock_request_file.filename = "test.xlsx"
    
        with patch('arb.portal.utils.db_ingest_util._save_uploaded_file') as mock_save:
            with patch('arb.portal.utils.db_ingest_util._convert_file_to_json') as mock_convert:
>               with patch('arb.portal.utils.db_ingest_util._validate_and_extract_id') as mock_validate:

tests\arb\portal\test_utils_db_ingest_util.py:816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\unittest\mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x00000218F18D14D0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'arb.portal.utils.db_ingest_util' from 'D:\\local\\cursor\\feedback_portal\\source\\production\\arb\\portal\\utils\\db_ingest_util.py'> does not have the attribute '_validate_and_extract_id'

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\unittest\mock.py:1419: AttributeError
_____________ test_stage_uploaded_file_for_review_database_error ______________

mock_db = <MagicMock id='2306110394256'>
mock_base = <MagicMock id='2306155030416'>
mock_table_class = <MagicMock id='2306154121040'>

    def test_stage_uploaded_file_for_review_database_error(mock_db, mock_base, mock_table_class):
        """stage_uploaded_file_for_review returns database_error result."""
        mock_request_file = MagicMock()
        mock_request_file.filename = "test.xlsx"
    
        with patch('arb.portal.utils.db_ingest_util._save_uploaded_file') as mock_save:
            with patch('arb.portal.utils.db_ingest_util._convert_file_to_json') as mock_convert:
>               with patch('arb.portal.utils.db_ingest_util._validate_and_extract_id') as mock_validate:

tests\arb\portal\test_utils_db_ingest_util.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\unittest\mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x00000218F18969D0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'arb.portal.utils.db_ingest_util' from 'D:\\local\\cursor\\feedback_portal\\source\\production\\arb\\portal\\utils\\db_ingest_util.py'> does not have the attribute '_validate_and_extract_id'

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\unittest\mock.py:1419: AttributeError
_________ test_stage_uploaded_file_for_review_equivalent_to_original __________

mock_db = <MagicMock id='2306110258640'>
mock_base = <MagicMock id='2306152304784'>
mock_table_class = <MagicMock id='2306152310096'>

    def test_stage_uploaded_file_for_review_equivalent_to_original(mock_db, mock_base, mock_table_class):
        """stage_uploaded_file_for_review produces equivalent results to upload_and_stage_only."""
        mock_request_file = MagicMock()
        mock_request_file.filename = "test.xlsx"
        mock_model = MagicMock()
        mock_model.misc_json = {"existing": "data"}
    
        # Test with successful staging
        with patch('arb.portal.utils.db_ingest_util._save_uploaded_file') as mock_save:
            with patch('arb.portal.utils.db_ingest_util._convert_file_to_json') as mock_convert:
>               with patch('arb.portal.utils.db_ingest_util._validate_and_extract_id') as mock_validate:

tests\arb\portal\test_utils_db_ingest_util.py:861: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\unittest\mock.py:1446: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x00000218EEE3EC90>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'arb.portal.utils.db_ingest_util' from 'D:\\local\\cursor\\feedback_portal\\source\\production\\arb\\portal\\utils\\db_ingest_util.py'> does not have the attribute '_validate_and_extract_id'

C:\Users\tonyh\miniconda3\envs\mini_conda_02\Lib\unittest\mock.py:1419: AttributeError
=========================== short test summary info ===========================
FAILED tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_success
FAILED tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_conversion_failed
FAILED tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_missing_id
FAILED tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_database_error
FAILED tests/arb/portal/test_utils_db_ingest_util.py::test_stage_uploaded_file_for_review_equivalent_to_original
================= 5 failed, 9 passed, 48 deselected in 0.77s ==================
