============================= test session starts =============================
platform win32 -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\tonyh\miniconda3\envs\mini_conda_01\python.exe
cachedir: .pytest_cache
rootdir: D:\local\cursor\feedback_portal
configfile: pytest.ini
plugins: anyio-4.7.0, asyncio-1.1.0, base-url-2.1.0, playwright-0.7.0
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 105 items / 65 deselected / 40 selected

tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] SKIPPED [  2%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] FAILED [  5%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_malformed_staged_file_handling[chromium] FAILED [  7%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] PASSED [ 10%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] SKIPPED [ 12%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] FAILED [ 15%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] PASSED [ 17%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] SKIPPED [ 20%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] FAILED [ 22%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] FAILED [ 25%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] SKIPPED [ 27%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] FAILED [ 30%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] PASSED [ 32%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] SKIPPED [ 35%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] FAILED [ 37%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] PASSED [ 40%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] SKIPPED [ 42%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] FAILED [ 45%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] PASSED [ 47%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] SKIPPED [ 50%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] FAILED [ 52%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] PASSED [ 55%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] SKIPPED [ 57%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] FAILED [ 60%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] PASSED [ 62%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] SKIPPED [ 65%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] FAILED [ 67%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] PASSED [ 70%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] SKIPPED [ 72%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] FAILED [ 75%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] PASSED [ 77%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] SKIPPED [ 80%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] FAILED [ 82%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] PASSED [ 85%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] SKIPPED [ 87%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] FAILED [ 90%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] PASSED [ 92%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_excel_upload_staged_discard[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] SKIPPED [ 95%]
tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] FAILED [ 97%]
tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] PASSED [100%]

================================== FAILURES ===================================
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F2650>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2001_ts_20250718_174730.json still listed after discard
E       assert 'id_2001_ts_..._174730.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2001_ts_20250718_174730.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (275 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2001_ts_20250718_174730.json' (repr: 'id_2001_ts_20250718_174730.json')
File 'id_2001_ts_20250718_174730.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json']
_____ TestExcelUploadStaged.test_malformed_staged_file_handling[chromium] _____

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C309290>
page = <Page url='http://127.0.0.1:5000/list_staged'>
tmp_path = WindowsPath('C:/Users/tonyh/AppData/Local/Temp/pytest-of-tonyh/pytest-69/test_malformed_staged_file_han0')

    def test_malformed_staged_file_handling(self, page: Page, tmp_path):
        """
        E2E: Create a malformed JSON file in the staging dir, verify it appears in the malformed section, and can be discarded.
        """
        from pathlib import Path
        import os
        staging_dir = Path("portal_uploads/staging")
        staging_dir.mkdir(parents=True, exist_ok=True)
        malformed_file = staging_dir / "malformed_test.json"
        malformed_file.write_text("{ this is not valid json }")
        print(f"Malformed file to discard: '{malformed_file.name}' (repr: {repr(malformed_file.name)})")
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert "malformed_test.json" in page.content(), "Malformed file not listed in /list_staged"
        discard_btn = page.locator(f"form[action*='malformed_test.json'] button[type='submit']").first
        discard_btn.click()
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if "malformed_test.json" not in page.content():
                break
        if "malformed_test.json" in page.content():
            print(f"Malformed file 'malformed_test.json' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert "malformed_test.json" not in page.content(), "Malformed file still listed after discard"
E       AssertionError: Malformed file still listed after discard
E       assert 'malformed_test.json' not in '<!DOCTYPE h...body></html>'
E         
E         'malformed_test.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (301 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:895: AssertionError
---------------------------- Captured stdout call -----------------------------
Malformed file to discard: 'malformed_test.json' (repr: 'malformed_test.json')
Malformed file 'malformed_test.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F28D0>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2002_ts_20250718_174758.json still listed after discard
E       assert 'id_2002_ts_..._174758.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2002_ts_20250718_174758.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (330 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2002_ts_20250718_174758.json' (repr: 'id_2002_ts_20250718_174758.json')
File 'id_2002_ts_20250718_174758.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F2B50>
page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
>       assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
E       AssertionError: Could not extract staged filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:788: AssertionError
_ test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx] _

page = <Page url='http://127.0.0.1:5000/upload_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename_with_overlay_logging(page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Scrape and print overlay after each key action.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
>       assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
E       AssertionError: Could not extract staged filename from URL: http://127.0.0.1:5000/upload_staged
E       assert None

tests\e2e\test_excel_upload_playwright_pytest.py:1002: AssertionError
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F2DD0>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2011_ts_20250718_174827.json still listed after discard
E       assert 'id_2011_ts_..._174827.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2011_ts_20250718_174827.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (359 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2011_ts_20250718_174827.json' (repr: 'id_2011_ts_20250718_174827.json')
File 'id_2011_ts_20250718_174827.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F3090>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2012_ts_20250718_174843.json still listed after discard
E       assert 'id_2012_ts_..._174843.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2012_ts_20250718_174843.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (388 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2012_ts_20250718_174843.json' (repr: 'id_2012_ts_20250718_174843.json')
File 'id_2012_ts_20250718_174843.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F3390>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2021_ts_20250718_174900.json still listed after discard
E       assert 'id_2021_ts_..._174900.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2021_ts_20250718_174900.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (417 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2021_ts_20250718_174900.json' (repr: 'id_2021_ts_20250718_174900.json')
File 'id_2021_ts_20250718_174900.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'id_2021_ts_20250718_174900.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F3690>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2022_ts_20250718_174916.json still listed after discard
E       assert 'id_2022_ts_..._174916.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2022_ts_20250718_174916.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (446 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2022_ts_20250718_174916.json' (repr: 'id_2022_ts_20250718_174916.json')
File 'id_2022_ts_20250718_174916.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'id_2021_ts_20250718_174900.json', 'id_2022_ts_20250718_174916.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F3990>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2031_ts_20250718_174933.json still listed after discard
E       assert 'id_2031_ts_..._174933.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2031_ts_20250718_174933.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (475 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2031_ts_20250718_174933.json' (repr: 'id_2031_ts_20250718_174933.json')
File 'id_2031_ts_20250718_174933.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'id_2021_ts_20250718_174900.json', 'id_2022_ts_20250718_174916.json', 'id_2031_ts_20250718_174933.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F3C90>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2032_ts_20250718_174949.json still listed after discard
E       assert 'id_2032_ts_..._174949.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2032_ts_20250718_174949.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (504 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2032_ts_20250718_174949.json' (repr: 'id_2032_ts_20250718_174949.json')
File 'id_2032_ts_20250718_174949.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'id_2021_ts_20250718_174900.json', 'id_2022_ts_20250718_174916.json', 'id_2031_ts_20250718_174933.json', 'id_2032_ts_20250718_174949.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2F3F50>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2041_ts_20250718_175006.json still listed after discard
E       assert 'id_2041_ts_..._175006.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2041_ts_20250718_175006.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (533 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2041_ts_20250718_175006.json' (repr: 'id_2041_ts_20250718_175006.json')
File 'id_2041_ts_20250718_175006.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'id_2021_ts_20250718_174900.json', 'id_2022_ts_20250718_174916.json', 'id_2031_ts_20250718_174933.json', 'id_2032_ts_20250718_174949.json', 'id_2041_ts_20250718_175006.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2FC290>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2051_ts_20250718_175023.json still listed after discard
E       assert 'id_2051_ts_..._175023.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2051_ts_20250718_175023.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (562 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2051_ts_20250718_175023.json' (repr: 'id_2051_ts_20250718_175023.json')
File 'id_2051_ts_20250718_175023.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'id_2021_ts_20250718_174900.json', 'id_2022_ts_20250718_174916.json', 'id_2031_ts_20250718_174933.json', 'id_2032_ts_20250718_174949.json', 'id_2041_ts_20250718_175006.json', 'id_2051_ts_20250718_175023.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2FC590>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2051_ts_20250718_175039.json still listed after discard
E       assert 'id_2051_ts_..._175039.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2051_ts_20250718_175039.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (591 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2051_ts_20250718_175039.json' (repr: 'id_2051_ts_20250718_175039.json')
File 'id_2051_ts_20250718_175039.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'id_2021_ts_20250718_174900.json', 'id_2022_ts_20250718_174916.json', 'id_2031_ts_20250718_174933.json', 'id_2032_ts_20250718_174949.json', 'id_2041_ts_20250718_175006.json', 'id_2051_ts_20250718_175023.json', 'id_2051_ts_20250718_175039.json', 'malformed_test.json']
_ TestExcelUploadStaged.test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx] _

self = <test_excel_upload_playwright_pytest.TestExcelUploadStaged object at 0x000001AC0C2FC890>
page = <Page url='http://127.0.0.1:5000/list_staged'>
file_path = 'feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx'

    @pytest.mark.parametrize("file_path", get_test_files())
    def test_discard_staged_by_filename(self, page: Page, file_path: str):
        """
        E2E: Upload a file via /upload_staged, then discard it by filename from /list_staged.
        Ensures discard by filename works and file is removed from the list.
        """
        import re
        from pathlib import Path
        import os
        # Upload file via /upload_staged
        page.goto(f"{BASE_URL}/upload_staged")
        file_input = page.locator("input[type='file']")
        file_input.set_input_files(file_path)
        page.wait_for_timeout(1000)
        # Extract staged JSON filename from redirect URL
        staged_filename = None
        for _ in range(10):
            if "/review_staged/" in page.url:
                match = re.search(r"/review_staged/\d+/(.*?)$", page.url)
                if match:
                    staged_filename = match.group(1)
                    break
            page.wait_for_timeout(500)
        assert staged_filename, f"Could not extract staged filename from URL: {page.url}"
        print(f"Staged filename to discard: '{staged_filename}' (repr: {repr(staged_filename)})")
        # Go to /list_staged and check for the staged file
        page.goto(f"{BASE_URL}/list_staged")
        page.wait_for_load_state("networkidle")
        assert staged_filename in page.content(), f"Staged file {staged_filename} not listed in /list_staged"
        # Discard the staged file by filename
        discard_btn = page.locator(f"form[action*='{staged_filename}'] button[type='submit']").first
        discard_btn.click()
        # Wait for the file to disappear from the list
        for _ in range(10):
            page.wait_for_timeout(500)
            page.goto(f"{BASE_URL}/list_staged")
            page.wait_for_load_state("networkidle")
            if staged_filename not in page.content():
                break
        if staged_filename in page.content():
            print(f"File '{staged_filename}' still listed after discard. Directory contents:")
            print(os.listdir('portal_uploads/staging'))
>       assert staged_filename not in page.content(), f"Staged file {staged_filename} still listed after discard"
E       AssertionError: Staged file id_2052_ts_20250718_175056.json still listed after discard
E       assert 'id_2052_ts_..._175056.json' not in '<!DOCTYPE h...body></html>'
E         
E         'id_2052_ts_20250718_175056.json' is contained here:
E           <!DOCTYPE html><html lang="en"><head>
E             <meta charset="UTF-8">
E           
E             <!-- Bootstrap CSS -->
E             <meta name="viewport" content="width=device-width, initial-scale=1">...
E         
E         ...Full output truncated (620 lines hidden), use '-vv' to show

tests\e2e\test_excel_upload_playwright_pytest.py:807: AssertionError
---------------------------- Captured stdout call -----------------------------
Staged filename to discard: 'id_2052_ts_20250718_175056.json' (repr: 'id_2052_ts_20250718_175056.json')
File 'id_2052_ts_20250718_175056.json' still listed after discard. Directory contents:
['id_2001_ts_20250718_174730.json', 'id_2002_ts_20250718_174758.json', 'id_2011_ts_20250718_174827.json', 'id_2012_ts_20250718_174843.json', 'id_2021_ts_20250718_174900.json', 'id_2022_ts_20250718_174916.json', 'id_2031_ts_20250718_174933.json', 'id_2032_ts_20250718_174949.json', 'id_2041_ts_20250718_175006.json', 'id_2051_ts_20250718_175023.json', 'id_2051_ts_20250718_175039.json', 'id_2052_ts_20250718_175056.json', 'malformed_test.json']
=========================== short test summary info ===========================
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_malformed_staged_file_handling[chromium]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::test_discard_staged_by_filename_with_overlay_logging[chromium-feedback_forms\\testing_versions\\standard\\dairy_digester_operator_feedback_v006_test_03_blank.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\energy_operator_feedback_v003_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\generic_operator_feedback_v002_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v070_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\landfill_operator_feedback_v071_test_02_bad_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_01_good_data.xlsx]
FAILED tests/e2e/test_excel_upload_playwright_pytest.py::TestExcelUploadStaged::test_discard_staged_by_filename[chromium-feedback_forms\\testing_versions\\standard\\oil_and_gas_operator_feedback_v070_test_02_bad_data.xlsx]
==== 15 failed, 12 passed, 13 skipped, 65 deselected in 226.27s (0:03:46) =====
